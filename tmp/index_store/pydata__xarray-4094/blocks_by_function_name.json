{
  "parameterized": [
    [
      "asv_bench/benchmarks/__init__.py",
      [
        "parameterized"
      ]
    ]
  ],
  "requires_dask": [
    [
      "asv_bench/benchmarks/__init__.py",
      [
        "requires_dask"
      ]
    ]
  ],
  "randn": [
    [
      "asv_bench/benchmarks/__init__.py",
      [
        "randn"
      ]
    ]
  ],
  "randint": [
    [
      "asv_bench/benchmarks/__init__.py",
      [
        "randint"
      ]
    ]
  ],
  "setup": [
    [
      "asv_bench/benchmarks/combine.py",
      [
        "Combine",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOWriteSingleNetCDF3",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF4",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF3",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF4Dask",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF3Dask",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOWriteMultipleNetCDF3",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF4",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF3",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF4Dask",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF3Dask",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOWriteNetCDFDask",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOWriteNetCDFDaskDistributed",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/indexing.py",
      [
        "Base",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/indexing.py",
      [
        "IndexingDask",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/indexing.py",
      [
        "BooleanIndexing",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/interp.py",
      [
        "Interpolation",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/interp.py",
      [
        "InterpolationDask",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/reindexing.py",
      [
        "Reindex",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/reindexing.py",
      [
        "ReindexDask",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/rolling.py",
      [
        "Rolling",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/rolling.py",
      [
        "RollingDask",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/unstacking.py",
      [
        "Unstacking",
        "setup"
      ]
    ],
    [
      "asv_bench/benchmarks/unstacking.py",
      [
        "UnstackingDask",
        "setup"
      ]
    ],
    [
      "doc/conf.py",
      [
        "setup"
      ]
    ],
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "TestDatetimeAccessor",
        "setup"
      ]
    ],
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "TestTimedeltaAccessor",
        "setup"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "setup"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestReduce",
        "setup"
      ]
    ],
    [
      "xarray/tests/test_indexing.py",
      [
        "Test_vectorized_indexer",
        "setup"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "PlotTestCase",
        "setup"
      ]
    ],
    [
      "xarray/tests/test_utils.py",
      [
        "TestDictionaries",
        "setup"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "setup"
      ]
    ]
  ],
  "time_combine_manual": [
    [
      "asv_bench/benchmarks/combine.py",
      [
        "Combine",
        "time_combine_manual"
      ]
    ]
  ],
  "time_auto_combine": [
    [
      "asv_bench/benchmarks/combine.py",
      [
        "Combine",
        "time_auto_combine"
      ]
    ]
  ],
  "make_bench_data": [
    [
      "asv_bench/benchmarks/dataarray_missing.py",
      [
        "make_bench_data"
      ]
    ]
  ],
  "time_interpolate_na": [
    [
      "asv_bench/benchmarks/dataarray_missing.py",
      [
        "time_interpolate_na"
      ]
    ]
  ],
  "time_ffill": [
    [
      "asv_bench/benchmarks/dataarray_missing.py",
      [
        "time_ffill"
      ]
    ]
  ],
  "time_bfill": [
    [
      "asv_bench/benchmarks/dataarray_missing.py",
      [
        "time_bfill"
      ]
    ]
  ],
  "make_ds": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOSingleNetCDF",
        "make_ds"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOMultipleNetCDF",
        "make_ds"
      ]
    ],
    [
      "xarray/tests/test_dask.py",
      [
        "make_ds"
      ]
    ]
  ],
  "time_write_dataset_netcdf4": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOWriteSingleNetCDF3",
        "time_write_dataset_netcdf4"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOWriteMultipleNetCDF3",
        "time_write_dataset_netcdf4"
      ]
    ]
  ],
  "time_write_dataset_scipy": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOWriteSingleNetCDF3",
        "time_write_dataset_scipy"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOWriteMultipleNetCDF3",
        "time_write_dataset_scipy"
      ]
    ]
  ],
  "time_load_dataset_netcdf4": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF4",
        "time_load_dataset_netcdf4"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF4",
        "time_load_dataset_netcdf4"
      ]
    ]
  ],
  "time_orthogonal_indexing": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF4",
        "time_orthogonal_indexing"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF3",
        "time_orthogonal_indexing"
      ]
    ]
  ],
  "time_vectorized_indexing": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF4",
        "time_vectorized_indexing"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF3",
        "time_vectorized_indexing"
      ]
    ]
  ],
  "time_load_dataset_scipy": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF3",
        "time_load_dataset_scipy"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF3",
        "time_load_dataset_scipy"
      ]
    ]
  ],
  "time_load_dataset_netcdf4_with_block_chunks": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF4Dask",
        "time_load_dataset_netcdf4_with_block_chunks"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF4Dask",
        "time_load_dataset_netcdf4_with_block_chunks"
      ]
    ]
  ],
  "time_load_dataset_netcdf4_with_block_chunks_oindexing": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF4Dask",
        "time_load_dataset_netcdf4_with_block_chunks_oindexing"
      ]
    ]
  ],
  "time_load_dataset_netcdf4_with_block_chunks_vindexing": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF4Dask",
        "time_load_dataset_netcdf4_with_block_chunks_vindexing"
      ]
    ]
  ],
  "time_load_dataset_netcdf4_with_block_chunks_multiprocessing": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF4Dask",
        "time_load_dataset_netcdf4_with_block_chunks_multiprocessing"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF4Dask",
        "time_load_dataset_netcdf4_with_block_chunks_multiprocessing"
      ]
    ]
  ],
  "time_load_dataset_netcdf4_with_time_chunks": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF4Dask",
        "time_load_dataset_netcdf4_with_time_chunks"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF4Dask",
        "time_load_dataset_netcdf4_with_time_chunks"
      ]
    ]
  ],
  "time_load_dataset_netcdf4_with_time_chunks_multiprocessing": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF4Dask",
        "time_load_dataset_netcdf4_with_time_chunks_multiprocessing"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF4Dask",
        "time_load_dataset_netcdf4_with_time_chunks_multiprocessing"
      ]
    ]
  ],
  "time_load_dataset_scipy_with_block_chunks": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF3Dask",
        "time_load_dataset_scipy_with_block_chunks"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF3Dask",
        "time_load_dataset_scipy_with_block_chunks"
      ]
    ]
  ],
  "time_load_dataset_scipy_with_block_chunks_oindexing": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF3Dask",
        "time_load_dataset_scipy_with_block_chunks_oindexing"
      ]
    ]
  ],
  "time_load_dataset_scipy_with_block_chunks_vindexing": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF3Dask",
        "time_load_dataset_scipy_with_block_chunks_vindexing"
      ]
    ]
  ],
  "time_load_dataset_scipy_with_time_chunks": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadSingleNetCDF3Dask",
        "time_load_dataset_scipy_with_time_chunks"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF3Dask",
        "time_load_dataset_scipy_with_time_chunks"
      ]
    ]
  ],
  "time_open_dataset_netcdf4": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF4",
        "time_open_dataset_netcdf4"
      ]
    ]
  ],
  "time_open_dataset_scipy": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF3",
        "time_open_dataset_scipy"
      ]
    ]
  ],
  "time_open_dataset_netcdf4_with_block_chunks": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF4Dask",
        "time_open_dataset_netcdf4_with_block_chunks"
      ]
    ]
  ],
  "time_open_dataset_netcdf4_with_block_chunks_multiprocessing": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF4Dask",
        "time_open_dataset_netcdf4_with_block_chunks_multiprocessing"
      ]
    ]
  ],
  "time_open_dataset_netcdf4_with_time_chunks": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF4Dask",
        "time_open_dataset_netcdf4_with_time_chunks"
      ]
    ]
  ],
  "time_open_dataset_netcdf4_with_time_chunks_multiprocessing": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF4Dask",
        "time_open_dataset_netcdf4_with_time_chunks_multiprocessing"
      ]
    ]
  ],
  "time_open_dataset_scipy_with_block_chunks": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF3Dask",
        "time_open_dataset_scipy_with_block_chunks"
      ]
    ]
  ],
  "time_open_dataset_scipy_with_time_chunks": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOReadMultipleNetCDF3Dask",
        "time_open_dataset_scipy_with_time_chunks"
      ]
    ]
  ],
  "create_delayed_write": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "create_delayed_write"
      ]
    ]
  ],
  "time_write": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOWriteNetCDFDask",
        "time_write"
      ]
    ],
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOWriteNetCDFDaskDistributed",
        "time_write"
      ]
    ]
  ],
  "cleanup": [
    [
      "asv_bench/benchmarks/dataset_io.py",
      [
        "IOWriteNetCDFDaskDistributed",
        "cleanup"
      ]
    ]
  ],
  "time_indexing_basic": [
    [
      "asv_bench/benchmarks/indexing.py",
      [
        "Indexing",
        "time_indexing_basic"
      ]
    ]
  ],
  "time_indexing_outer": [
    [
      "asv_bench/benchmarks/indexing.py",
      [
        "Indexing",
        "time_indexing_outer"
      ]
    ]
  ],
  "time_indexing_vectorized": [
    [
      "asv_bench/benchmarks/indexing.py",
      [
        "Indexing",
        "time_indexing_vectorized"
      ]
    ]
  ],
  "time_assignment_basic": [
    [
      "asv_bench/benchmarks/indexing.py",
      [
        "Assignment",
        "time_assignment_basic"
      ]
    ]
  ],
  "time_assignment_outer": [
    [
      "asv_bench/benchmarks/indexing.py",
      [
        "Assignment",
        "time_assignment_outer"
      ]
    ]
  ],
  "time_assignment_vectorized": [
    [
      "asv_bench/benchmarks/indexing.py",
      [
        "Assignment",
        "time_assignment_vectorized"
      ]
    ]
  ],
  "time_indexing": [
    [
      "asv_bench/benchmarks/indexing.py",
      [
        "BooleanIndexing",
        "time_indexing"
      ]
    ]
  ],
  "time_interpolation": [
    [
      "asv_bench/benchmarks/interp.py",
      [
        "Interpolation",
        "time_interpolation"
      ]
    ]
  ],
  "time_interpolation_2d": [
    [
      "asv_bench/benchmarks/interp.py",
      [
        "Interpolation",
        "time_interpolation_2d"
      ]
    ]
  ],
  "time_1d_coarse": [
    [
      "asv_bench/benchmarks/reindexing.py",
      [
        "Reindex",
        "time_1d_coarse"
      ]
    ]
  ],
  "time_1d_fine_all_found": [
    [
      "asv_bench/benchmarks/reindexing.py",
      [
        "Reindex",
        "time_1d_fine_all_found"
      ]
    ]
  ],
  "time_1d_fine_some_missing": [
    [
      "asv_bench/benchmarks/reindexing.py",
      [
        "Reindex",
        "time_1d_fine_some_missing"
      ]
    ]
  ],
  "time_2d_coarse": [
    [
      "asv_bench/benchmarks/reindexing.py",
      [
        "Reindex",
        "time_2d_coarse"
      ]
    ]
  ],
  "time_2d_fine_all_found": [
    [
      "asv_bench/benchmarks/reindexing.py",
      [
        "Reindex",
        "time_2d_fine_all_found"
      ]
    ]
  ],
  "time_2d_fine_some_missing": [
    [
      "asv_bench/benchmarks/reindexing.py",
      [
        "Reindex",
        "time_2d_fine_some_missing"
      ]
    ]
  ],
  "time_rolling": [
    [
      "asv_bench/benchmarks/rolling.py",
      [
        "Rolling",
        "time_rolling"
      ]
    ]
  ],
  "time_rolling_long": [
    [
      "asv_bench/benchmarks/rolling.py",
      [
        "Rolling",
        "time_rolling_long"
      ]
    ]
  ],
  "time_rolling_np": [
    [
      "asv_bench/benchmarks/rolling.py",
      [
        "Rolling",
        "time_rolling_np"
      ]
    ]
  ],
  "time_rolling_construct": [
    [
      "asv_bench/benchmarks/rolling.py",
      [
        "Rolling",
        "time_rolling_construct"
      ]
    ]
  ],
  "time_unstack_fast": [
    [
      "asv_bench/benchmarks/unstacking.py",
      [
        "Unstacking",
        "time_unstack_fast"
      ]
    ]
  ],
  "time_unstack_slow": [
    [
      "asv_bench/benchmarks/unstacking.py",
      [
        "Unstacking",
        "time_unstack_slow"
      ]
    ]
  ],
  "error": [
    [
      "ci/min_deps_check.py",
      [
        "error"
      ]
    ]
  ],
  "warning": [
    [
      "ci/min_deps_check.py",
      [
        "warning"
      ]
    ]
  ],
  "parse_requirements": [
    [
      "ci/min_deps_check.py",
      [
        "parse_requirements"
      ]
    ]
  ],
  "query_conda": [
    [
      "ci/min_deps_check.py",
      [
        "query_conda"
      ]
    ]
  ],
  "process_pkg": [
    [
      "ci/min_deps_check.py",
      [
        "process_pkg"
      ]
    ]
  ],
  "fmt_version": [
    [
      "ci/min_deps_check.py",
      [
        "fmt_version"
      ]
    ]
  ],
  "main": [
    [
      "ci/min_deps_check.py",
      [
        "main"
      ]
    ]
  ],
  "pytest_addoption": [
    [
      "conftest.py",
      [
        "pytest_addoption"
      ]
    ]
  ],
  "pytest_runtest_setup": [
    [
      "conftest.py",
      [
        "pytest_runtest_setup"
      ]
    ]
  ],
  "add_standard_imports": [
    [
      "conftest.py",
      [
        "add_standard_imports"
      ]
    ]
  ],
  "format_signature": [
    [
      "doc/conf.py",
      [
        "AccessorDocumenter",
        "format_signature"
      ]
    ]
  ],
  "resolve_name": [
    [
      "doc/conf.py",
      [
        "AccessorLevelDocumenter",
        "resolve_name"
      ]
    ]
  ],
  "format_name": [
    [
      "doc/conf.py",
      [
        "AccessorCallableDocumenter",
        "format_name"
      ]
    ]
  ],
  "center": [
    [
      "doc/examples/_code/accessor_example.py",
      [
        "GeoAccessor",
        "center"
      ]
    ],
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "center"
      ]
    ]
  ],
  "plot": [
    [
      "doc/examples/_code/accessor_example.py",
      [
        "GeoAccessor",
        "plot"
      ]
    ],
    [
      "xarray/plot/plot.py",
      [
        "plot"
      ]
    ]
  ],
  "test_CFMask_coder_roundtrip": [
    [
      "properties/test_encode_decode.py",
      [
        "test_CFMask_coder_roundtrip"
      ]
    ]
  ],
  "test_CFScaleOffset_coder_roundtrip": [
    [
      "properties/test_encode_decode.py",
      [
        "test_CFScaleOffset_coder_roundtrip"
      ]
    ]
  ],
  "datasets_1d_vars": [
    [
      "properties/test_pandas_roundtrip.py",
      [
        "datasets_1d_vars"
      ]
    ]
  ],
  "test_roundtrip_dataarray": [
    [
      "properties/test_pandas_roundtrip.py",
      [
        "test_roundtrip_dataarray"
      ]
    ]
  ],
  "test_roundtrip_dataset": [
    [
      "properties/test_pandas_roundtrip.py",
      [
        "test_roundtrip_dataset"
      ]
    ]
  ],
  "test_roundtrip_pandas_series": [
    [
      "properties/test_pandas_roundtrip.py",
      [
        "test_roundtrip_pandas_series"
      ]
    ]
  ],
  "test_roundtrip_pandas_dataframe": [
    [
      "properties/test_pandas_roundtrip.py",
      [
        "test_roundtrip_pandas_dataframe"
      ]
    ]
  ],
  "_get_default_engine_remote_uri": [
    [
      "xarray/backends/api.py",
      [
        "_get_default_engine_remote_uri"
      ]
    ]
  ],
  "_get_default_engine_grib": [
    [
      "xarray/backends/api.py",
      [
        "_get_default_engine_grib"
      ]
    ]
  ],
  "_get_default_engine_gz": [
    [
      "xarray/backends/api.py",
      [
        "_get_default_engine_gz"
      ]
    ]
  ],
  "_get_default_engine_netcdf": [
    [
      "xarray/backends/api.py",
      [
        "_get_default_engine_netcdf"
      ]
    ]
  ],
  "_get_engine_from_magic_number": [
    [
      "xarray/backends/api.py",
      [
        "_get_engine_from_magic_number"
      ]
    ]
  ],
  "_get_default_engine": [
    [
      "xarray/backends/api.py",
      [
        "_get_default_engine"
      ]
    ]
  ],
  "_normalize_path": [
    [
      "xarray/backends/api.py",
      [
        "_normalize_path"
      ]
    ]
  ],
  "_validate_dataset_names": [
    [
      "xarray/backends/api.py",
      [
        "_validate_dataset_names"
      ]
    ]
  ],
  "check_attr": [
    [
      "xarray/backends/api.py",
      [
        "_validate_attrs",
        "check_attr"
      ]
    ]
  ],
  "_validate_attrs": [
    [
      "xarray/backends/api.py",
      [
        "_validate_attrs"
      ]
    ]
  ],
  "_protect_dataset_variables_inplace": [
    [
      "xarray/backends/api.py",
      [
        "_protect_dataset_variables_inplace"
      ]
    ]
  ],
  "_finalize_store": [
    [
      "xarray/backends/api.py",
      [
        "_finalize_store"
      ]
    ]
  ],
  "load_dataset": [
    [
      "xarray/backends/api.py",
      [
        "load_dataset"
      ]
    ],
    [
      "xarray/tutorial.py",
      [
        "load_dataset"
      ]
    ]
  ],
  "load_dataarray": [
    [
      "xarray/backends/api.py",
      [
        "load_dataarray"
      ]
    ]
  ],
  "maybe_decode_store": [
    [
      "xarray/backends/api.py",
      [
        "open_dataset",
        "maybe_decode_store"
      ]
    ],
    [
      "xarray/backends/zarr.py",
      [
        "open_zarr",
        "maybe_decode_store"
      ]
    ]
  ],
  "open_dataset": [
    [
      "xarray/backends/api.py",
      [
        "open_dataset"
      ]
    ],
    [
      "xarray/tutorial.py",
      [
        "open_dataset"
      ]
    ]
  ],
  "open_dataarray": [
    [
      "xarray/backends/api.py",
      [
        "open_dataarray"
      ]
    ]
  ],
  "close": [
    [
      "xarray/backends/api.py",
      [
        "_MultiFileCloser",
        "close"
      ]
    ],
    [
      "xarray/backends/common.py",
      [
        "AbstractDataStore",
        "close"
      ]
    ],
    [
      "xarray/backends/file_manager.py",
      [
        "FileManager",
        "close"
      ]
    ],
    [
      "xarray/backends/file_manager.py",
      [
        "CachingFileManager",
        "close"
      ]
    ],
    [
      "xarray/backends/file_manager.py",
      [
        "DummyFileManager",
        "close"
      ]
    ],
    [
      "xarray/backends/h5netcdf_.py",
      [
        "H5NetCDFStore",
        "close"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "NetCDF4DataStore",
        "close"
      ]
    ],
    [
      "xarray/backends/pseudonetcdf_.py",
      [
        "PseudoNetCDFDataStore",
        "close"
      ]
    ],
    [
      "xarray/backends/pynio_.py",
      [
        "NioDataStore",
        "close"
      ]
    ],
    [
      "xarray/backends/scipy_.py",
      [
        "ScipyDataStore",
        "close"
      ]
    ],
    [
      "xarray/backends/zarr.py",
      [
        "ZarrStore",
        "close"
      ]
    ],
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "close"
      ]
    ]
  ],
  "open_mfdataset": [
    [
      "xarray/backends/api.py",
      [
        "open_mfdataset"
      ]
    ]
  ],
  "to_netcdf": [
    [
      "xarray/backends/api.py",
      [
        "to_netcdf"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "to_netcdf"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "to_netcdf"
      ]
    ]
  ],
  "dump_to_store": [
    [
      "xarray/backends/api.py",
      [
        "dump_to_store"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "dump_to_store"
      ]
    ]
  ],
  "save_mfdataset": [
    [
      "xarray/backends/api.py",
      [
        "save_mfdataset"
      ]
    ]
  ],
  "_validate_datatypes_for_zarr_append": [
    [
      "xarray/backends/api.py",
      [
        "_validate_datatypes_for_zarr_append"
      ]
    ]
  ],
  "_validate_append_dim_and_encoding": [
    [
      "xarray/backends/api.py",
      [
        "_validate_append_dim_and_encoding"
      ]
    ]
  ],
  "to_zarr": [
    [
      "xarray/backends/api.py",
      [
        "to_zarr"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "to_zarr"
      ]
    ]
  ],
  "__getitem__": [
    [
      "xarray/backends/cfgrib_.py",
      [
        "CfGribArrayWrapper",
        "__getitem__"
      ]
    ],
    [
      "xarray/backends/common.py",
      [
        "AbstractDataStore",
        "__getitem__"
      ]
    ],
    [
      "xarray/backends/h5netcdf_.py",
      [
        "H5NetCDFArrayWrapper",
        "__getitem__"
      ]
    ],
    [
      "xarray/backends/lru_cache.py",
      [
        "LRUCache",
        "__getitem__"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "NetCDF4ArrayWrapper",
        "__getitem__"
      ]
    ],
    [
      "xarray/backends/pseudonetcdf_.py",
      [
        "PncArrayWrapper",
        "__getitem__"
      ]
    ],
    [
      "xarray/backends/pydap_.py",
      [
        "PydapArrayWrapper",
        "__getitem__"
      ]
    ],
    [
      "xarray/backends/pynio_.py",
      [
        "NioArrayWrapper",
        "__getitem__"
      ]
    ],
    [
      "xarray/backends/rasterio_.py",
      [
        "RasterioArrayWrapper",
        "__getitem__"
      ]
    ],
    [
      "xarray/backends/scipy_.py",
      [
        "ScipyArrayWrapper",
        "__getitem__"
      ]
    ],
    [
      "xarray/backends/zarr.py",
      [
        "ZarrArrayWrapper",
        "__getitem__"
      ]
    ],
    [
      "xarray/coding/strings.py",
      [
        "StackedBytesArray",
        "__getitem__"
      ]
    ],
    [
      "xarray/coding/variables.py",
      [
        "_ElementwiseFunctionArray",
        "__getitem__"
      ]
    ],
    [
      "xarray/conventions.py",
      [
        "NativeEndiannessArray",
        "__getitem__"
      ]
    ],
    [
      "xarray/conventions.py",
      [
        "BoolTypeArray",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "Coordinates",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "DatasetCoordinates",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "DataArrayCoordinates",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "LevelCoordinatesSource",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "_LocIndexer",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "DataVariables",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "_LocIndexer",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "_DummyGroup",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/indexes.py",
      [
        "Indexes",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "ImplicitToExplicitIndexingAdapter",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "LazilyOuterIndexedArray",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "LazilyVectorizedIndexedArray",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "CopyOnWriteArray",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "MemoryCachedArray",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "NumpyIndexingAdapter",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "DaskIndexingAdapter",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "PandasIndexAdapter",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/nputils.py",
      [
        "NumpyVIndexAdapter",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "Frozen",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "SortedKeysDict",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "NDArrayMixin",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "HiddenKeyDict",
        "__getitem__"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "__getitem__"
      ]
    ],
    [
      "xarray/tests/__init__.py",
      [
        "InaccessibleArray",
        "__getitem__"
      ]
    ],
    [
      "xarray/tests/__init__.py",
      [
        "ReturnItem",
        "__getitem__"
      ]
    ],
    [
      "xarray/tests/__init__.py",
      [
        "IndexerMaker",
        "__getitem__"
      ]
    ],
    [
      "xarray/tests/test_backends_common.py",
      [
        "DummyArray",
        "__getitem__"
      ]
    ]
  ],
  "_getitem": [
    [
      "xarray/backends/cfgrib_.py",
      [
        "CfGribArrayWrapper",
        "_getitem"
      ]
    ],
    [
      "xarray/backends/h5netcdf_.py",
      [
        "H5NetCDFArrayWrapper",
        "_getitem"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "NetCDF4ArrayWrapper",
        "_getitem"
      ]
    ],
    [
      "xarray/backends/pseudonetcdf_.py",
      [
        "PncArrayWrapper",
        "_getitem"
      ]
    ],
    [
      "xarray/backends/pydap_.py",
      [
        "PydapArrayWrapper",
        "_getitem"
      ]
    ],
    [
      "xarray/backends/pynio_.py",
      [
        "NioArrayWrapper",
        "_getitem"
      ]
    ],
    [
      "xarray/backends/rasterio_.py",
      [
        "RasterioArrayWrapper",
        "_getitem"
      ]
    ]
  ],
  "open_store_variable": [
    [
      "xarray/backends/cfgrib_.py",
      [
        "CfGribDataStore",
        "open_store_variable"
      ]
    ],
    [
      "xarray/backends/h5netcdf_.py",
      [
        "H5NetCDFStore",
        "open_store_variable"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "NetCDF4DataStore",
        "open_store_variable"
      ]
    ],
    [
      "xarray/backends/pseudonetcdf_.py",
      [
        "PseudoNetCDFDataStore",
        "open_store_variable"
      ]
    ],
    [
      "xarray/backends/pydap_.py",
      [
        "PydapDataStore",
        "open_store_variable"
      ]
    ],
    [
      "xarray/backends/pynio_.py",
      [
        "NioDataStore",
        "open_store_variable"
      ]
    ],
    [
      "xarray/backends/scipy_.py",
      [
        "ScipyDataStore",
        "open_store_variable"
      ]
    ],
    [
      "xarray/backends/zarr.py",
      [
        "ZarrStore",
        "open_store_variable"
      ]
    ]
  ],
  "get_variables": [
    [
      "xarray/backends/cfgrib_.py",
      [
        "CfGribDataStore",
        "get_variables"
      ]
    ],
    [
      "xarray/backends/common.py",
      [
        "AbstractDataStore",
        "get_variables"
      ]
    ],
    [
      "xarray/backends/h5netcdf_.py",
      [
        "H5NetCDFStore",
        "get_variables"
      ]
    ],
    [
      "xarray/backends/memory.py",
      [
        "InMemoryDataStore",
        "get_variables"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "NetCDF4DataStore",
        "get_variables"
      ]
    ],
    [
      "xarray/backends/pseudonetcdf_.py",
      [
        "PseudoNetCDFDataStore",
        "get_variables"
      ]
    ],
    [
      "xarray/backends/pydap_.py",
      [
        "PydapDataStore",
        "get_variables"
      ]
    ],
    [
      "xarray/backends/pynio_.py",
      [
        "NioDataStore",
        "get_variables"
      ]
    ],
    [
      "xarray/backends/scipy_.py",
      [
        "ScipyDataStore",
        "get_variables"
      ]
    ],
    [
      "xarray/backends/zarr.py",
      [
        "ZarrStore",
        "get_variables"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "InaccessibleVariableDataStore",
        "get_variables"
      ]
    ]
  ],
  "get_attrs": [
    [
      "xarray/backends/cfgrib_.py",
      [
        "CfGribDataStore",
        "get_attrs"
      ]
    ],
    [
      "xarray/backends/common.py",
      [
        "AbstractDataStore",
        "get_attrs"
      ]
    ],
    [
      "xarray/backends/h5netcdf_.py",
      [
        "H5NetCDFStore",
        "get_attrs"
      ]
    ],
    [
      "xarray/backends/memory.py",
      [
        "InMemoryDataStore",
        "get_attrs"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "NetCDF4DataStore",
        "get_attrs"
      ]
    ],
    [
      "xarray/backends/pseudonetcdf_.py",
      [
        "PseudoNetCDFDataStore",
        "get_attrs"
      ]
    ],
    [
      "xarray/backends/pydap_.py",
      [
        "PydapDataStore",
        "get_attrs"
      ]
    ],
    [
      "xarray/backends/pynio_.py",
      [
        "NioDataStore",
        "get_attrs"
      ]
    ],
    [
      "xarray/backends/scipy_.py",
      [
        "ScipyDataStore",
        "get_attrs"
      ]
    ],
    [
      "xarray/backends/zarr.py",
      [
        "ZarrStore",
        "get_attrs"
      ]
    ]
  ],
  "get_dimensions": [
    [
      "xarray/backends/cfgrib_.py",
      [
        "CfGribDataStore",
        "get_dimensions"
      ]
    ],
    [
      "xarray/backends/common.py",
      [
        "AbstractDataStore",
        "get_dimensions"
      ]
    ],
    [
      "xarray/backends/h5netcdf_.py",
      [
        "H5NetCDFStore",
        "get_dimensions"
      ]
    ],
    [
      "xarray/backends/memory.py",
      [
        "InMemoryDataStore",
        "get_dimensions"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "NetCDF4DataStore",
        "get_dimensions"
      ]
    ],
    [
      "xarray/backends/pseudonetcdf_.py",
      [
        "PseudoNetCDFDataStore",
        "get_dimensions"
      ]
    ],
    [
      "xarray/backends/pydap_.py",
      [
        "PydapDataStore",
        "get_dimensions"
      ]
    ],
    [
      "xarray/backends/pynio_.py",
      [
        "NioDataStore",
        "get_dimensions"
      ]
    ],
    [
      "xarray/backends/scipy_.py",
      [
        "ScipyDataStore",
        "get_dimensions"
      ]
    ],
    [
      "xarray/backends/zarr.py",
      [
        "ZarrStore",
        "get_dimensions"
      ]
    ]
  ],
  "get_encoding": [
    [
      "xarray/backends/cfgrib_.py",
      [
        "CfGribDataStore",
        "get_encoding"
      ]
    ],
    [
      "xarray/backends/common.py",
      [
        "AbstractDataStore",
        "get_encoding"
      ]
    ],
    [
      "xarray/backends/h5netcdf_.py",
      [
        "H5NetCDFStore",
        "get_encoding"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "NetCDF4DataStore",
        "get_encoding"
      ]
    ],
    [
      "xarray/backends/pseudonetcdf_.py",
      [
        "PseudoNetCDFDataStore",
        "get_encoding"
      ]
    ],
    [
      "xarray/backends/pynio_.py",
      [
        "NioDataStore",
        "get_encoding"
      ]
    ],
    [
      "xarray/backends/scipy_.py",
      [
        "ScipyDataStore",
        "get_encoding"
      ]
    ]
  ],
  "_encode_variable_name": [
    [
      "xarray/backends/common.py",
      [
        "_encode_variable_name"
      ]
    ]
  ],
  "_decode_variable_name": [
    [
      "xarray/backends/common.py",
      [
        "_decode_variable_name"
      ]
    ]
  ],
  "find_root_and_group": [
    [
      "xarray/backends/common.py",
      [
        "find_root_and_group"
      ]
    ]
  ],
  "robust_getitem": [
    [
      "xarray/backends/common.py",
      [
        "robust_getitem"
      ]
    ]
  ],
  "__array__": [
    [
      "xarray/backends/common.py",
      [
        "BackendArray",
        "__array__"
      ]
    ],
    [
      "xarray/coding/variables.py",
      [
        "_ElementwiseFunctionArray",
        "__array__"
      ]
    ],
    [
      "xarray/core/common.py",
      [
        "AbstractArray",
        "__array__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__array__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "ExplicitlyIndexedNDArrayMixin",
        "__array__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "ImplicitToExplicitIndexingAdapter",
        "__array__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "LazilyOuterIndexedArray",
        "__array__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "LazilyVectorizedIndexedArray",
        "__array__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "CopyOnWriteArray",
        "__array__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "MemoryCachedArray",
        "__array__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "PandasIndexAdapter",
        "__array__"
      ]
    ]
  ],
  "__iter__": [
    [
      "xarray/backends/common.py",
      [
        "AbstractDataStore",
        "__iter__"
      ]
    ],
    [
      "xarray/backends/lru_cache.py",
      [
        "LRUCache",
        "__iter__"
      ]
    ],
    [
      "xarray/core/common.py",
      [
        "AbstractArray",
        "__iter__"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "Coordinates",
        "__iter__"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "LevelCoordinatesSource",
        "__iter__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "DataVariables",
        "__iter__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__iter__"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "__iter__"
      ]
    ],
    [
      "xarray/core/indexes.py",
      [
        "Indexes",
        "__iter__"
      ]
    ],
    [
      "xarray/core/rolling.py",
      [
        "DataArrayRolling",
        "__iter__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "Frozen",
        "__iter__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "SortedKeysDict",
        "__iter__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "OrderedSet",
        "__iter__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "HiddenKeyDict",
        "__iter__"
      ]
    ]
  ],
  "__len__": [
    [
      "xarray/backends/common.py",
      [
        "AbstractDataStore",
        "__len__"
      ]
    ],
    [
      "xarray/backends/lru_cache.py",
      [
        "LRUCache",
        "__len__"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "Coordinates",
        "__len__"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "LevelCoordinatesSource",
        "__len__"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "__len__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "DataVariables",
        "__len__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__len__"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "__len__"
      ]
    ],
    [
      "xarray/core/indexes.py",
      [
        "Indexes",
        "__len__"
      ]
    ],
    [
      "xarray/core/rolling.py",
      [
        "Rolling",
        "__len__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "Frozen",
        "__len__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "SortedKeysDict",
        "__len__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "OrderedSet",
        "__len__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "NdimSizeLenMixin",
        "__len__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "HiddenKeyDict",
        "__len__"
      ]
    ]
  ],
  "load": [
    [
      "xarray/backends/common.py",
      [
        "AbstractDataStore",
        "load"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "load"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "load"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "load"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "load"
      ]
    ]
  ],
  "variables": [
    [
      "xarray/backends/common.py",
      [
        "AbstractDataStore",
        "variables"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "Coordinates",
        "variables"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "DatasetCoordinates",
        "variables"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "DataArrayCoordinates",
        "variables"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "DataVariables",
        "variables"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "variables"
      ]
    ]
  ],
  "attrs": [
    [
      "xarray/backends/common.py",
      [
        "AbstractDataStore",
        "attrs"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "attrs"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "attrs"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "attrs"
      ]
    ]
  ],
  "dimensions": [
    [
      "xarray/backends/common.py",
      [
        "AbstractDataStore",
        "dimensions"
      ]
    ]
  ],
  "__enter__": [
    [
      "xarray/backends/common.py",
      [
        "AbstractDataStore",
        "__enter__"
      ]
    ],
    [
      "xarray/backends/locks.py",
      [
        "CombinedLock",
        "__enter__"
      ]
    ],
    [
      "xarray/backends/locks.py",
      [
        "DummyLock",
        "__enter__"
      ]
    ],
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "__enter__"
      ]
    ],
    [
      "xarray/core/options.py",
      [
        "set_options",
        "__enter__"
      ]
    ]
  ],
  "__exit__": [
    [
      "xarray/backends/common.py",
      [
        "AbstractDataStore",
        "__exit__"
      ]
    ],
    [
      "xarray/backends/locks.py",
      [
        "CombinedLock",
        "__exit__"
      ]
    ],
    [
      "xarray/backends/locks.py",
      [
        "DummyLock",
        "__exit__"
      ]
    ],
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "__exit__"
      ]
    ],
    [
      "xarray/core/options.py",
      [
        "set_options",
        "__exit__"
      ]
    ]
  ],
  "add": [
    [
      "xarray/backends/common.py",
      [
        "ArrayWriter",
        "add"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "OrderedSet",
        "add"
      ]
    ],
    [
      "xarray/tests/test_computation.py",
      [
        "add"
      ]
    ],
    [
      "xarray/tests/test_computation.py",
      [
        "test_keep_attrs",
        "add"
      ]
    ],
    [
      "xarray/tests/test_computation.py",
      [
        "test_dataset_join",
        "add"
      ]
    ]
  ],
  "sync": [
    [
      "xarray/backends/common.py",
      [
        "ArrayWriter",
        "sync"
      ]
    ],
    [
      "xarray/backends/h5netcdf_.py",
      [
        "H5NetCDFStore",
        "sync"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "NetCDF4DataStore",
        "sync"
      ]
    ],
    [
      "xarray/backends/scipy_.py",
      [
        "ScipyDataStore",
        "sync"
      ]
    ],
    [
      "xarray/backends/zarr.py",
      [
        "ZarrStore",
        "sync"
      ]
    ]
  ],
  "encode": [
    [
      "xarray/backends/common.py",
      [
        "AbstractWritableDataStore",
        "encode"
      ]
    ],
    [
      "xarray/backends/common.py",
      [
        "WritableCFDataStore",
        "encode"
      ]
    ],
    [
      "xarray/coding/strings.py",
      [
        "EncodedStringCoder",
        "encode"
      ]
    ],
    [
      "xarray/coding/strings.py",
      [
        "CharacterArrayCoder",
        "encode"
      ]
    ],
    [
      "xarray/coding/times.py",
      [
        "CFDatetimeCoder",
        "encode"
      ]
    ],
    [
      "xarray/coding/times.py",
      [
        "CFTimedeltaCoder",
        "encode"
      ]
    ],
    [
      "xarray/coding/variables.py",
      [
        "VariableCoder",
        "encode"
      ]
    ],
    [
      "xarray/coding/variables.py",
      [
        "CFMaskCoder",
        "encode"
      ]
    ],
    [
      "xarray/coding/variables.py",
      [
        "CFScaleOffsetCoder",
        "encode"
      ]
    ],
    [
      "xarray/coding/variables.py",
      [
        "UnsignedIntegerCoder",
        "encode"
      ]
    ],
    [
      "xarray/convert.py",
      [
        "encode"
      ]
    ],
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "encode"
      ]
    ]
  ],
  "encode_variable": [
    [
      "xarray/backends/common.py",
      [
        "AbstractWritableDataStore",
        "encode_variable"
      ]
    ],
    [
      "xarray/backends/h5netcdf_.py",
      [
        "H5NetCDFStore",
        "encode_variable"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "NetCDF4DataStore",
        "encode_variable"
      ]
    ],
    [
      "xarray/backends/scipy_.py",
      [
        "ScipyDataStore",
        "encode_variable"
      ]
    ],
    [
      "xarray/backends/zarr.py",
      [
        "ZarrStore",
        "encode_variable"
      ]
    ],
    [
      "xarray/tests/test_conventions.py",
      [
        "CFEncodedInMemoryStore",
        "encode_variable"
      ]
    ]
  ],
  "encode_attribute": [
    [
      "xarray/backends/common.py",
      [
        "AbstractWritableDataStore",
        "encode_attribute"
      ]
    ],
    [
      "xarray/backends/zarr.py",
      [
        "ZarrStore",
        "encode_attribute"
      ]
    ]
  ],
  "set_dimension": [
    [
      "xarray/backends/common.py",
      [
        "AbstractWritableDataStore",
        "set_dimension"
      ]
    ],
    [
      "xarray/backends/h5netcdf_.py",
      [
        "H5NetCDFStore",
        "set_dimension"
      ]
    ],
    [
      "xarray/backends/memory.py",
      [
        "InMemoryDataStore",
        "set_dimension"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "NetCDF4DataStore",
        "set_dimension"
      ]
    ],
    [
      "xarray/backends/scipy_.py",
      [
        "ScipyDataStore",
        "set_dimension"
      ]
    ]
  ],
  "set_attribute": [
    [
      "xarray/backends/common.py",
      [
        "AbstractWritableDataStore",
        "set_attribute"
      ]
    ],
    [
      "xarray/backends/h5netcdf_.py",
      [
        "H5NetCDFStore",
        "set_attribute"
      ]
    ],
    [
      "xarray/backends/memory.py",
      [
        "InMemoryDataStore",
        "set_attribute"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "NetCDF4DataStore",
        "set_attribute"
      ]
    ],
    [
      "xarray/backends/scipy_.py",
      [
        "ScipyDataStore",
        "set_attribute"
      ]
    ]
  ],
  "set_variable": [
    [
      "xarray/backends/common.py",
      [
        "AbstractWritableDataStore",
        "set_variable"
      ]
    ]
  ],
  "store_dataset": [
    [
      "xarray/backends/common.py",
      [
        "AbstractWritableDataStore",
        "store_dataset"
      ]
    ]
  ],
  "store": [
    [
      "xarray/backends/common.py",
      [
        "AbstractWritableDataStore",
        "store"
      ]
    ],
    [
      "xarray/backends/zarr.py",
      [
        "ZarrStore",
        "store"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "InaccessibleVariableDataStore",
        "store"
      ]
    ]
  ],
  "set_attributes": [
    [
      "xarray/backends/common.py",
      [
        "AbstractWritableDataStore",
        "set_attributes"
      ]
    ],
    [
      "xarray/backends/zarr.py",
      [
        "ZarrStore",
        "set_attributes"
      ]
    ]
  ],
  "set_variables": [
    [
      "xarray/backends/common.py",
      [
        "AbstractWritableDataStore",
        "set_variables"
      ]
    ],
    [
      "xarray/backends/zarr.py",
      [
        "ZarrStore",
        "set_variables"
      ]
    ]
  ],
  "set_dimensions": [
    [
      "xarray/backends/common.py",
      [
        "AbstractWritableDataStore",
        "set_dimensions"
      ]
    ],
    [
      "xarray/backends/zarr.py",
      [
        "ZarrStore",
        "set_dimensions"
      ]
    ]
  ],
  "acquire": [
    [
      "xarray/backends/file_manager.py",
      [
        "FileManager",
        "acquire"
      ]
    ],
    [
      "xarray/backends/file_manager.py",
      [
        "CachingFileManager",
        "acquire"
      ]
    ],
    [
      "xarray/backends/file_manager.py",
      [
        "DummyFileManager",
        "acquire"
      ]
    ],
    [
      "xarray/backends/locks.py",
      [
        "acquire"
      ]
    ],
    [
      "xarray/backends/locks.py",
      [
        "CombinedLock",
        "acquire"
      ]
    ],
    [
      "xarray/backends/locks.py",
      [
        "DummyLock",
        "acquire"
      ]
    ]
  ],
  "acquire_context": [
    [
      "xarray/backends/file_manager.py",
      [
        "FileManager",
        "acquire_context"
      ]
    ],
    [
      "xarray/backends/file_manager.py",
      [
        "CachingFileManager",
        "acquire_context"
      ]
    ],
    [
      "xarray/backends/file_manager.py",
      [
        "DummyFileManager",
        "acquire_context"
      ]
    ]
  ],
  "_make_key": [
    [
      "xarray/backends/file_manager.py",
      [
        "CachingFileManager",
        "_make_key"
      ]
    ]
  ],
  "_optional_lock": [
    [
      "xarray/backends/file_manager.py",
      [
        "CachingFileManager",
        "_optional_lock"
      ]
    ]
  ],
  "_acquire_with_cache_info": [
    [
      "xarray/backends/file_manager.py",
      [
        "CachingFileManager",
        "_acquire_with_cache_info"
      ]
    ]
  ],
  "__del__": [
    [
      "xarray/backends/file_manager.py",
      [
        "CachingFileManager",
        "__del__"
      ]
    ]
  ],
  "__getstate__": [
    [
      "xarray/backends/file_manager.py",
      [
        "CachingFileManager",
        "__getstate__"
      ]
    ]
  ],
  "__setstate__": [
    [
      "xarray/backends/file_manager.py",
      [
        "CachingFileManager",
        "__setstate__"
      ]
    ]
  ],
  "__repr__": [
    [
      "xarray/backends/file_manager.py",
      [
        "CachingFileManager",
        "__repr__"
      ]
    ],
    [
      "xarray/backends/locks.py",
      [
        "CombinedLock",
        "__repr__"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "BaseCFTimeOffset",
        "__repr__"
      ]
    ],
    [
      "xarray/coding/strings.py",
      [
        "StackedBytesArray",
        "__repr__"
      ]
    ],
    [
      "xarray/coding/variables.py",
      [
        "_ElementwiseFunctionArray",
        "__repr__"
      ]
    ],
    [
      "xarray/core/common.py",
      [
        "AbstractArray",
        "__repr__"
      ]
    ],
    [
      "xarray/core/computation.py",
      [
        "_UFuncSignature",
        "__repr__"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "Coordinates",
        "__repr__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "DataVariables",
        "__repr__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__repr__"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "__repr__"
      ]
    ],
    [
      "xarray/core/indexes.py",
      [
        "Indexes",
        "__repr__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "ExplicitIndexer",
        "__repr__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "LazilyOuterIndexedArray",
        "__repr__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "LazilyVectorizedIndexedArray",
        "__repr__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "PandasIndexAdapter",
        "__repr__"
      ]
    ],
    [
      "xarray/core/missing.py",
      [
        "BaseInterpolator",
        "__repr__"
      ]
    ],
    [
      "xarray/core/rolling.py",
      [
        "Rolling",
        "__repr__"
      ]
    ],
    [
      "xarray/core/rolling.py",
      [
        "Coarsen",
        "__repr__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "Frozen",
        "__repr__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "SortedKeysDict",
        "__repr__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "OrderedSet",
        "__repr__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "NDArrayMixin",
        "__repr__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "ReprObject",
        "__repr__"
      ]
    ],
    [
      "xarray/core/weighted.py",
      [
        "Weighted",
        "__repr__"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "do",
        "__repr__"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "method",
        "__repr__"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "function",
        "__repr__"
      ]
    ]
  ],
  "increment": [
    [
      "xarray/backends/file_manager.py",
      [
        "_RefCounter",
        "increment"
      ]
    ]
  ],
  "decrement": [
    [
      "xarray/backends/file_manager.py",
      [
        "_RefCounter",
        "decrement"
      ]
    ]
  ],
  "__hash__": [
    [
      "xarray/backends/file_manager.py",
      [
        "_HashedSequence",
        "__hash__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "ReprObject",
        "__hash__"
      ]
    ]
  ],
  "get_array": [
    [
      "xarray/backends/h5netcdf_.py",
      [
        "H5NetCDFArrayWrapper",
        "get_array"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "BaseNetCDF4Array",
        "get_array"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "NetCDF4ArrayWrapper",
        "get_array"
      ]
    ],
    [
      "xarray/backends/pseudonetcdf_.py",
      [
        "PncArrayWrapper",
        "get_array"
      ]
    ],
    [
      "xarray/backends/pynio_.py",
      [
        "NioArrayWrapper",
        "get_array"
      ]
    ],
    [
      "xarray/backends/zarr.py",
      [
        "ZarrArrayWrapper",
        "get_array"
      ]
    ]
  ],
  "maybe_decode_bytes": [
    [
      "xarray/backends/h5netcdf_.py",
      [
        "maybe_decode_bytes"
      ]
    ]
  ],
  "_read_attributes": [
    [
      "xarray/backends/h5netcdf_.py",
      [
        "_read_attributes"
      ]
    ]
  ],
  "_h5netcdf_create_group": [
    [
      "xarray/backends/h5netcdf_.py",
      [
        "_h5netcdf_create_group"
      ]
    ]
  ],
  "open": [
    [
      "xarray/backends/h5netcdf_.py",
      [
        "H5NetCDFStore",
        "open"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "NetCDF4DataStore",
        "open"
      ]
    ],
    [
      "xarray/backends/pseudonetcdf_.py",
      [
        "PseudoNetCDFDataStore",
        "open"
      ]
    ],
    [
      "xarray/backends/pydap_.py",
      [
        "PydapDataStore",
        "open"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "open"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "open"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestPyNio",
        "open"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestPseudoNetCDFFormat",
        "open"
      ]
    ]
  ],
  "_acquire": [
    [
      "xarray/backends/h5netcdf_.py",
      [
        "H5NetCDFStore",
        "_acquire"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "NetCDF4DataStore",
        "_acquire"
      ]
    ]
  ],
  "ds": [
    [
      "xarray/backends/h5netcdf_.py",
      [
        "H5NetCDFStore",
        "ds"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "NetCDF4DataStore",
        "ds"
      ]
    ],
    [
      "xarray/backends/pseudonetcdf_.py",
      [
        "PseudoNetCDFDataStore",
        "ds"
      ]
    ],
    [
      "xarray/backends/pynio_.py",
      [
        "NioDataStore",
        "ds"
      ]
    ],
    [
      "xarray/backends/scipy_.py",
      [
        "ScipyDataStore",
        "ds"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "ds"
      ]
    ],
    [
      "xarray/tests/test_missing.py",
      [
        "ds"
      ]
    ]
  ],
  "prepare_variable": [
    [
      "xarray/backends/h5netcdf_.py",
      [
        "H5NetCDFStore",
        "prepare_variable"
      ]
    ],
    [
      "xarray/backends/memory.py",
      [
        "InMemoryDataStore",
        "prepare_variable"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "NetCDF4DataStore",
        "prepare_variable"
      ]
    ],
    [
      "xarray/backends/scipy_.py",
      [
        "ScipyDataStore",
        "prepare_variable"
      ]
    ]
  ],
  "_get_threaded_lock": [
    [
      "xarray/backends/locks.py",
      [
        "_get_threaded_lock"
      ]
    ]
  ],
  "_get_multiprocessing_lock": [
    [
      "xarray/backends/locks.py",
      [
        "_get_multiprocessing_lock"
      ]
    ]
  ],
  "_get_lock_maker": [
    [
      "xarray/backends/locks.py",
      [
        "_get_lock_maker"
      ]
    ]
  ],
  "_get_scheduler": [
    [
      "xarray/backends/locks.py",
      [
        "_get_scheduler"
      ]
    ]
  ],
  "get_write_lock": [
    [
      "xarray/backends/locks.py",
      [
        "get_write_lock"
      ]
    ]
  ],
  "release": [
    [
      "xarray/backends/locks.py",
      [
        "CombinedLock",
        "release"
      ]
    ],
    [
      "xarray/backends/locks.py",
      [
        "DummyLock",
        "release"
      ]
    ]
  ],
  "locked": [
    [
      "xarray/backends/locks.py",
      [
        "CombinedLock",
        "locked"
      ]
    ],
    [
      "xarray/backends/locks.py",
      [
        "DummyLock",
        "locked"
      ]
    ]
  ],
  "combine_locks": [
    [
      "xarray/backends/locks.py",
      [
        "combine_locks"
      ]
    ]
  ],
  "ensure_lock": [
    [
      "xarray/backends/locks.py",
      [
        "ensure_lock"
      ]
    ]
  ],
  "_enforce_size_limit": [
    [
      "xarray/backends/lru_cache.py",
      [
        "LRUCache",
        "_enforce_size_limit"
      ]
    ]
  ],
  "__setitem__": [
    [
      "xarray/backends/lru_cache.py",
      [
        "LRUCache",
        "__setitem__"
      ]
    ],
    [
      "xarray/backends/netCDF4_.py",
      [
        "BaseNetCDF4Array",
        "__setitem__"
      ]
    ],
    [
      "xarray/backends/scipy_.py",
      [
        "ScipyArrayWrapper",
        "__setitem__"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "Coordinates",
        "__setitem__"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "_LocIndexer",
        "__setitem__"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "__setitem__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__setitem__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "LazilyOuterIndexedArray",
        "__setitem__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "LazilyVectorizedIndexedArray",
        "__setitem__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "CopyOnWriteArray",
        "__setitem__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "MemoryCachedArray",
        "__setitem__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "NumpyIndexingAdapter",
        "__setitem__"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "DaskIndexingAdapter",
        "__setitem__"
      ]
    ],
    [
      "xarray/core/nputils.py",
      [
        "NumpyVIndexAdapter",
        "__setitem__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "SortedKeysDict",
        "__setitem__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "HiddenKeyDict",
        "__setitem__"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "__setitem__"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "__setitem__"
      ]
    ]
  ],
  "__delitem__": [
    [
      "xarray/backends/lru_cache.py",
      [
        "LRUCache",
        "__delitem__"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "DatasetCoordinates",
        "__delitem__"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "DataArrayCoordinates",
        "__delitem__"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "__delitem__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__delitem__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "SortedKeysDict",
        "__delitem__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "HiddenKeyDict",
        "__delitem__"
      ]
    ]
  ],
  "maxsize": [
    [
      "xarray/backends/lru_cache.py",
      [
        "LRUCache",
        "maxsize"
      ]
    ]
  ],
  "maxsize_7": [
    [
      "xarray/backends/lru_cache.py",
      [
        "LRUCache",
        "maxsize_7"
      ]
    ]
  ],
  "_encode_nc4_variable": [
    [
      "xarray/backends/netCDF4_.py",
      [
        "_encode_nc4_variable"
      ]
    ]
  ],
  "_check_encoding_dtype_is_vlen_string": [
    [
      "xarray/backends/netCDF4_.py",
      [
        "_check_encoding_dtype_is_vlen_string"
      ]
    ]
  ],
  "_get_datatype": [
    [
      "xarray/backends/netCDF4_.py",
      [
        "_get_datatype"
      ]
    ]
  ],
  "_nc4_dtype": [
    [
      "xarray/backends/netCDF4_.py",
      [
        "_nc4_dtype"
      ]
    ]
  ],
  "_netcdf4_create_group": [
    [
      "xarray/backends/netCDF4_.py",
      [
        "_netcdf4_create_group"
      ]
    ]
  ],
  "_nc4_require_group": [
    [
      "xarray/backends/netCDF4_.py",
      [
        "_nc4_require_group"
      ]
    ]
  ],
  "_ensure_fill_value_valid": [
    [
      "xarray/backends/netCDF4_.py",
      [
        "_ensure_fill_value_valid"
      ]
    ]
  ],
  "_force_native_endianness": [
    [
      "xarray/backends/netCDF4_.py",
      [
        "_force_native_endianness"
      ]
    ]
  ],
  "_extract_nc4_variable_encoding": [
    [
      "xarray/backends/netCDF4_.py",
      [
        "_extract_nc4_variable_encoding"
      ]
    ]
  ],
  "_is_list_of_strings": [
    [
      "xarray/backends/netCDF4_.py",
      [
        "_is_list_of_strings"
      ]
    ]
  ],
  "coerce_nc3_dtype": [
    [
      "xarray/backends/netcdf3.py",
      [
        "coerce_nc3_dtype"
      ]
    ]
  ],
  "encode_nc3_attr_value": [
    [
      "xarray/backends/netcdf3.py",
      [
        "encode_nc3_attr_value"
      ]
    ]
  ],
  "encode_nc3_attrs": [
    [
      "xarray/backends/netcdf3.py",
      [
        "encode_nc3_attrs"
      ]
    ]
  ],
  "encode_nc3_variable": [
    [
      "xarray/backends/netcdf3.py",
      [
        "encode_nc3_variable"
      ]
    ]
  ],
  "_isalnumMUTF8": [
    [
      "xarray/backends/netcdf3.py",
      [
        "_isalnumMUTF8"
      ]
    ]
  ],
  "is_valid_nc3_name": [
    [
      "xarray/backends/netcdf3.py",
      [
        "is_valid_nc3_name"
      ]
    ]
  ],
  "shape": [
    [
      "xarray/backends/pydap_.py",
      [
        "PydapArrayWrapper",
        "shape"
      ]
    ],
    [
      "xarray/backends/rasterio_.py",
      [
        "RasterioArrayWrapper",
        "shape"
      ]
    ],
    [
      "xarray/coding/strings.py",
      [
        "StackedBytesArray",
        "shape"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "shape"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "_DummyGroup",
        "shape"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "LazilyOuterIndexedArray",
        "shape"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "LazilyVectorizedIndexedArray",
        "shape"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "PandasIndexAdapter",
        "shape"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "NDArrayMixin",
        "shape"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "shape"
      ]
    ]
  ],
  "dtype": [
    [
      "xarray/backends/pydap_.py",
      [
        "PydapArrayWrapper",
        "dtype"
      ]
    ],
    [
      "xarray/backends/rasterio_.py",
      [
        "RasterioArrayWrapper",
        "dtype"
      ]
    ],
    [
      "xarray/coding/strings.py",
      [
        "StackedBytesArray",
        "dtype"
      ]
    ],
    [
      "xarray/coding/variables.py",
      [
        "_ElementwiseFunctionArray",
        "dtype"
      ]
    ],
    [
      "xarray/conventions.py",
      [
        "NativeEndiannessArray",
        "dtype"
      ]
    ],
    [
      "xarray/conventions.py",
      [
        "BoolTypeArray",
        "dtype"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "dtype"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "PandasIndexAdapter",
        "dtype"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "NDArrayMixin",
        "dtype"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "dtype"
      ]
    ],
    [
      "xarray/tests/test_accessor_str.py",
      [
        "dtype"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "dtype"
      ]
    ]
  ],
  "_fix_attributes": [
    [
      "xarray/backends/pydap_.py",
      [
        "_fix_attributes"
      ]
    ]
  ],
  "_get_indexer": [
    [
      "xarray/backends/rasterio_.py",
      [
        "RasterioArrayWrapper",
        "_get_indexer"
      ]
    ]
  ],
  "parsevec": [
    [
      "xarray/backends/rasterio_.py",
      [
        "_parse_envi",
        "parsevec"
      ]
    ]
  ],
  "default": [
    [
      "xarray/backends/rasterio_.py",
      [
        "_parse_envi",
        "default"
      ]
    ]
  ],
  "_parse_envi": [
    [
      "xarray/backends/rasterio_.py",
      [
        "_parse_envi"
      ]
    ]
  ],
  "open_rasterio": [
    [
      "xarray/backends/rasterio_.py",
      [
        "open_rasterio"
      ]
    ]
  ],
  "_decode_string": [
    [
      "xarray/backends/scipy_.py",
      [
        "_decode_string"
      ]
    ]
  ],
  "_decode_attrs": [
    [
      "xarray/backends/scipy_.py",
      [
        "_decode_attrs"
      ]
    ]
  ],
  "get_variable": [
    [
      "xarray/backends/scipy_.py",
      [
        "ScipyArrayWrapper",
        "get_variable"
      ]
    ]
  ],
  "_open_scipy_netcdf": [
    [
      "xarray/backends/scipy_.py",
      [
        "_open_scipy_netcdf"
      ]
    ]
  ],
  "_validate_attr_key": [
    [
      "xarray/backends/scipy_.py",
      [
        "ScipyDataStore",
        "_validate_attr_key"
      ]
    ]
  ],
  "encode_zarr_attr_value": [
    [
      "xarray/backends/zarr.py",
      [
        "encode_zarr_attr_value"
      ]
    ]
  ],
  "_determine_zarr_chunks": [
    [
      "xarray/backends/zarr.py",
      [
        "_determine_zarr_chunks"
      ]
    ]
  ],
  "_get_zarr_dims_and_attrs": [
    [
      "xarray/backends/zarr.py",
      [
        "_get_zarr_dims_and_attrs"
      ]
    ]
  ],
  "extract_zarr_variable_encoding": [
    [
      "xarray/backends/zarr.py",
      [
        "extract_zarr_variable_encoding"
      ]
    ]
  ],
  "encode_zarr_variable": [
    [
      "xarray/backends/zarr.py",
      [
        "encode_zarr_variable"
      ]
    ]
  ],
  "open_group": [
    [
      "xarray/backends/zarr.py",
      [
        "ZarrStore",
        "open_group"
      ]
    ]
  ],
  "get_chunk": [
    [
      "xarray/backends/zarr.py",
      [
        "open_zarr",
        "get_chunk"
      ]
    ]
  ],
  "maybe_chunk": [
    [
      "xarray/backends/zarr.py",
      [
        "open_zarr",
        "maybe_chunk"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "chunk",
        "maybe_chunk"
      ]
    ]
  ],
  "open_zarr": [
    [
      "xarray/backends/zarr.py",
      [
        "open_zarr"
      ]
    ]
  ],
  "get_date_type": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "get_date_type"
      ]
    ],
    [
      "xarray/coding/cftimeindex.py",
      [
        "get_date_type"
      ]
    ]
  ],
  "rule_code": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "BaseCFTimeOffset",
        "rule_code"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "QuarterOffset",
        "rule_code"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "YearOffset",
        "rule_code"
      ]
    ]
  ],
  "__eq__": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "BaseCFTimeOffset",
        "__eq__"
      ]
    ],
    [
      "xarray/core/computation.py",
      [
        "_UFuncSignature",
        "__eq__"
      ]
    ],
    [
      "xarray/core/dtypes.py",
      [
        "AlwaysGreaterThan",
        "__eq__"
      ]
    ],
    [
      "xarray/core/dtypes.py",
      [
        "AlwaysLessThan",
        "__eq__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "ReprObject",
        "__eq__"
      ]
    ]
  ],
  "__ne__": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "BaseCFTimeOffset",
        "__ne__"
      ]
    ],
    [
      "xarray/core/computation.py",
      [
        "_UFuncSignature",
        "__ne__"
      ]
    ]
  ],
  "__add__": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "BaseCFTimeOffset",
        "__add__"
      ]
    ],
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "__add__"
      ]
    ]
  ],
  "__sub__": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "BaseCFTimeOffset",
        "__sub__"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "QuarterOffset",
        "__sub__"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "YearOffset",
        "__sub__"
      ]
    ],
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "__sub__"
      ]
    ]
  ],
  "__mul__": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "BaseCFTimeOffset",
        "__mul__"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "QuarterOffset",
        "__mul__"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "YearOffset",
        "__mul__"
      ]
    ]
  ],
  "__neg__": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "BaseCFTimeOffset",
        "__neg__"
      ]
    ]
  ],
  "__rmul__": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "BaseCFTimeOffset",
        "__rmul__"
      ]
    ]
  ],
  "__radd__": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "BaseCFTimeOffset",
        "__radd__"
      ]
    ],
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "__radd__"
      ]
    ]
  ],
  "__rsub__": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "BaseCFTimeOffset",
        "__rsub__"
      ]
    ],
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "__rsub__"
      ]
    ]
  ],
  "__apply__": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "BaseCFTimeOffset",
        "__apply__"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "MonthBegin",
        "__apply__"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "MonthEnd",
        "__apply__"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "QuarterOffset",
        "__apply__"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "YearOffset",
        "__apply__"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "Day",
        "__apply__"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "Hour",
        "__apply__"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "Minute",
        "__apply__"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "Second",
        "__apply__"
      ]
    ]
  ],
  "onOffset": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "BaseCFTimeOffset",
        "onOffset"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "MonthBegin",
        "onOffset"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "MonthEnd",
        "onOffset"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "QuarterOffset",
        "onOffset"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "YearBegin",
        "onOffset"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "YearEnd",
        "onOffset"
      ]
    ]
  ],
  "rollforward": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "BaseCFTimeOffset",
        "rollforward"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "QuarterBegin",
        "rollforward"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "QuarterEnd",
        "rollforward"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "YearBegin",
        "rollforward"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "YearEnd",
        "rollforward"
      ]
    ]
  ],
  "rollback": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "BaseCFTimeOffset",
        "rollback"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "QuarterBegin",
        "rollback"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "QuarterEnd",
        "rollback"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "YearBegin",
        "rollback"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "YearEnd",
        "rollback"
      ]
    ]
  ],
  "__str__": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "BaseCFTimeOffset",
        "__str__"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "QuarterOffset",
        "__str__"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "YearOffset",
        "__str__"
      ]
    ],
    [
      "xarray/core/computation.py",
      [
        "_UFuncSignature",
        "__str__"
      ]
    ]
  ],
  "_get_offset_day": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "BaseCFTimeOffset",
        "_get_offset_day"
      ]
    ]
  ],
  "_get_day_of_month": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "_get_day_of_month"
      ]
    ]
  ],
  "_days_in_month": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "_days_in_month"
      ]
    ]
  ],
  "_adjust_n_months": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "_adjust_n_months"
      ]
    ]
  ],
  "_adjust_n_years": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "_adjust_n_years"
      ]
    ]
  ],
  "_shift_month": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "_shift_month"
      ]
    ]
  ],
  "roll_qtrday": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "roll_qtrday"
      ]
    ]
  ],
  "_validate_month": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "_validate_month"
      ]
    ]
  ],
  "as_timedelta": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "Day",
        "as_timedelta"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "Hour",
        "as_timedelta"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "Minute",
        "as_timedelta"
      ]
    ],
    [
      "xarray/coding/cftime_offsets.py",
      [
        "Second",
        "as_timedelta"
      ]
    ]
  ],
  "to_offset": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "to_offset"
      ]
    ]
  ],
  "to_cftime_datetime": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "to_cftime_datetime"
      ]
    ]
  ],
  "normalize_date": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "normalize_date"
      ]
    ]
  ],
  "_maybe_normalize_date": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "_maybe_normalize_date"
      ]
    ]
  ],
  "_generate_linear_range": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "_generate_linear_range"
      ]
    ]
  ],
  "_generate_range": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "_generate_range"
      ]
    ]
  ],
  "cftime_range": [
    [
      "xarray/coding/cftime_offsets.py",
      [
        "cftime_range"
      ]
    ]
  ],
  "named": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "named"
      ]
    ]
  ],
  "optional": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "optional"
      ]
    ]
  ],
  "trailing_optional": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "trailing_optional"
      ]
    ]
  ],
  "build_pattern": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "build_pattern"
      ]
    ]
  ],
  "parse_iso8601": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "parse_iso8601"
      ]
    ]
  ],
  "_parse_iso8601_with_reso": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "_parse_iso8601_with_reso"
      ]
    ]
  ],
  "_parsed_string_to_bounds": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "_parsed_string_to_bounds"
      ]
    ]
  ],
  "get_date_field": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "get_date_field"
      ]
    ]
  ],
  "_field_accessor": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "_field_accessor"
      ]
    ]
  ],
  "assert_all_valid_date_type": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "assert_all_valid_date_type"
      ]
    ]
  ],
  "__new__": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "__new__"
      ]
    ],
    [
      "xarray/core/accessor_dt.py",
      [
        "CombinedDatetimelikeAccessor",
        "__new__"
      ]
    ]
  ],
  "_partial_date_slice": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "_partial_date_slice"
      ]
    ]
  ],
  "_get_string_slice": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "_get_string_slice"
      ]
    ]
  ],
  "_get_nearest_indexer": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "_get_nearest_indexer"
      ]
    ]
  ],
  "_filter_indexer_tolerance": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "_filter_indexer_tolerance"
      ]
    ]
  ],
  "get_loc": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "get_loc"
      ]
    ]
  ],
  "_maybe_cast_slice_bound": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "_maybe_cast_slice_bound"
      ]
    ]
  ],
  "get_value": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "get_value"
      ]
    ]
  ],
  "__contains__": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "__contains__"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "Coordinates",
        "__contains__"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "__contains__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "DataVariables",
        "__contains__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__contains__"
      ]
    ],
    [
      "xarray/core/indexes.py",
      [
        "Indexes",
        "__contains__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "Frozen",
        "__contains__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "SortedKeysDict",
        "__contains__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "OrderedSet",
        "__contains__"
      ]
    ]
  ],
  "contains": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "contains"
      ]
    ],
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "contains"
      ]
    ]
  ],
  "shift": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "shift"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "shift"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "shift"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "shift"
      ]
    ]
  ],
  "to_datetimeindex": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "to_datetimeindex"
      ]
    ]
  ],
  "strftime": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "strftime"
      ]
    ],
    [
      "xarray/core/accessor_dt.py",
      [
        "DatetimeAccessor",
        "strftime"
      ]
    ]
  ],
  "asi8": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "asi8"
      ]
    ]
  ],
  "_round_via_method": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "_round_via_method"
      ]
    ]
  ],
  "floor": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "floor"
      ]
    ],
    [
      "xarray/core/accessor_dt.py",
      [
        "Properties",
        "floor"
      ]
    ]
  ],
  "ceil": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "ceil"
      ]
    ],
    [
      "xarray/core/accessor_dt.py",
      [
        "Properties",
        "ceil"
      ]
    ]
  ],
  "round": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "CFTimeIndex",
        "round"
      ]
    ],
    [
      "xarray/core/accessor_dt.py",
      [
        "Properties",
        "round"
      ]
    ]
  ],
  "_parse_iso8601_without_reso": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "_parse_iso8601_without_reso"
      ]
    ]
  ],
  "_parse_array_of_cftime_strings": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "_parse_array_of_cftime_strings"
      ]
    ]
  ],
  "_contains_datetime_timedeltas": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "_contains_datetime_timedeltas"
      ]
    ]
  ],
  "_cftimeindex_from_i8": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "_cftimeindex_from_i8"
      ]
    ]
  ],
  "_total_microseconds": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "_total_microseconds"
      ]
    ]
  ],
  "_floor_int": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "_floor_int"
      ]
    ]
  ],
  "_ceil_int": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "_ceil_int"
      ]
    ]
  ],
  "_round_to_nearest_half_even": [
    [
      "xarray/coding/cftimeindex.py",
      [
        "_round_to_nearest_half_even"
      ]
    ]
  ],
  "infer_freq": [
    [
      "xarray/coding/frequencies.py",
      [
        "infer_freq"
      ]
    ]
  ],
  "get_freq": [
    [
      "xarray/coding/frequencies.py",
      [
        "_CFTimeFrequencyInferer",
        "get_freq"
      ]
    ]
  ],
  "_infer_daily_rule": [
    [
      "xarray/coding/frequencies.py",
      [
        "_CFTimeFrequencyInferer",
        "_infer_daily_rule"
      ]
    ]
  ],
  "_get_annual_rule": [
    [
      "xarray/coding/frequencies.py",
      [
        "_CFTimeFrequencyInferer",
        "_get_annual_rule"
      ]
    ]
  ],
  "_get_quartely_rule": [
    [
      "xarray/coding/frequencies.py",
      [
        "_CFTimeFrequencyInferer",
        "_get_quartely_rule"
      ]
    ]
  ],
  "_get_monthly_rule": [
    [
      "xarray/coding/frequencies.py",
      [
        "_CFTimeFrequencyInferer",
        "_get_monthly_rule"
      ]
    ]
  ],
  "deltas": [
    [
      "xarray/coding/frequencies.py",
      [
        "_CFTimeFrequencyInferer",
        "deltas"
      ]
    ]
  ],
  "year_deltas": [
    [
      "xarray/coding/frequencies.py",
      [
        "_CFTimeFrequencyInferer",
        "year_deltas"
      ]
    ]
  ],
  "month_deltas": [
    [
      "xarray/coding/frequencies.py",
      [
        "_CFTimeFrequencyInferer",
        "month_deltas"
      ]
    ]
  ],
  "_unique_deltas": [
    [
      "xarray/coding/frequencies.py",
      [
        "_unique_deltas"
      ]
    ]
  ],
  "_is_multiple": [
    [
      "xarray/coding/frequencies.py",
      [
        "_is_multiple"
      ]
    ]
  ],
  "_maybe_add_count": [
    [
      "xarray/coding/frequencies.py",
      [
        "_maybe_add_count"
      ]
    ]
  ],
  "month_anchor_check": [
    [
      "xarray/coding/frequencies.py",
      [
        "month_anchor_check"
      ]
    ]
  ],
  "create_vlen_dtype": [
    [
      "xarray/coding/strings.py",
      [
        "create_vlen_dtype"
      ]
    ]
  ],
  "check_vlen_dtype": [
    [
      "xarray/coding/strings.py",
      [
        "check_vlen_dtype"
      ]
    ]
  ],
  "is_unicode_dtype": [
    [
      "xarray/coding/strings.py",
      [
        "is_unicode_dtype"
      ]
    ]
  ],
  "is_bytes_dtype": [
    [
      "xarray/coding/strings.py",
      [
        "is_bytes_dtype"
      ]
    ]
  ],
  "decode": [
    [
      "xarray/coding/strings.py",
      [
        "EncodedStringCoder",
        "decode"
      ]
    ],
    [
      "xarray/coding/strings.py",
      [
        "CharacterArrayCoder",
        "decode"
      ]
    ],
    [
      "xarray/coding/times.py",
      [
        "CFDatetimeCoder",
        "decode"
      ]
    ],
    [
      "xarray/coding/times.py",
      [
        "CFTimedeltaCoder",
        "decode"
      ]
    ],
    [
      "xarray/coding/variables.py",
      [
        "VariableCoder",
        "decode"
      ]
    ],
    [
      "xarray/coding/variables.py",
      [
        "CFMaskCoder",
        "decode"
      ]
    ],
    [
      "xarray/coding/variables.py",
      [
        "CFScaleOffsetCoder",
        "decode"
      ]
    ],
    [
      "xarray/coding/variables.py",
      [
        "UnsignedIntegerCoder",
        "decode"
      ]
    ],
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "decode"
      ]
    ]
  ],
  "decode_bytes_array": [
    [
      "xarray/coding/strings.py",
      [
        "decode_bytes_array"
      ]
    ]
  ],
  "encode_string_array": [
    [
      "xarray/coding/strings.py",
      [
        "encode_string_array"
      ]
    ]
  ],
  "ensure_fixed_length_bytes": [
    [
      "xarray/coding/strings.py",
      [
        "ensure_fixed_length_bytes"
      ]
    ]
  ],
  "bytes_to_char": [
    [
      "xarray/coding/strings.py",
      [
        "bytes_to_char"
      ]
    ]
  ],
  "_numpy_bytes_to_char": [
    [
      "xarray/coding/strings.py",
      [
        "_numpy_bytes_to_char"
      ]
    ]
  ],
  "char_to_bytes": [
    [
      "xarray/coding/strings.py",
      [
        "char_to_bytes"
      ]
    ]
  ],
  "_numpy_char_to_bytes": [
    [
      "xarray/coding/strings.py",
      [
        "_numpy_char_to_bytes"
      ]
    ]
  ],
  "_netcdf_to_numpy_timeunit": [
    [
      "xarray/coding/times.py",
      [
        "_netcdf_to_numpy_timeunit"
      ]
    ]
  ],
  "_unpack_netcdf_time_units": [
    [
      "xarray/coding/times.py",
      [
        "_unpack_netcdf_time_units"
      ]
    ]
  ],
  "_decode_cf_datetime_dtype": [
    [
      "xarray/coding/times.py",
      [
        "_decode_cf_datetime_dtype"
      ]
    ]
  ],
  "_decode_datetime_with_cftime": [
    [
      "xarray/coding/times.py",
      [
        "_decode_datetime_with_cftime"
      ]
    ]
  ],
  "_decode_datetime_with_pandas": [
    [
      "xarray/coding/times.py",
      [
        "_decode_datetime_with_pandas"
      ]
    ]
  ],
  "decode_cf_datetime": [
    [
      "xarray/coding/times.py",
      [
        "decode_cf_datetime"
      ]
    ]
  ],
  "to_timedelta_unboxed": [
    [
      "xarray/coding/times.py",
      [
        "to_timedelta_unboxed"
      ]
    ]
  ],
  "to_datetime_unboxed": [
    [
      "xarray/coding/times.py",
      [
        "to_datetime_unboxed"
      ]
    ]
  ],
  "decode_cf_timedelta": [
    [
      "xarray/coding/times.py",
      [
        "decode_cf_timedelta"
      ]
    ]
  ],
  "_infer_time_units_from_diff": [
    [
      "xarray/coding/times.py",
      [
        "_infer_time_units_from_diff"
      ]
    ]
  ],
  "infer_calendar_name": [
    [
      "xarray/coding/times.py",
      [
        "infer_calendar_name"
      ]
    ]
  ],
  "infer_datetime_units": [
    [
      "xarray/coding/times.py",
      [
        "infer_datetime_units"
      ]
    ]
  ],
  "format_cftime_datetime": [
    [
      "xarray/coding/times.py",
      [
        "format_cftime_datetime"
      ]
    ]
  ],
  "infer_timedelta_units": [
    [
      "xarray/coding/times.py",
      [
        "infer_timedelta_units"
      ]
    ]
  ],
  "cftime_to_nptime": [
    [
      "xarray/coding/times.py",
      [
        "cftime_to_nptime"
      ]
    ]
  ],
  "_cleanup_netcdf_time_units": [
    [
      "xarray/coding/times.py",
      [
        "_cleanup_netcdf_time_units"
      ]
    ]
  ],
  "_encode_datetime_with_cftime": [
    [
      "xarray/coding/times.py",
      [
        "_encode_datetime_with_cftime"
      ]
    ]
  ],
  "cast_to_int_if_safe": [
    [
      "xarray/coding/times.py",
      [
        "cast_to_int_if_safe"
      ]
    ]
  ],
  "encode_cf_datetime": [
    [
      "xarray/coding/times.py",
      [
        "encode_cf_datetime"
      ]
    ]
  ],
  "encode_cf_timedelta": [
    [
      "xarray/coding/times.py",
      [
        "encode_cf_timedelta"
      ]
    ]
  ],
  "lazy_elemwise_func": [
    [
      "xarray/coding/variables.py",
      [
        "lazy_elemwise_func"
      ]
    ]
  ],
  "unpack_for_encoding": [
    [
      "xarray/coding/variables.py",
      [
        "unpack_for_encoding"
      ]
    ]
  ],
  "unpack_for_decoding": [
    [
      "xarray/coding/variables.py",
      [
        "unpack_for_decoding"
      ]
    ]
  ],
  "safe_setitem": [
    [
      "xarray/coding/variables.py",
      [
        "safe_setitem"
      ]
    ]
  ],
  "pop_to": [
    [
      "xarray/coding/variables.py",
      [
        "pop_to"
      ]
    ]
  ],
  "_apply_mask": [
    [
      "xarray/coding/variables.py",
      [
        "_apply_mask"
      ]
    ]
  ],
  "_scale_offset_decoding": [
    [
      "xarray/coding/variables.py",
      [
        "_scale_offset_decoding"
      ]
    ]
  ],
  "_choose_float_dtype": [
    [
      "xarray/coding/variables.py",
      [
        "_choose_float_dtype"
      ]
    ]
  ],
  "_var_as_tuple": [
    [
      "xarray/conventions.py",
      [
        "_var_as_tuple"
      ]
    ]
  ],
  "maybe_encode_nonstring_dtype": [
    [
      "xarray/conventions.py",
      [
        "maybe_encode_nonstring_dtype"
      ]
    ]
  ],
  "maybe_default_fill_value": [
    [
      "xarray/conventions.py",
      [
        "maybe_default_fill_value"
      ]
    ]
  ],
  "maybe_encode_bools": [
    [
      "xarray/conventions.py",
      [
        "maybe_encode_bools"
      ]
    ]
  ],
  "_infer_dtype": [
    [
      "xarray/conventions.py",
      [
        "_infer_dtype"
      ]
    ]
  ],
  "ensure_not_multiindex": [
    [
      "xarray/conventions.py",
      [
        "ensure_not_multiindex"
      ]
    ]
  ],
  "_copy_with_dtype": [
    [
      "xarray/conventions.py",
      [
        "_copy_with_dtype"
      ]
    ]
  ],
  "ensure_dtype_not_object": [
    [
      "xarray/conventions.py",
      [
        "ensure_dtype_not_object"
      ]
    ]
  ],
  "encode_cf_variable": [
    [
      "xarray/conventions.py",
      [
        "encode_cf_variable"
      ]
    ]
  ],
  "decode_cf_variable": [
    [
      "xarray/conventions.py",
      [
        "decode_cf_variable"
      ]
    ]
  ],
  "_update_bounds_attributes": [
    [
      "xarray/conventions.py",
      [
        "_update_bounds_attributes"
      ]
    ]
  ],
  "_update_bounds_encoding": [
    [
      "xarray/conventions.py",
      [
        "_update_bounds_encoding"
      ]
    ]
  ],
  "stackable": [
    [
      "xarray/conventions.py",
      [
        "decode_cf_variables",
        "stackable"
      ]
    ]
  ],
  "decode_cf_variables": [
    [
      "xarray/conventions.py",
      [
        "decode_cf_variables"
      ]
    ]
  ],
  "decode_cf": [
    [
      "xarray/conventions.py",
      [
        "decode_cf"
      ]
    ]
  ],
  "cf_decoder": [
    [
      "xarray/conventions.py",
      [
        "cf_decoder"
      ]
    ]
  ],
  "_encode_coordinates": [
    [
      "xarray/conventions.py",
      [
        "_encode_coordinates"
      ]
    ]
  ],
  "encode_dataset_coordinates": [
    [
      "xarray/conventions.py",
      [
        "encode_dataset_coordinates"
      ]
    ]
  ],
  "cf_encoder": [
    [
      "xarray/conventions.py",
      [
        "cf_encoder"
      ]
    ]
  ],
  "_filter_attrs": [
    [
      "xarray/convert.py",
      [
        "_filter_attrs"
      ]
    ]
  ],
  "from_cdms2": [
    [
      "xarray/convert.py",
      [
        "from_cdms2"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "from_cdms2"
      ]
    ]
  ],
  "set_cdms2_attrs": [
    [
      "xarray/convert.py",
      [
        "to_cdms2",
        "set_cdms2_attrs"
      ]
    ]
  ],
  "to_cdms2": [
    [
      "xarray/convert.py",
      [
        "to_cdms2"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "to_cdms2"
      ]
    ]
  ],
  "_pick_attrs": [
    [
      "xarray/convert.py",
      [
        "_pick_attrs"
      ]
    ]
  ],
  "_get_iris_args": [
    [
      "xarray/convert.py",
      [
        "_get_iris_args"
      ]
    ]
  ],
  "to_iris": [
    [
      "xarray/convert.py",
      [
        "to_iris"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "to_iris"
      ]
    ]
  ],
  "_iris_obj_to_attrs": [
    [
      "xarray/convert.py",
      [
        "_iris_obj_to_attrs"
      ]
    ]
  ],
  "_iris_cell_methods_to_str": [
    [
      "xarray/convert.py",
      [
        "_iris_cell_methods_to_str"
      ]
    ]
  ],
  "_name": [
    [
      "xarray/convert.py",
      [
        "_name"
      ]
    ]
  ],
  "from_iris": [
    [
      "xarray/convert.py",
      [
        "from_iris"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "from_iris"
      ]
    ]
  ],
  "_season_from_months": [
    [
      "xarray/core/accessor_dt.py",
      [
        "_season_from_months"
      ]
    ]
  ],
  "_access_through_cftimeindex": [
    [
      "xarray/core/accessor_dt.py",
      [
        "_access_through_cftimeindex"
      ]
    ]
  ],
  "_access_through_series": [
    [
      "xarray/core/accessor_dt.py",
      [
        "_access_through_series"
      ]
    ]
  ],
  "_get_date_field": [
    [
      "xarray/core/accessor_dt.py",
      [
        "_get_date_field"
      ]
    ]
  ],
  "_round_through_series_or_index": [
    [
      "xarray/core/accessor_dt.py",
      [
        "_round_through_series_or_index"
      ]
    ]
  ],
  "_round_field": [
    [
      "xarray/core/accessor_dt.py",
      [
        "_round_field"
      ]
    ]
  ],
  "_strftime_through_cftimeindex": [
    [
      "xarray/core/accessor_dt.py",
      [
        "_strftime_through_cftimeindex"
      ]
    ]
  ],
  "_strftime_through_series": [
    [
      "xarray/core/accessor_dt.py",
      [
        "_strftime_through_series"
      ]
    ]
  ],
  "_strftime": [
    [
      "xarray/core/accessor_dt.py",
      [
        "_strftime"
      ]
    ]
  ],
  "_tslib_field_accessor": [
    [
      "xarray/core/accessor_dt.py",
      [
        "Properties",
        "_tslib_field_accessor"
      ]
    ]
  ],
  "_tslib_round_accessor": [
    [
      "xarray/core/accessor_dt.py",
      [
        "Properties",
        "_tslib_round_accessor"
      ]
    ]
  ],
  "_is_str_like": [
    [
      "xarray/core/accessor_str.py",
      [
        "_is_str_like"
      ]
    ]
  ],
  "_apply": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "_apply"
      ]
    ]
  ],
  "len": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "len"
      ]
    ]
  ],
  "get": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "get"
      ]
    ]
  ],
  "slice": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "slice"
      ]
    ]
  ],
  "f": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "slice_replace",
        "f"
      ]
    ],
    [
      "xarray/core/duck_array_ops.py",
      [
        "_create_nan_agg_method",
        "f"
      ]
    ]
  ],
  "slice_replace": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "slice_replace"
      ]
    ]
  ],
  "capitalize": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "capitalize"
      ]
    ]
  ],
  "lower": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "lower"
      ]
    ]
  ],
  "swapcase": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "swapcase"
      ]
    ]
  ],
  "title": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "title"
      ]
    ]
  ],
  "upper": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "upper"
      ]
    ]
  ],
  "isalnum": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "isalnum"
      ]
    ]
  ],
  "isalpha": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "isalpha"
      ]
    ]
  ],
  "isdecimal": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "isdecimal"
      ]
    ]
  ],
  "isdigit": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "isdigit"
      ]
    ]
  ],
  "islower": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "islower"
      ]
    ]
  ],
  "isnumeric": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "isnumeric"
      ]
    ]
  ],
  "isspace": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "isspace"
      ]
    ]
  ],
  "istitle": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "istitle"
      ]
    ]
  ],
  "isupper": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "isupper"
      ]
    ]
  ],
  "count": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "count"
      ]
    ],
    [
      "xarray/core/duck_array_ops.py",
      [
        "count"
      ]
    ],
    [
      "xarray/core/rolling.py",
      [
        "Rolling",
        "count"
      ]
    ]
  ],
  "startswith": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "startswith"
      ]
    ]
  ],
  "endswith": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "endswith"
      ]
    ]
  ],
  "pad": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "pad"
      ]
    ],
    [
      "xarray/core/dask_array_compat.py",
      [
        "pad"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "pad"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "pad"
      ]
    ],
    [
      "xarray/core/resample.py",
      [
        "Resample",
        "pad"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "pad"
      ]
    ]
  ],
  "ljust": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "ljust"
      ]
    ]
  ],
  "rjust": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "rjust"
      ]
    ]
  ],
  "zfill": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "zfill"
      ]
    ]
  ],
  "match": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "match"
      ]
    ]
  ],
  "strip": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "strip"
      ]
    ]
  ],
  "lstrip": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "lstrip"
      ]
    ]
  ],
  "rstrip": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "rstrip"
      ]
    ]
  ],
  "wrap": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "wrap"
      ]
    ]
  ],
  "translate": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "translate"
      ]
    ]
  ],
  "repeat": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "repeat"
      ]
    ]
  ],
  "find": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "find"
      ]
    ]
  ],
  "rfind": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "rfind"
      ]
    ]
  ],
  "index": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "index"
      ]
    ],
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "index"
      ]
    ]
  ],
  "rindex": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "rindex"
      ]
    ]
  ],
  "replace": [
    [
      "xarray/core/accessor_str.py",
      [
        "StringAccessor",
        "replace"
      ]
    ]
  ],
  "_get_joiner": [
    [
      "xarray/core/alignment.py",
      [
        "_get_joiner"
      ]
    ]
  ],
  "_override_indexes": [
    [
      "xarray/core/alignment.py",
      [
        "_override_indexes"
      ]
    ]
  ],
  "align": [
    [
      "xarray/core/alignment.py",
      [
        "align"
      ]
    ]
  ],
  "is_alignable": [
    [
      "xarray/core/alignment.py",
      [
        "deep_align",
        "is_alignable"
      ]
    ]
  ],
  "deep_align": [
    [
      "xarray/core/alignment.py",
      [
        "deep_align"
      ]
    ]
  ],
  "reindex_like_indexers": [
    [
      "xarray/core/alignment.py",
      [
        "reindex_like_indexers"
      ]
    ]
  ],
  "reindex_variables": [
    [
      "xarray/core/alignment.py",
      [
        "reindex_variables"
      ]
    ]
  ],
  "_get_broadcast_dims_map_common_coords": [
    [
      "xarray/core/alignment.py",
      [
        "_get_broadcast_dims_map_common_coords"
      ]
    ]
  ],
  "_set_dims": [
    [
      "xarray/core/alignment.py",
      [
        "_broadcast_helper",
        "_set_dims"
      ]
    ]
  ],
  "_broadcast_array": [
    [
      "xarray/core/alignment.py",
      [
        "_broadcast_helper",
        "_broadcast_array"
      ]
    ]
  ],
  "_broadcast_dataset": [
    [
      "xarray/core/alignment.py",
      [
        "_broadcast_helper",
        "_broadcast_dataset"
      ]
    ]
  ],
  "_broadcast_helper": [
    [
      "xarray/core/alignment.py",
      [
        "_broadcast_helper"
      ]
    ]
  ],
  "broadcast": [
    [
      "xarray/core/alignment.py",
      [
        "broadcast"
      ]
    ]
  ],
  "__array_ufunc__": [
    [
      "xarray/core/arithmetic.py",
      [
        "SupportsArithmetic",
        "__array_ufunc__"
      ]
    ]
  ],
  "_infer_concat_order_from_positions": [
    [
      "xarray/core/combine.py",
      [
        "_infer_concat_order_from_positions"
      ]
    ]
  ],
  "_infer_tile_ids_from_nested_list": [
    [
      "xarray/core/combine.py",
      [
        "_infer_tile_ids_from_nested_list"
      ]
    ]
  ],
  "_infer_concat_order_from_coords": [
    [
      "xarray/core/combine.py",
      [
        "_infer_concat_order_from_coords"
      ]
    ]
  ],
  "_check_dimension_depth_tile_ids": [
    [
      "xarray/core/combine.py",
      [
        "_check_dimension_depth_tile_ids"
      ]
    ]
  ],
  "_check_shape_tile_ids": [
    [
      "xarray/core/combine.py",
      [
        "_check_shape_tile_ids"
      ]
    ]
  ],
  "_combine_nd": [
    [
      "xarray/core/combine.py",
      [
        "_combine_nd"
      ]
    ]
  ],
  "_combine_all_along_first_dim": [
    [
      "xarray/core/combine.py",
      [
        "_combine_all_along_first_dim"
      ]
    ]
  ],
  "_combine_1d": [
    [
      "xarray/core/combine.py",
      [
        "_combine_1d"
      ]
    ]
  ],
  "_new_tile_id": [
    [
      "xarray/core/combine.py",
      [
        "_new_tile_id"
      ]
    ]
  ],
  "_nested_combine": [
    [
      "xarray/core/combine.py",
      [
        "_nested_combine"
      ]
    ]
  ],
  "combine_nested": [
    [
      "xarray/core/combine.py",
      [
        "combine_nested"
      ]
    ]
  ],
  "vars_as_keys": [
    [
      "xarray/core/combine.py",
      [
        "vars_as_keys"
      ]
    ]
  ],
  "combine_by_coords": [
    [
      "xarray/core/combine.py",
      [
        "combine_by_coords"
      ]
    ]
  ],
  "_reduce_method": [
    [
      "xarray/core/common.py",
      [
        "ImplementsArrayReduce",
        "_reduce_method"
      ]
    ],
    [
      "xarray/core/common.py",
      [
        "ImplementsDatasetReduce",
        "_reduce_method"
      ]
    ],
    [
      "xarray/core/rolling.py",
      [
        "Rolling",
        "_reduce_method"
      ]
    ],
    [
      "xarray/core/rolling.py",
      [
        "DataArrayCoarsen",
        "_reduce_method"
      ]
    ],
    [
      "xarray/core/rolling.py",
      [
        "DatasetCoarsen",
        "_reduce_method"
      ]
    ]
  ],
  "__bool__": [
    [
      "xarray/core/common.py",
      [
        "AbstractArray",
        "__bool__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__bool__"
      ]
    ]
  ],
  "__float__": [
    [
      "xarray/core/common.py",
      [
        "AbstractArray",
        "__float__"
      ]
    ]
  ],
  "__int__": [
    [
      "xarray/core/common.py",
      [
        "AbstractArray",
        "__int__"
      ]
    ]
  ],
  "__complex__": [
    [
      "xarray/core/common.py",
      [
        "AbstractArray",
        "__complex__"
      ]
    ]
  ],
  "_repr_html_": [
    [
      "xarray/core/common.py",
      [
        "AbstractArray",
        "_repr_html_"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_repr_html_"
      ]
    ]
  ],
  "_iter": [
    [
      "xarray/core/common.py",
      [
        "AbstractArray",
        "_iter"
      ]
    ]
  ],
  "get_axis_num": [
    [
      "xarray/core/common.py",
      [
        "AbstractArray",
        "get_axis_num"
      ]
    ]
  ],
  "_get_axis_num": [
    [
      "xarray/core/common.py",
      [
        "AbstractArray",
        "_get_axis_num"
      ]
    ]
  ],
  "sizes": [
    [
      "xarray/core/common.py",
      [
        "AbstractArray",
        "sizes"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "sizes"
      ]
    ]
  ],
  "__init_subclass__": [
    [
      "xarray/core/common.py",
      [
        "AttrAccessMixin",
        "__init_subclass__"
      ]
    ]
  ],
  "_attr_sources": [
    [
      "xarray/core/common.py",
      [
        "AttrAccessMixin",
        "_attr_sources"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_attr_sources"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_attr_sources"
      ]
    ]
  ],
  "_item_sources": [
    [
      "xarray/core/common.py",
      [
        "AttrAccessMixin",
        "_item_sources"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_item_sources"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_item_sources"
      ]
    ]
  ],
  "__getattr__": [
    [
      "xarray/core/common.py",
      [
        "AttrAccessMixin",
        "__getattr__"
      ]
    ]
  ],
  "_setattr_dict": [
    [
      "xarray/core/common.py",
      [
        "AttrAccessMixin",
        "_setattr_dict"
      ]
    ]
  ],
  "__setattr__": [
    [
      "xarray/core/common.py",
      [
        "AttrAccessMixin",
        "__setattr__"
      ]
    ]
  ],
  "__dir__": [
    [
      "xarray/core/common.py",
      [
        "AttrAccessMixin",
        "__dir__"
      ]
    ]
  ],
  "_ipython_key_completions_": [
    [
      "xarray/core/common.py",
      [
        "AttrAccessMixin",
        "_ipython_key_completions_"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "DatasetCoordinates",
        "_ipython_key_completions_"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "DataArrayCoordinates",
        "_ipython_key_completions_"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "DataVariables",
        "_ipython_key_completions_"
      ]
    ]
  ],
  "get_squeeze_dims": [
    [
      "xarray/core/common.py",
      [
        "get_squeeze_dims"
      ]
    ]
  ],
  "squeeze": [
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "squeeze"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "squeeze"
      ]
    ]
  ],
  "get_index": [
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "get_index"
      ]
    ]
  ],
  "_calc_assign_results": [
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "_calc_assign_results"
      ]
    ]
  ],
  "assign_coords": [
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "assign_coords"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "assign_coords"
      ]
    ]
  ],
  "assign_attrs": [
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "assign_attrs"
      ]
    ]
  ],
  "pipe": [
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "pipe"
      ]
    ]
  ],
  "groupby": [
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "groupby"
      ]
    ]
  ],
  "groupby_bins": [
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "groupby_bins"
      ]
    ]
  ],
  "weighted": [
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "weighted"
      ]
    ]
  ],
  "rolling": [
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "rolling"
      ]
    ]
  ],
  "rolling_exp": [
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "rolling_exp"
      ]
    ]
  ],
  "coarsen": [
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "coarsen"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "coarsen"
      ]
    ]
  ],
  "resample": [
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "resample"
      ]
    ]
  ],
  "where": [
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "where"
      ]
    ],
    [
      "xarray/core/computation.py",
      [
        "where"
      ]
    ],
    [
      "xarray/core/duck_array_ops.py",
      [
        "where"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "where"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "where"
      ]
    ]
  ],
  "isin": [
    [
      "xarray/core/common.py",
      [
        "DataWithCoords",
        "isin"
      ]
    ]
  ],
  "full_like": [
    [
      "xarray/core/common.py",
      [
        "full_like"
      ]
    ]
  ],
  "_full_like_variable": [
    [
      "xarray/core/common.py",
      [
        "_full_like_variable"
      ]
    ]
  ],
  "zeros_like": [
    [
      "xarray/core/common.py",
      [
        "zeros_like"
      ]
    ]
  ],
  "ones_like": [
    [
      "xarray/core/common.py",
      [
        "ones_like"
      ]
    ]
  ],
  "is_np_datetime_like": [
    [
      "xarray/core/common.py",
      [
        "is_np_datetime_like"
      ]
    ]
  ],
  "is_np_timedelta_like": [
    [
      "xarray/core/common.py",
      [
        "is_np_timedelta_like"
      ]
    ]
  ],
  "_contains_cftime_datetimes": [
    [
      "xarray/core/common.py",
      [
        "_contains_cftime_datetimes"
      ]
    ]
  ],
  "contains_cftime_datetimes": [
    [
      "xarray/core/common.py",
      [
        "contains_cftime_datetimes"
      ]
    ]
  ],
  "_contains_datetime_like_objects": [
    [
      "xarray/core/common.py",
      [
        "_contains_datetime_like_objects"
      ]
    ]
  ],
  "all_input_core_dims": [
    [
      "xarray/core/computation.py",
      [
        "_UFuncSignature",
        "all_input_core_dims"
      ]
    ]
  ],
  "all_output_core_dims": [
    [
      "xarray/core/computation.py",
      [
        "_UFuncSignature",
        "all_output_core_dims"
      ]
    ]
  ],
  "all_core_dims": [
    [
      "xarray/core/computation.py",
      [
        "_UFuncSignature",
        "all_core_dims"
      ]
    ]
  ],
  "num_inputs": [
    [
      "xarray/core/computation.py",
      [
        "_UFuncSignature",
        "num_inputs"
      ]
    ]
  ],
  "num_outputs": [
    [
      "xarray/core/computation.py",
      [
        "_UFuncSignature",
        "num_outputs"
      ]
    ]
  ],
  "to_gufunc_string": [
    [
      "xarray/core/computation.py",
      [
        "_UFuncSignature",
        "to_gufunc_string"
      ]
    ]
  ],
  "result_name": [
    [
      "xarray/core/computation.py",
      [
        "result_name"
      ]
    ]
  ],
  "_get_coords_list": [
    [
      "xarray/core/computation.py",
      [
        "_get_coords_list"
      ]
    ]
  ],
  "build_output_coords": [
    [
      "xarray/core/computation.py",
      [
        "build_output_coords"
      ]
    ]
  ],
  "apply_dataarray_vfunc": [
    [
      "xarray/core/computation.py",
      [
        "apply_dataarray_vfunc"
      ]
    ]
  ],
  "ordered_set_union": [
    [
      "xarray/core/computation.py",
      [
        "ordered_set_union"
      ]
    ]
  ],
  "ordered_set_intersection": [
    [
      "xarray/core/computation.py",
      [
        "ordered_set_intersection"
      ]
    ]
  ],
  "assert_and_return_exact_match": [
    [
      "xarray/core/computation.py",
      [
        "assert_and_return_exact_match"
      ]
    ]
  ],
  "join_dict_keys": [
    [
      "xarray/core/computation.py",
      [
        "join_dict_keys"
      ]
    ]
  ],
  "collect_dict_values": [
    [
      "xarray/core/computation.py",
      [
        "collect_dict_values"
      ]
    ]
  ],
  "_as_variables_or_variable": [
    [
      "xarray/core/computation.py",
      [
        "_as_variables_or_variable"
      ]
    ]
  ],
  "_unpack_dict_tuples": [
    [
      "xarray/core/computation.py",
      [
        "_unpack_dict_tuples"
      ]
    ]
  ],
  "apply_dict_of_variables_vfunc": [
    [
      "xarray/core/computation.py",
      [
        "apply_dict_of_variables_vfunc"
      ]
    ]
  ],
  "_fast_dataset": [
    [
      "xarray/core/computation.py",
      [
        "_fast_dataset"
      ]
    ]
  ],
  "apply_dataset_vfunc": [
    [
      "xarray/core/computation.py",
      [
        "apply_dataset_vfunc"
      ]
    ]
  ],
  "_iter_over_selections": [
    [
      "xarray/core/computation.py",
      [
        "_iter_over_selections"
      ]
    ]
  ],
  "apply_groupby_func": [
    [
      "xarray/core/computation.py",
      [
        "apply_groupby_func"
      ]
    ]
  ],
  "unified_dim_sizes": [
    [
      "xarray/core/computation.py",
      [
        "unified_dim_sizes"
      ]
    ]
  ],
  "broadcast_compat_data": [
    [
      "xarray/core/computation.py",
      [
        "broadcast_compat_data"
      ]
    ]
  ],
  "apply_variable_ufunc": [
    [
      "xarray/core/computation.py",
      [
        "apply_variable_ufunc"
      ]
    ]
  ],
  "_apply_blockwise": [
    [
      "xarray/core/computation.py",
      [
        "_apply_blockwise"
      ]
    ]
  ],
  "apply_array_ufunc": [
    [
      "xarray/core/computation.py",
      [
        "apply_array_ufunc"
      ]
    ]
  ],
  "apply_ufunc": [
    [
      "xarray/core/computation.py",
      [
        "apply_ufunc"
      ]
    ]
  ],
  "cov": [
    [
      "xarray/core/computation.py",
      [
        "cov"
      ]
    ]
  ],
  "corr": [
    [
      "xarray/core/computation.py",
      [
        "corr"
      ]
    ]
  ],
  "_cov_corr": [
    [
      "xarray/core/computation.py",
      [
        "_cov_corr"
      ]
    ]
  ],
  "dot": [
    [
      "xarray/core/computation.py",
      [
        "dot"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "dot"
      ]
    ]
  ],
  "polyval": [
    [
      "xarray/core/computation.py",
      [
        "polyval"
      ]
    ]
  ],
  "_calc_idxminmax": [
    [
      "xarray/core/computation.py",
      [
        "_calc_idxminmax"
      ]
    ]
  ],
  "concat": [
    [
      "xarray/core/concat.py",
      [
        "concat"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "concat"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "concat"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "concat"
      ]
    ]
  ],
  "_calc_concat_dim_coord": [
    [
      "xarray/core/concat.py",
      [
        "_calc_concat_dim_coord"
      ]
    ]
  ],
  "process_subset_opt": [
    [
      "xarray/core/concat.py",
      [
        "_calc_concat_over",
        "process_subset_opt"
      ]
    ]
  ],
  "_calc_concat_over": [
    [
      "xarray/core/concat.py",
      [
        "_calc_concat_over"
      ]
    ]
  ],
  "_parse_datasets": [
    [
      "xarray/core/concat.py",
      [
        "_parse_datasets"
      ]
    ]
  ],
  "ensure_common_dims": [
    [
      "xarray/core/concat.py",
      [
        "_dataset_concat",
        "ensure_common_dims"
      ]
    ]
  ],
  "_dataset_concat": [
    [
      "xarray/core/concat.py",
      [
        "_dataset_concat"
      ]
    ]
  ],
  "_dataarray_concat": [
    [
      "xarray/core/concat.py",
      [
        "_dataarray_concat"
      ]
    ]
  ],
  "_names": [
    [
      "xarray/core/coordinates.py",
      [
        "Coordinates",
        "_names"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "DatasetCoordinates",
        "_names"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "DataArrayCoordinates",
        "_names"
      ]
    ]
  ],
  "dims": [
    [
      "xarray/core/coordinates.py",
      [
        "Coordinates",
        "dims"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "DatasetCoordinates",
        "dims"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "DataArrayCoordinates",
        "dims"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "dims"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "dims"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "_DummyGroup",
        "dims"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "dims"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "dims"
      ]
    ]
  ],
  "indexes": [
    [
      "xarray/core/coordinates.py",
      [
        "Coordinates",
        "indexes"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "indexes"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "indexes"
      ]
    ]
  ],
  "_update_coords": [
    [
      "xarray/core/coordinates.py",
      [
        "Coordinates",
        "_update_coords"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "DatasetCoordinates",
        "_update_coords"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "DataArrayCoordinates",
        "_update_coords"
      ]
    ]
  ],
  "to_dataset": [
    [
      "xarray/core/coordinates.py",
      [
        "Coordinates",
        "to_dataset"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "DatasetCoordinates",
        "to_dataset"
      ]
    ],
    [
      "xarray/core/coordinates.py",
      [
        "DataArrayCoordinates",
        "to_dataset"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "to_dataset"
      ]
    ]
  ],
  "to_index": [
    [
      "xarray/core/coordinates.py",
      [
        "Coordinates",
        "to_index"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "to_index"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "to_index"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "to_index"
      ]
    ]
  ],
  "update": [
    [
      "xarray/core/coordinates.py",
      [
        "Coordinates",
        "update"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "update"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "OrderedSet",
        "update"
      ]
    ]
  ],
  "_merge_raw": [
    [
      "xarray/core/coordinates.py",
      [
        "Coordinates",
        "_merge_raw"
      ]
    ]
  ],
  "_merge_inplace": [
    [
      "xarray/core/coordinates.py",
      [
        "Coordinates",
        "_merge_inplace"
      ]
    ]
  ],
  "merge": [
    [
      "xarray/core/coordinates.py",
      [
        "Coordinates",
        "merge"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "merge"
      ]
    ],
    [
      "xarray/core/merge.py",
      [
        "merge"
      ]
    ]
  ],
  "assert_coordinate_consistent": [
    [
      "xarray/core/coordinates.py",
      [
        "assert_coordinate_consistent"
      ]
    ]
  ],
  "remap_label_indexers": [
    [
      "xarray/core/coordinates.py",
      [
        "remap_label_indexers"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "remap_label_indexers"
      ]
    ]
  ],
  "meta_from_array": [
    [
      "xarray/core/dask_array_compat.py",
      [
        "if_LooseVersion_dask_vers",
        "else_",
        "meta_from_array"
      ]
    ]
  ],
  "_validate_pad_output_shape": [
    [
      "xarray/core/dask_array_compat.py",
      [
        "_validate_pad_output_shape"
      ]
    ]
  ],
  "median": [
    [
      "xarray/core/dask_array_compat.py",
      [
        "None_1",
        "else_",
        "median"
      ]
    ]
  ],
  "nanmedian": [
    [
      "xarray/core/dask_array_compat.py",
      [
        "None_2",
        "else_",
        "nanmedian"
      ]
    ],
    [
      "xarray/core/nanops.py",
      [
        "nanmedian"
      ]
    ]
  ],
  "dask_rolling_wrapper": [
    [
      "xarray/core/dask_array_ops.py",
      [
        "dask_rolling_wrapper"
      ]
    ]
  ],
  "func": [
    [
      "xarray/core/dask_array_ops.py",
      [
        "rolling_window",
        "func"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_binary_op",
        "func"
      ]
    ],
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_inplace_binary_op",
        "func"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_inplace_binary_op",
        "func"
      ]
    ],
    [
      "xarray/tests/test_interp.py",
      [
        "test_interpolate_1d",
        "func"
      ]
    ],
    [
      "xarray/tests/test_interp.py",
      [
        "test_interpolate_vectorize",
        "func"
      ]
    ],
    [
      "xarray/tests/test_interp.py",
      [
        "test_interpolate_scalar",
        "func"
      ]
    ]
  ],
  "rolling_window": [
    [
      "xarray/core/dask_array_ops.py",
      [
        "rolling_window"
      ]
    ],
    [
      "xarray/core/duck_array_ops.py",
      [
        "rolling_window"
      ]
    ],
    [
      "xarray/core/nputils.py",
      [
        "rolling_window"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "rolling_window"
      ]
    ]
  ],
  "least_squares": [
    [
      "xarray/core/dask_array_ops.py",
      [
        "least_squares"
      ]
    ],
    [
      "xarray/core/duck_array_ops.py",
      [
        "least_squares"
      ]
    ],
    [
      "xarray/core/nputils.py",
      [
        "least_squares"
      ]
    ]
  ],
  "_infer_coords_and_dims": [
    [
      "xarray/core/dataarray.py",
      [
        "_infer_coords_and_dims"
      ]
    ]
  ],
  "_check_data_shape": [
    [
      "xarray/core/dataarray.py",
      [
        "_check_data_shape"
      ]
    ]
  ],
  "_replace": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_replace"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_replace"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_replace"
      ]
    ]
  ],
  "_replace_maybe_drop_dims": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_replace_maybe_drop_dims"
      ]
    ]
  ],
  "_overwrite_indexes": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_overwrite_indexes"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_overwrite_indexes"
      ]
    ]
  ],
  "_to_temp_dataset": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_to_temp_dataset"
      ]
    ]
  ],
  "_from_temp_dataset": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_from_temp_dataset"
      ]
    ]
  ],
  "_to_dataset_split": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_to_dataset_split"
      ]
    ]
  ],
  "_to_dataset_whole": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_to_dataset_whole"
      ]
    ]
  ],
  "name": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "name"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "name"
      ]
    ]
  ],
  "name_9": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "name_9"
      ]
    ]
  ],
  "variable": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "variable"
      ]
    ]
  ],
  "size": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "size"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "NdimSizeLenMixin",
        "size"
      ]
    ]
  ],
  "nbytes": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "nbytes"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "nbytes"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "nbytes"
      ]
    ]
  ],
  "ndim": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "ndim"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "_DummyGroup",
        "ndim"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "NdimSizeLenMixin",
        "ndim"
      ]
    ]
  ],
  "data": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "data"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "data"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "data"
      ]
    ],
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "data"
      ]
    ],
    [
      "xarray/tests/test_coding_times.py",
      [
        "data"
      ]
    ],
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "data"
      ]
    ]
  ],
  "data_18": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "data_18"
      ]
    ]
  ],
  "values": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "values"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "_DummyGroup",
        "values"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "values"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "values"
      ]
    ]
  ],
  "values_20": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "values_20"
      ]
    ]
  ],
  "_in_memory": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_in_memory"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_in_memory"
      ]
    ]
  ],
  "dims_24": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "dims_24"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "dims_24"
      ]
    ]
  ],
  "_item_key_to_dict": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_item_key_to_dict"
      ]
    ]
  ],
  "_level_coords": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_level_coords"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_level_coords"
      ]
    ]
  ],
  "_getitem_coord": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_getitem_coord"
      ]
    ]
  ],
  "loc": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "loc"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "loc"
      ]
    ]
  ],
  "attrs_36": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "attrs_36"
      ]
    ]
  ],
  "encoding": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "encoding"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "encoding"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "encoding"
      ]
    ]
  ],
  "encoding_38": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "encoding_38"
      ]
    ]
  ],
  "coords": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "coords"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "coords"
      ]
    ]
  ],
  "reset_coords": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "reset_coords"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "reset_coords"
      ]
    ]
  ],
  "__dask_tokenize__": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "__dask_tokenize__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__dask_tokenize__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "ReprObject",
        "__dask_tokenize__"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "__dask_tokenize__"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "__dask_tokenize__"
      ]
    ]
  ],
  "__dask_graph__": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "__dask_graph__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__dask_graph__"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "__dask_graph__"
      ]
    ]
  ],
  "__dask_keys__": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "__dask_keys__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__dask_keys__"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "__dask_keys__"
      ]
    ]
  ],
  "__dask_layers__": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "__dask_layers__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__dask_layers__"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "__dask_layers__"
      ]
    ]
  ],
  "__dask_optimize__": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "__dask_optimize__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__dask_optimize__"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "__dask_optimize__"
      ]
    ]
  ],
  "__dask_scheduler__": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "__dask_scheduler__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__dask_scheduler__"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "__dask_scheduler__"
      ]
    ]
  ],
  "__dask_postcompute__": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "__dask_postcompute__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__dask_postcompute__"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "__dask_postcompute__"
      ]
    ]
  ],
  "__dask_postpersist__": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "__dask_postpersist__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__dask_postpersist__"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "__dask_postpersist__"
      ]
    ]
  ],
  "_dask_finalize": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_dask_finalize"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_dask_finalize"
      ]
    ]
  ],
  "compute": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "compute"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "compute"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "compute"
      ]
    ]
  ],
  "persist": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "persist"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "persist"
      ]
    ]
  ],
  "copy": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "copy"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "copy"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "PandasIndexAdapter",
        "copy"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "copy"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "copy"
      ]
    ]
  ],
  "__copy__": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "__copy__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__copy__"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "__copy__"
      ]
    ]
  ],
  "__deepcopy__": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "__deepcopy__"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__deepcopy__"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "__deepcopy__"
      ]
    ]
  ],
  "chunks": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "chunks"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "chunks"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "chunks"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "chunks"
      ]
    ]
  ],
  "chunk": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "chunk"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "chunk"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "chunk"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "chunk"
      ]
    ]
  ],
  "isel": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "isel"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "isel"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "isel"
      ]
    ]
  ],
  "sel": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "sel"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "sel"
      ]
    ]
  ],
  "head": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "head"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "head"
      ]
    ]
  ],
  "tail": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "tail"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "tail"
      ]
    ]
  ],
  "thin": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "thin"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "thin"
      ]
    ]
  ],
  "broadcast_like": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "broadcast_like"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "broadcast_like"
      ]
    ]
  ],
  "reindex_like": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "reindex_like"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "reindex_like"
      ]
    ]
  ],
  "reindex": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "reindex"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "reindex"
      ]
    ]
  ],
  "interp": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "interp"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "interp"
      ]
    ],
    [
      "xarray/core/missing.py",
      [
        "interp"
      ]
    ]
  ],
  "interp_like": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "interp_like"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "interp_like"
      ]
    ]
  ],
  "rename": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "rename"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "rename"
      ]
    ]
  ],
  "swap_dims": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "swap_dims"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "swap_dims"
      ]
    ]
  ],
  "expand_dims": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "expand_dims"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "expand_dims"
      ]
    ]
  ],
  "set_index": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "set_index"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "set_index"
      ]
    ]
  ],
  "reset_index": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "reset_index"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "reset_index"
      ]
    ]
  ],
  "reorder_levels": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "reorder_levels"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "reorder_levels"
      ]
    ]
  ],
  "stack": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "stack"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "stack"
      ]
    ],
    [
      "xarray/core/duck_array_ops.py",
      [
        "stack"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "stack"
      ]
    ]
  ],
  "unstack": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "unstack"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "unstack"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "unstack"
      ]
    ]
  ],
  "to_unstacked_dataset": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "to_unstacked_dataset"
      ]
    ]
  ],
  "transpose": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "transpose"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "transpose"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "LazilyOuterIndexedArray",
        "transpose"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "LazilyVectorizedIndexedArray",
        "transpose"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "CopyOnWriteArray",
        "transpose"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "MemoryCachedArray",
        "transpose"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "NumpyIndexingAdapter",
        "transpose"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "DaskIndexingAdapter",
        "transpose"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "PandasIndexAdapter",
        "transpose"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "transpose"
      ]
    ]
  ],
  "T": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "T"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "T"
      ]
    ]
  ],
  "drop_vars": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "drop_vars"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "drop_vars"
      ]
    ]
  ],
  "drop": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "drop"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "drop"
      ]
    ]
  ],
  "drop_sel": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "drop_sel"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "drop_sel"
      ]
    ]
  ],
  "dropna": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "dropna"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "dropna"
      ]
    ]
  ],
  "fillna": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "fillna"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "fillna"
      ]
    ],
    [
      "xarray/core/duck_array_ops.py",
      [
        "fillna"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "fillna"
      ]
    ],
    [
      "xarray/core/ops.py",
      [
        "fillna"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "fillna"
      ]
    ]
  ],
  "interpolate_na": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "interpolate_na"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "interpolate_na"
      ]
    ]
  ],
  "ffill": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "ffill"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "ffill"
      ]
    ],
    [
      "xarray/core/missing.py",
      [
        "ffill"
      ]
    ]
  ],
  "bfill": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "bfill"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "bfill"
      ]
    ],
    [
      "xarray/core/missing.py",
      [
        "bfill"
      ]
    ]
  ],
  "combine_first": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "combine_first"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "combine_first"
      ]
    ]
  ],
  "reduce": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "reduce"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "reduce"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "DataArrayGroupBy",
        "reduce"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "DatasetGroupBy",
        "reduce"
      ]
    ],
    [
      "xarray/core/resample.py",
      [
        "DatasetResample",
        "reduce"
      ]
    ],
    [
      "xarray/core/rolling.py",
      [
        "DataArrayRolling",
        "reduce"
      ]
    ],
    [
      "xarray/core/rolling.py",
      [
        "DatasetRolling",
        "reduce"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "reduce"
      ]
    ]
  ],
  "to_pandas": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "to_pandas"
      ]
    ]
  ],
  "to_dataframe": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "to_dataframe"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "to_dataframe"
      ]
    ]
  ],
  "to_series": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "to_series"
      ]
    ]
  ],
  "to_masked_array": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "to_masked_array"
      ]
    ]
  ],
  "to_dict": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "to_dict"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "to_dict"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "to_dict"
      ]
    ]
  ],
  "from_dict": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "from_dict"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "from_dict"
      ]
    ]
  ],
  "from_series": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "from_series"
      ]
    ]
  ],
  "_all_compat": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_all_compat"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_all_compat"
      ]
    ]
  ],
  "broadcast_equals": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "broadcast_equals"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "broadcast_equals"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "broadcast_equals"
      ]
    ]
  ],
  "equals": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "equals"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "equals"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "equals"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "equals"
      ]
    ]
  ],
  "identical": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "identical"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "identical"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "identical"
      ]
    ]
  ],
  "_result_name": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_result_name"
      ]
    ]
  ],
  "__array_wrap__": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "__array_wrap__"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "__array_wrap__"
      ]
    ]
  ],
  "__matmul__": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "__matmul__"
      ]
    ]
  ],
  "__rmatmul__": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "__rmatmul__"
      ]
    ]
  ],
  "_unary_op": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_unary_op"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_unary_op"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_unary_op"
      ]
    ]
  ],
  "_binary_op": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_binary_op"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_binary_op"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "_binary_op"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_binary_op"
      ]
    ]
  ],
  "_inplace_binary_op": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_inplace_binary_op"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_inplace_binary_op"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_inplace_binary_op"
      ]
    ]
  ],
  "_copy_attrs_from": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_copy_attrs_from"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_copy_attrs_from"
      ]
    ]
  ],
  "_title_for_slice": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "_title_for_slice"
      ]
    ]
  ],
  "diff": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "diff"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "diff"
      ]
    ]
  ],
  "roll": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "roll"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "roll"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "roll"
      ]
    ]
  ],
  "real": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "real"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "real"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "real"
      ]
    ]
  ],
  "imag": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "imag"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "imag"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "imag"
      ]
    ]
  ],
  "sortby": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "sortby"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "sortby"
      ]
    ]
  ],
  "quantile": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "quantile"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "quantile"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "quantile"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "quantile"
      ]
    ]
  ],
  "rank": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "rank"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "rank"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "rank"
      ]
    ]
  ],
  "differentiate": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "differentiate"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "differentiate"
      ]
    ]
  ],
  "integrate": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "integrate"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "integrate"
      ]
    ]
  ],
  "unify_chunks": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "unify_chunks"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "unify_chunks"
      ]
    ]
  ],
  "map_blocks": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "map_blocks"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "map_blocks"
      ]
    ],
    [
      "xarray/core/parallel.py",
      [
        "map_blocks"
      ]
    ]
  ],
  "polyfit": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "polyfit"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "polyfit"
      ]
    ]
  ],
  "idxmin": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "idxmin"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "idxmin"
      ]
    ]
  ],
  "idxmax": [
    [
      "xarray/core/dataarray.py",
      [
        "DataArray",
        "idxmax"
      ]
    ],
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "idxmax"
      ]
    ]
  ],
  "_get_virtual_variable": [
    [
      "xarray/core/dataset.py",
      [
        "_get_virtual_variable"
      ]
    ]
  ],
  "calculate_dimensions": [
    [
      "xarray/core/dataset.py",
      [
        "calculate_dimensions"
      ]
    ]
  ],
  "merge_indexes": [
    [
      "xarray/core/dataset.py",
      [
        "merge_indexes"
      ]
    ]
  ],
  "split_indexes": [
    [
      "xarray/core/dataset.py",
      [
        "split_indexes"
      ]
    ]
  ],
  "_assert_empty": [
    [
      "xarray/core/dataset.py",
      [
        "_assert_empty"
      ]
    ]
  ],
  "as_dataset": [
    [
      "xarray/core/dataset.py",
      [
        "as_dataset"
      ]
    ]
  ],
  "load_store": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "load_store"
      ]
    ]
  ],
  "attrs_3": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "attrs_3"
      ]
    ]
  ],
  "encoding_5": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "encoding_5"
      ]
    ]
  ],
  "_dask_postcompute": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_dask_postcompute"
      ]
    ]
  ],
  "_dask_postpersist": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_dask_postpersist"
      ]
    ]
  ],
  "_persist_inplace": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_persist_inplace"
      ]
    ]
  ],
  "_construct_direct": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_construct_direct"
      ]
    ]
  ],
  "_replace_with_new_dims": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_replace_with_new_dims"
      ]
    ]
  ],
  "_replace_vars_and_dims": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_replace_vars_and_dims"
      ]
    ]
  ],
  "_copy_listed": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_copy_listed"
      ]
    ]
  ],
  "_construct_dataarray": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_construct_dataarray"
      ]
    ]
  ],
  "__getitem___43": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__getitem___43"
      ]
    ]
  ],
  "__getitem___44": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__getitem___44"
      ]
    ]
  ],
  "__getitem___45": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "__getitem___45"
      ]
    ]
  ],
  "data_vars": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "data_vars"
      ]
    ]
  ],
  "set_coords": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "set_coords"
      ]
    ]
  ],
  "info": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "info"
      ]
    ]
  ],
  "selkeys": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "chunk",
        "selkeys"
      ]
    ]
  ],
  "_validate_indexers": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_validate_indexers"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_validate_indexers"
      ]
    ]
  ],
  "_validate_interp_indexers": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_validate_interp_indexers"
      ]
    ]
  ],
  "_get_indexers_coords_and_indexes": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_get_indexers_coords_and_indexes"
      ]
    ]
  ],
  "_isel_fancy": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_isel_fancy"
      ]
    ]
  ],
  "_reindex": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_reindex"
      ]
    ]
  ],
  "maybe_variable": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "interp",
        "maybe_variable"
      ]
    ]
  ],
  "_validate_interp_indexer": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "interp",
        "_validate_interp_indexer"
      ]
    ]
  ],
  "_rename_vars": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_rename_vars"
      ]
    ]
  ],
  "_rename_dims": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_rename_dims"
      ]
    ]
  ],
  "_rename_indexes": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_rename_indexes"
      ]
    ]
  ],
  "_rename_all": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_rename_all"
      ]
    ]
  ],
  "rename_dims": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "rename_dims"
      ]
    ]
  ],
  "rename_vars": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "rename_vars"
      ]
    ]
  ],
  "_stack_once": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_stack_once"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_stack_once"
      ]
    ]
  ],
  "ensure_stackable": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "to_stacked_array",
        "ensure_stackable"
      ]
    ]
  ],
  "to_stacked_array": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "to_stacked_array"
      ]
    ]
  ],
  "_unstack_once": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_unstack_once"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_unstack_once"
      ]
    ]
  ],
  "_assert_all_in_dataset": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_assert_all_in_dataset"
      ]
    ]
  ],
  "drop_dims": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "drop_dims"
      ]
    ]
  ],
  "map": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "map"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "DataArrayGroupBy",
        "map"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "DatasetGroupBy",
        "map"
      ]
    ],
    [
      "xarray/core/resample.py",
      [
        "DataArrayResample",
        "map"
      ]
    ],
    [
      "xarray/core/resample.py",
      [
        "DatasetResample",
        "map"
      ]
    ],
    [
      "xarray/plot/facetgrid.py",
      [
        "FacetGrid",
        "map"
      ]
    ]
  ],
  "apply": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "apply"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "DataArrayGroupBy",
        "apply"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "DatasetGroupBy",
        "apply"
      ]
    ],
    [
      "xarray/core/resample.py",
      [
        "DataArrayResample",
        "apply"
      ]
    ],
    [
      "xarray/core/resample.py",
      [
        "DatasetResample",
        "apply"
      ]
    ]
  ],
  "assign": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "assign"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "DatasetGroupBy",
        "assign"
      ]
    ]
  ],
  "to_array": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "to_array"
      ]
    ]
  ],
  "_to_dataframe": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_to_dataframe"
      ]
    ]
  ],
  "_set_sparse_data_from_dataframe": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_set_sparse_data_from_dataframe"
      ]
    ]
  ],
  "_set_numpy_data_from_dataframe": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_set_numpy_data_from_dataframe"
      ]
    ]
  ],
  "from_dataframe": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "from_dataframe"
      ]
    ]
  ],
  "to_dask_dataframe": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "to_dask_dataframe"
      ]
    ]
  ],
  "apply_over_both": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_calculate_binary_op",
        "apply_over_both"
      ]
    ]
  ],
  "_calculate_binary_op": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_calculate_binary_op"
      ]
    ]
  ],
  "_integrate_one": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "_integrate_one"
      ]
    ]
  ],
  "filter_by_attrs": [
    [
      "xarray/core/dataset.py",
      [
        "Dataset",
        "filter_by_attrs"
      ]
    ]
  ],
  "__gt__": [
    [
      "xarray/core/dtypes.py",
      [
        "AlwaysGreaterThan",
        "__gt__"
      ]
    ]
  ],
  "__lt__": [
    [
      "xarray/core/dtypes.py",
      [
        "AlwaysLessThan",
        "__lt__"
      ]
    ]
  ],
  "maybe_promote": [
    [
      "xarray/core/dtypes.py",
      [
        "maybe_promote"
      ]
    ]
  ],
  "get_fill_value": [
    [
      "xarray/core/dtypes.py",
      [
        "get_fill_value"
      ]
    ]
  ],
  "get_pos_infinity": [
    [
      "xarray/core/dtypes.py",
      [
        "get_pos_infinity"
      ]
    ]
  ],
  "get_neg_infinity": [
    [
      "xarray/core/dtypes.py",
      [
        "get_neg_infinity"
      ]
    ]
  ],
  "is_datetime_like": [
    [
      "xarray/core/dtypes.py",
      [
        "is_datetime_like"
      ]
    ]
  ],
  "result_type": [
    [
      "xarray/core/dtypes.py",
      [
        "result_type"
      ]
    ]
  ],
  "_dask_or_eager_func": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "_dask_or_eager_func"
      ]
    ]
  ],
  "fail_on_dask_array_input": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "fail_on_dask_array_input"
      ]
    ]
  ],
  "isnull": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "isnull"
      ]
    ]
  ],
  "notnull": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "notnull"
      ]
    ]
  ],
  "gradient": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "gradient"
      ]
    ]
  ],
  "trapz": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "trapz"
      ]
    ]
  ],
  "asarray": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "asarray"
      ]
    ]
  ],
  "as_shared_dtype": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "as_shared_dtype"
      ]
    ]
  ],
  "lazy_array_equiv": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "lazy_array_equiv"
      ]
    ]
  ],
  "allclose_or_equiv": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "allclose_or_equiv"
      ]
    ]
  ],
  "array_equiv": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "array_equiv"
      ]
    ]
  ],
  "array_notnull_equiv": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "array_notnull_equiv"
      ]
    ]
  ],
  "where_method": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "where_method"
      ]
    ],
    [
      "xarray/core/ops.py",
      [
        "where_method"
      ]
    ]
  ],
  "concatenate": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "concatenate"
      ]
    ],
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_exclude",
        "concatenate"
      ]
    ]
  ],
  "_ignore_warnings_if": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "_ignore_warnings_if"
      ]
    ]
  ],
  "_create_nan_agg_method": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "_create_nan_agg_method"
      ]
    ]
  ],
  "_datetime_nanmin": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "_datetime_nanmin"
      ]
    ]
  ],
  "datetime_to_numeric": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "datetime_to_numeric"
      ]
    ]
  ],
  "timedelta_to_numeric": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "timedelta_to_numeric"
      ]
    ]
  ],
  "_to_pytimedelta": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "_to_pytimedelta"
      ]
    ]
  ],
  "np_timedelta64_to_float": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "np_timedelta64_to_float"
      ]
    ]
  ],
  "pd_timedelta_to_float": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "pd_timedelta_to_float"
      ]
    ]
  ],
  "py_timedelta_to_float": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "py_timedelta_to_float"
      ]
    ]
  ],
  "mean": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "mean"
      ]
    ],
    [
      "xarray/core/rolling_exp.py",
      [
        "RollingExp",
        "mean"
      ]
    ],
    [
      "xarray/core/weighted.py",
      [
        "Weighted",
        "mean"
      ]
    ]
  ],
  "_nd_cum_func": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "_nd_cum_func"
      ]
    ]
  ],
  "cumprod": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "cumprod"
      ]
    ]
  ],
  "cumsum": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "cumsum"
      ]
    ]
  ],
  "first": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "first"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "first"
      ]
    ]
  ],
  "last": [
    [
      "xarray/core/duck_array_ops.py",
      [
        "last"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "last"
      ]
    ]
  ],
  "__get__": [
    [
      "xarray/core/extensions.py",
      [
        "_CachedAccessor",
        "__get__"
      ]
    ],
    [
      "xarray/core/utils.py",
      [
        "UncachedAccessor",
        "__get__"
      ]
    ]
  ],
  "_register_accessor": [
    [
      "xarray/core/extensions.py",
      [
        "_register_accessor"
      ]
    ]
  ],
  "register_dataarray_accessor": [
    [
      "xarray/core/extensions.py",
      [
        "register_dataarray_accessor"
      ]
    ]
  ],
  "register_dataset_accessor": [
    [
      "xarray/core/extensions.py",
      [
        "register_dataset_accessor"
      ]
    ]
  ],
  "pretty_print": [
    [
      "xarray/core/formatting.py",
      [
        "pretty_print"
      ]
    ]
  ],
  "maybe_truncate": [
    [
      "xarray/core/formatting.py",
      [
        "maybe_truncate"
      ]
    ]
  ],
  "wrap_indent": [
    [
      "xarray/core/formatting.py",
      [
        "wrap_indent"
      ]
    ]
  ],
  "_get_indexer_at_least_n_items": [
    [
      "xarray/core/formatting.py",
      [
        "_get_indexer_at_least_n_items"
      ]
    ]
  ],
  "first_n_items": [
    [
      "xarray/core/formatting.py",
      [
        "first_n_items"
      ]
    ]
  ],
  "last_n_items": [
    [
      "xarray/core/formatting.py",
      [
        "last_n_items"
      ]
    ]
  ],
  "last_item": [
    [
      "xarray/core/formatting.py",
      [
        "last_item"
      ]
    ]
  ],
  "format_timestamp": [
    [
      "xarray/core/formatting.py",
      [
        "format_timestamp"
      ]
    ]
  ],
  "format_timedelta": [
    [
      "xarray/core/formatting.py",
      [
        "format_timedelta"
      ]
    ]
  ],
  "format_item": [
    [
      "xarray/core/formatting.py",
      [
        "format_item"
      ]
    ]
  ],
  "format_items": [
    [
      "xarray/core/formatting.py",
      [
        "format_items"
      ]
    ]
  ],
  "format_array_flat": [
    [
      "xarray/core/formatting.py",
      [
        "format_array_flat"
      ]
    ]
  ],
  "inline_dask_repr": [
    [
      "xarray/core/formatting.py",
      [
        "inline_dask_repr"
      ]
    ]
  ],
  "inline_sparse_repr": [
    [
      "xarray/core/formatting.py",
      [
        "inline_sparse_repr"
      ]
    ]
  ],
  "inline_variable_array_repr": [
    [
      "xarray/core/formatting.py",
      [
        "inline_variable_array_repr"
      ]
    ]
  ],
  "summarize_variable": [
    [
      "xarray/core/formatting.py",
      [
        "summarize_variable"
      ]
    ],
    [
      "xarray/core/formatting_html.py",
      [
        "summarize_variable"
      ]
    ]
  ],
  "_summarize_coord_multiindex": [
    [
      "xarray/core/formatting.py",
      [
        "_summarize_coord_multiindex"
      ]
    ],
    [
      "xarray/core/formatting_html.py",
      [
        "_summarize_coord_multiindex"
      ]
    ]
  ],
  "_summarize_coord_levels": [
    [
      "xarray/core/formatting.py",
      [
        "_summarize_coord_levels"
      ]
    ]
  ],
  "summarize_datavar": [
    [
      "xarray/core/formatting.py",
      [
        "summarize_datavar"
      ]
    ]
  ],
  "summarize_coord": [
    [
      "xarray/core/formatting.py",
      [
        "summarize_coord"
      ]
    ],
    [
      "xarray/core/formatting_html.py",
      [
        "summarize_coord"
      ]
    ]
  ],
  "summarize_attr": [
    [
      "xarray/core/formatting.py",
      [
        "summarize_attr"
      ]
    ]
  ],
  "_get_col_items": [
    [
      "xarray/core/formatting.py",
      [
        "_get_col_items"
      ]
    ]
  ],
  "_calculate_col_width": [
    [
      "xarray/core/formatting.py",
      [
        "_calculate_col_width"
      ]
    ]
  ],
  "_mapping_repr": [
    [
      "xarray/core/formatting.py",
      [
        "_mapping_repr"
      ]
    ]
  ],
  "coords_repr": [
    [
      "xarray/core/formatting.py",
      [
        "coords_repr"
      ]
    ]
  ],
  "indexes_repr": [
    [
      "xarray/core/formatting.py",
      [
        "indexes_repr"
      ]
    ]
  ],
  "dim_summary": [
    [
      "xarray/core/formatting.py",
      [
        "dim_summary"
      ]
    ]
  ],
  "unindexed_dims_repr": [
    [
      "xarray/core/formatting.py",
      [
        "unindexed_dims_repr"
      ]
    ]
  ],
  "set_numpy_options": [
    [
      "xarray/core/formatting.py",
      [
        "set_numpy_options"
      ]
    ]
  ],
  "limit_lines": [
    [
      "xarray/core/formatting.py",
      [
        "limit_lines"
      ]
    ]
  ],
  "short_numpy_repr": [
    [
      "xarray/core/formatting.py",
      [
        "short_numpy_repr"
      ]
    ]
  ],
  "short_data_repr": [
    [
      "xarray/core/formatting.py",
      [
        "short_data_repr"
      ]
    ]
  ],
  "array_repr": [
    [
      "xarray/core/formatting.py",
      [
        "array_repr"
      ]
    ],
    [
      "xarray/core/formatting_html.py",
      [
        "array_repr"
      ]
    ]
  ],
  "dataset_repr": [
    [
      "xarray/core/formatting.py",
      [
        "dataset_repr"
      ]
    ],
    [
      "xarray/core/formatting_html.py",
      [
        "dataset_repr"
      ]
    ]
  ],
  "diff_dim_summary": [
    [
      "xarray/core/formatting.py",
      [
        "diff_dim_summary"
      ]
    ]
  ],
  "is_array_like": [
    [
      "xarray/core/formatting.py",
      [
        "_diff_mapping_repr",
        "is_array_like"
      ]
    ]
  ],
  "extra_items_repr": [
    [
      "xarray/core/formatting.py",
      [
        "_diff_mapping_repr",
        "extra_items_repr"
      ]
    ]
  ],
  "_diff_mapping_repr": [
    [
      "xarray/core/formatting.py",
      [
        "_diff_mapping_repr"
      ]
    ]
  ],
  "_compat_to_str": [
    [
      "xarray/core/formatting.py",
      [
        "_compat_to_str"
      ]
    ]
  ],
  "diff_array_repr": [
    [
      "xarray/core/formatting.py",
      [
        "diff_array_repr"
      ]
    ]
  ],
  "diff_dataset_repr": [
    [
      "xarray/core/formatting.py",
      [
        "diff_dataset_repr"
      ]
    ]
  ],
  "short_data_repr_html": [
    [
      "xarray/core/formatting_html.py",
      [
        "short_data_repr_html"
      ]
    ]
  ],
  "format_dims": [
    [
      "xarray/core/formatting_html.py",
      [
        "format_dims"
      ]
    ]
  ],
  "summarize_attrs": [
    [
      "xarray/core/formatting_html.py",
      [
        "summarize_attrs"
      ]
    ]
  ],
  "_icon": [
    [
      "xarray/core/formatting_html.py",
      [
        "_icon"
      ]
    ]
  ],
  "summarize_coords": [
    [
      "xarray/core/formatting_html.py",
      [
        "summarize_coords"
      ]
    ]
  ],
  "summarize_vars": [
    [
      "xarray/core/formatting_html.py",
      [
        "summarize_vars"
      ]
    ]
  ],
  "collapsible_section": [
    [
      "xarray/core/formatting_html.py",
      [
        "collapsible_section"
      ]
    ]
  ],
  "_mapping_section": [
    [
      "xarray/core/formatting_html.py",
      [
        "_mapping_section"
      ]
    ]
  ],
  "dim_section": [
    [
      "xarray/core/formatting_html.py",
      [
        "dim_section"
      ]
    ]
  ],
  "array_section": [
    [
      "xarray/core/formatting_html.py",
      [
        "array_section"
      ]
    ]
  ],
  "_obj_repr": [
    [
      "xarray/core/formatting_html.py",
      [
        "_obj_repr"
      ]
    ]
  ],
  "check_reduce_dims": [
    [
      "xarray/core/groupby.py",
      [
        "check_reduce_dims"
      ]
    ]
  ],
  "unique_value_groups": [
    [
      "xarray/core/groupby.py",
      [
        "unique_value_groups"
      ]
    ]
  ],
  "_dummy_copy": [
    [
      "xarray/core/groupby.py",
      [
        "_dummy_copy"
      ]
    ]
  ],
  "_is_one_or_none": [
    [
      "xarray/core/groupby.py",
      [
        "_is_one_or_none"
      ]
    ]
  ],
  "_consolidate_slices": [
    [
      "xarray/core/groupby.py",
      [
        "_consolidate_slices"
      ]
    ]
  ],
  "_inverse_permutation_indices": [
    [
      "xarray/core/groupby.py",
      [
        "_inverse_permutation_indices"
      ]
    ]
  ],
  "_ensure_1d": [
    [
      "xarray/core/groupby.py",
      [
        "_ensure_1d"
      ]
    ]
  ],
  "_unique_and_monotonic": [
    [
      "xarray/core/groupby.py",
      [
        "_unique_and_monotonic"
      ]
    ]
  ],
  "_apply_loffset": [
    [
      "xarray/core/groupby.py",
      [
        "_apply_loffset"
      ]
    ]
  ],
  "groups": [
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "groups"
      ]
    ]
  ],
  "_get_index_and_items": [
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "_get_index_and_items"
      ]
    ]
  ],
  "_iter_grouped": [
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "_iter_grouped"
      ]
    ]
  ],
  "_infer_concat_args": [
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "_infer_concat_args"
      ]
    ]
  ],
  "_yield_binary_applied": [
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "_yield_binary_applied"
      ]
    ]
  ],
  "_maybe_restore_empty_groups": [
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "_maybe_restore_empty_groups"
      ]
    ]
  ],
  "_maybe_unstack": [
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "_maybe_unstack"
      ]
    ]
  ],
  "_first_or_last": [
    [
      "xarray/core/groupby.py",
      [
        "GroupBy",
        "_first_or_last"
      ]
    ]
  ],
  "_maybe_reorder": [
    [
      "xarray/core/groupby.py",
      [
        "_maybe_reorder"
      ]
    ]
  ],
  "_iter_grouped_shortcut": [
    [
      "xarray/core/groupby.py",
      [
        "DataArrayGroupBy",
        "_iter_grouped_shortcut"
      ]
    ]
  ],
  "_concat_shortcut": [
    [
      "xarray/core/groupby.py",
      [
        "DataArrayGroupBy",
        "_concat_shortcut"
      ]
    ]
  ],
  "_restore_dim_order": [
    [
      "xarray/core/groupby.py",
      [
        "DataArrayGroupBy",
        "_restore_dim_order"
      ]
    ]
  ],
  "_combine": [
    [
      "xarray/core/groupby.py",
      [
        "DataArrayGroupBy",
        "_combine"
      ]
    ],
    [
      "xarray/core/groupby.py",
      [
        "DatasetGroupBy",
        "_combine"
      ]
    ]
  ],
  "reduce_array": [
    [
      "xarray/core/groupby.py",
      [
        "DataArrayGroupBy",
        "reduce",
        "reduce_array"
      ]
    ]
  ],
  "reduce_dataset": [
    [
      "xarray/core/groupby.py",
      [
        "DatasetGroupBy",
        "reduce",
        "reduce_dataset"
      ]
    ]
  ],
  "remove_unused_levels_categories": [
    [
      "xarray/core/indexes.py",
      [
        "remove_unused_levels_categories"
      ]
    ]
  ],
  "default_indexes": [
    [
      "xarray/core/indexes.py",
      [
        "default_indexes"
      ]
    ]
  ],
  "isel_variable_and_index": [
    [
      "xarray/core/indexes.py",
      [
        "isel_variable_and_index"
      ]
    ]
  ],
  "roll_index": [
    [
      "xarray/core/indexes.py",
      [
        "roll_index"
      ]
    ]
  ],
  "propagate_indexes": [
    [
      "xarray/core/indexes.py",
      [
        "propagate_indexes"
      ]
    ]
  ],
  "expanded_indexer": [
    [
      "xarray/core/indexing.py",
      [
        "expanded_indexer"
      ]
    ]
  ],
  "_expand_slice": [
    [
      "xarray/core/indexing.py",
      [
        "_expand_slice"
      ]
    ]
  ],
  "_sanitize_slice_element": [
    [
      "xarray/core/indexing.py",
      [
        "_sanitize_slice_element"
      ]
    ]
  ],
  "_asarray_tuplesafe": [
    [
      "xarray/core/indexing.py",
      [
        "_asarray_tuplesafe"
      ]
    ]
  ],
  "_is_nested_tuple": [
    [
      "xarray/core/indexing.py",
      [
        "_is_nested_tuple"
      ]
    ]
  ],
  "get_indexer_nd": [
    [
      "xarray/core/indexing.py",
      [
        "get_indexer_nd"
      ]
    ]
  ],
  "convert_label_indexer": [
    [
      "xarray/core/indexing.py",
      [
        "convert_label_indexer"
      ]
    ]
  ],
  "get_dim_indexers": [
    [
      "xarray/core/indexing.py",
      [
        "get_dim_indexers"
      ]
    ]
  ],
  "slice_slice": [
    [
      "xarray/core/indexing.py",
      [
        "slice_slice"
      ]
    ]
  ],
  "_index_indexer_1d": [
    [
      "xarray/core/indexing.py",
      [
        "_index_indexer_1d"
      ]
    ]
  ],
  "tuple": [
    [
      "xarray/core/indexing.py",
      [
        "ExplicitIndexer",
        "tuple"
      ]
    ]
  ],
  "as_integer_or_none": [
    [
      "xarray/core/indexing.py",
      [
        "as_integer_or_none"
      ]
    ]
  ],
  "as_integer_slice": [
    [
      "xarray/core/indexing.py",
      [
        "as_integer_slice"
      ]
    ]
  ],
  "_updated_key": [
    [
      "xarray/core/indexing.py",
      [
        "LazilyOuterIndexedArray",
        "_updated_key"
      ]
    ],
    [
      "xarray/core/indexing.py",
      [
        "LazilyVectorizedIndexedArray",
        "_updated_key"
      ]
    ]
  ],
  "_wrap_numpy_scalars": [
    [
      "xarray/core/indexing.py",
      [
        "_wrap_numpy_scalars"
      ]
    ]
  ],
  "_ensure_copied": [
    [
      "xarray/core/indexing.py",
      [
        "CopyOnWriteArray",
        "_ensure_copied"
      ]
    ]
  ],
  "_ensure_cached": [
    [
      "xarray/core/indexing.py",
      [
        "MemoryCachedArray",
        "_ensure_cached"
      ]
    ]
  ],
  "as_indexable": [
    [
      "xarray/core/indexing.py",
      [
        "as_indexable"
      ]
    ]
  ],
  "_outer_to_vectorized_indexer": [
    [
      "xarray/core/indexing.py",
      [
        "_outer_to_vectorized_indexer"
      ]
    ]
  ],
  "_outer_to_numpy_indexer": [
    [
      "xarray/core/indexing.py",
      [
        "_outer_to_numpy_indexer"
      ]
    ]
  ],
  "_combine_indexers": [
    [
      "xarray/core/indexing.py",
      [
        "_combine_indexers"
      ]
    ]
  ],
  "explicit_indexing_adapter": [
    [
      "xarray/core/indexing.py",
      [
        "explicit_indexing_adapter"
      ]
    ]
  ],
  "decompose_indexer": [
    [
      "xarray/core/indexing.py",
      [
        "decompose_indexer"
      ]
    ]
  ],
  "_decompose_slice": [
    [
      "xarray/core/indexing.py",
      [
        "_decompose_slice"
      ]
    ]
  ],
  "_decompose_vectorized_indexer": [
    [
      "xarray/core/indexing.py",
      [
        "_decompose_vectorized_indexer"
      ]
    ]
  ],
  "_decompose_outer_indexer": [
    [
      "xarray/core/indexing.py",
      [
        "_decompose_outer_indexer"
      ]
    ]
  ],
  "_arrayize_vectorized_indexer": [
    [
      "xarray/core/indexing.py",
      [
        "_arrayize_vectorized_indexer"
      ]
    ]
  ],
  "_dask_array_with_chunks_hint": [
    [
      "xarray/core/indexing.py",
      [
        "_dask_array_with_chunks_hint"
      ]
    ]
  ],
  "_logical_any": [
    [
      "xarray/core/indexing.py",
      [
        "_logical_any"
      ]
    ]
  ],
  "_masked_result_drop_slice": [
    [
      "xarray/core/indexing.py",
      [
        "_masked_result_drop_slice"
      ]
    ]
  ],
  "create_mask": [
    [
      "xarray/core/indexing.py",
      [
        "create_mask"
      ]
    ]
  ],
  "_posify_mask_subindexer": [
    [
      "xarray/core/indexing.py",
      [
        "_posify_mask_subindexer"
      ]
    ]
  ],
  "posify_mask_indexer": [
    [
      "xarray/core/indexing.py",
      [
        "posify_mask_indexer"
      ]
    ]
  ],
  "is_fancy_indexer": [
    [
      "xarray/core/indexing.py",
      [
        "is_fancy_indexer"
      ]
    ]
  ],
  "_indexing_array_and_key": [
    [
      "xarray/core/indexing.py",
      [
        "NumpyIndexingAdapter",
        "_indexing_array_and_key"
      ]
    ]
  ],
  "broadcast_dimension_size": [
    [
      "xarray/core/merge.py",
      [
        "broadcast_dimension_size"
      ]
    ]
  ],
  "unique_variable": [
    [
      "xarray/core/merge.py",
      [
        "unique_variable"
      ]
    ]
  ],
  "_assert_compat_valid": [
    [
      "xarray/core/merge.py",
      [
        "_assert_compat_valid"
      ]
    ]
  ],
  "merge_collected": [
    [
      "xarray/core/merge.py",
      [
        "merge_collected"
      ]
    ]
  ],
  "append": [
    [
      "xarray/core/merge.py",
      [
        "collect_variables_and_indexes",
        "append"
      ]
    ]
  ],
  "append_all": [
    [
      "xarray/core/merge.py",
      [
        "collect_variables_and_indexes",
        "append_all"
      ]
    ]
  ],
  "collect_variables_and_indexes": [
    [
      "xarray/core/merge.py",
      [
        "collect_variables_and_indexes"
      ]
    ]
  ],
  "collect_from_coordinates": [
    [
      "xarray/core/merge.py",
      [
        "collect_from_coordinates"
      ]
    ]
  ],
  "merge_coordinates_without_align": [
    [
      "xarray/core/merge.py",
      [
        "merge_coordinates_without_align"
      ]
    ]
  ],
  "determine_coords": [
    [
      "xarray/core/merge.py",
      [
        "determine_coords"
      ]
    ]
  ],
  "coerce_pandas_values": [
    [
      "xarray/core/merge.py",
      [
        "coerce_pandas_values"
      ]
    ]
  ],
  "_get_priority_vars_and_indexes": [
    [
      "xarray/core/merge.py",
      [
        "_get_priority_vars_and_indexes"
      ]
    ]
  ],
  "merge_coords": [
    [
      "xarray/core/merge.py",
      [
        "merge_coords"
      ]
    ]
  ],
  "merge_data_and_coords": [
    [
      "xarray/core/merge.py",
      [
        "merge_data_and_coords"
      ]
    ]
  ],
  "_extract_indexes_from_coords": [
    [
      "xarray/core/merge.py",
      [
        "_extract_indexes_from_coords"
      ]
    ]
  ],
  "assert_valid_explicit_coords": [
    [
      "xarray/core/merge.py",
      [
        "assert_valid_explicit_coords"
      ]
    ]
  ],
  "merge_attrs": [
    [
      "xarray/core/merge.py",
      [
        "merge_attrs"
      ]
    ]
  ],
  "merge_core": [
    [
      "xarray/core/merge.py",
      [
        "merge_core"
      ]
    ]
  ],
  "dataset_merge_method": [
    [
      "xarray/core/merge.py",
      [
        "dataset_merge_method"
      ]
    ]
  ],
  "dataset_update_method": [
    [
      "xarray/core/merge.py",
      [
        "dataset_update_method"
      ]
    ]
  ],
  "_get_nan_block_lengths": [
    [
      "xarray/core/missing.py",
      [
        "_get_nan_block_lengths"
      ]
    ]
  ],
  "__call__": [
    [
      "xarray/core/missing.py",
      [
        "BaseInterpolator",
        "__call__"
      ]
    ],
    [
      "xarray/core/missing.py",
      [
        "NumpyInterpolator",
        "__call__"
      ]
    ],
    [
      "xarray/plot/dataset_plot.py",
      [
        "_Dataset_PlotMethods",
        "__call__"
      ]
    ],
    [
      "xarray/plot/plot.py",
      [
        "_PlotMethods",
        "__call__"
      ]
    ],
    [
      "xarray/tests/test_dask.py",
      [
        "CountingScheduler",
        "__call__"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "do",
        "__call__"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "method",
        "__call__"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "function",
        "__call__"
      ]
    ],
    [
      "xarray/ufuncs.py",
      [
        "_UFuncDispatcher",
        "__call__"
      ]
    ]
  ],
  "_apply_over_vars_with_dim": [
    [
      "xarray/core/missing.py",
      [
        "_apply_over_vars_with_dim"
      ]
    ]
  ],
  "get_clean_interp_index": [
    [
      "xarray/core/missing.py",
      [
        "get_clean_interp_index"
      ]
    ]
  ],
  "interp_na": [
    [
      "xarray/core/missing.py",
      [
        "interp_na"
      ]
    ]
  ],
  "func_interpolate_na": [
    [
      "xarray/core/missing.py",
      [
        "func_interpolate_na"
      ]
    ]
  ],
  "_bfill": [
    [
      "xarray/core/missing.py",
      [
        "_bfill"
      ]
    ]
  ],
  "_get_interpolator": [
    [
      "xarray/core/missing.py",
      [
        "_get_interpolator"
      ]
    ]
  ],
  "_get_interpolator_nd": [
    [
      "xarray/core/missing.py",
      [
        "_get_interpolator_nd"
      ]
    ]
  ],
  "_get_valid_fill_mask": [
    [
      "xarray/core/missing.py",
      [
        "_get_valid_fill_mask"
      ]
    ]
  ],
  "_assert_single_chunk": [
    [
      "xarray/core/missing.py",
      [
        "_assert_single_chunk"
      ]
    ]
  ],
  "_localize": [
    [
      "xarray/core/missing.py",
      [
        "_localize"
      ]
    ]
  ],
  "_floatize_x": [
    [
      "xarray/core/missing.py",
      [
        "_floatize_x"
      ]
    ]
  ],
  "interp_func": [
    [
      "xarray/core/missing.py",
      [
        "interp_func"
      ]
    ]
  ],
  "_interp1d": [
    [
      "xarray/core/missing.py",
      [
        "_interp1d"
      ]
    ]
  ],
  "_interpnd": [
    [
      "xarray/core/missing.py",
      [
        "_interpnd"
      ]
    ]
  ],
  "_replace_nan": [
    [
      "xarray/core/nanops.py",
      [
        "_replace_nan"
      ]
    ]
  ],
  "_maybe_null_out": [
    [
      "xarray/core/nanops.py",
      [
        "_maybe_null_out"
      ]
    ]
  ],
  "_nan_argminmax_object": [
    [
      "xarray/core/nanops.py",
      [
        "_nan_argminmax_object"
      ]
    ]
  ],
  "_nan_minmax_object": [
    [
      "xarray/core/nanops.py",
      [
        "_nan_minmax_object"
      ]
    ]
  ],
  "nanmin": [
    [
      "xarray/core/nanops.py",
      [
        "nanmin"
      ]
    ]
  ],
  "nanmax": [
    [
      "xarray/core/nanops.py",
      [
        "nanmax"
      ]
    ]
  ],
  "nanargmin": [
    [
      "xarray/core/nanops.py",
      [
        "nanargmin"
      ]
    ]
  ],
  "nanargmax": [
    [
      "xarray/core/nanops.py",
      [
        "nanargmax"
      ]
    ]
  ],
  "nansum": [
    [
      "xarray/core/nanops.py",
      [
        "nansum"
      ]
    ]
  ],
  "_nanmean_ddof_object": [
    [
      "xarray/core/nanops.py",
      [
        "_nanmean_ddof_object"
      ]
    ]
  ],
  "nanmean": [
    [
      "xarray/core/nanops.py",
      [
        "nanmean"
      ]
    ]
  ],
  "_nanvar_object": [
    [
      "xarray/core/nanops.py",
      [
        "_nanvar_object"
      ]
    ]
  ],
  "nanvar": [
    [
      "xarray/core/nanops.py",
      [
        "nanvar"
      ]
    ]
  ],
  "nanstd": [
    [
      "xarray/core/nanops.py",
      [
        "nanstd"
      ]
    ]
  ],
  "nanprod": [
    [
      "xarray/core/nanops.py",
      [
        "nanprod"
      ]
    ]
  ],
  "nancumsum": [
    [
      "xarray/core/nanops.py",
      [
        "nancumsum"
      ]
    ]
  ],
  "nancumprod": [
    [
      "xarray/core/nanops.py",
      [
        "nancumprod"
      ]
    ]
  ],
  "_validate_axis": [
    [
      "xarray/core/npcompat.py",
      [
        "_validate_axis"
      ]
    ]
  ],
  "moveaxis": [
    [
      "xarray/core/npcompat.py",
      [
        "moveaxis"
      ]
    ]
  ],
  "_is_nep18_active": [
    [
      "xarray/core/npcompat.py",
      [
        "_is_nep18_active"
      ]
    ]
  ],
  "_select_along_axis": [
    [
      "xarray/core/nputils.py",
      [
        "_select_along_axis"
      ]
    ]
  ],
  "nanfirst": [
    [
      "xarray/core/nputils.py",
      [
        "nanfirst"
      ]
    ]
  ],
  "nanlast": [
    [
      "xarray/core/nputils.py",
      [
        "nanlast"
      ]
    ]
  ],
  "inverse_permutation": [
    [
      "xarray/core/nputils.py",
      [
        "inverse_permutation"
      ]
    ]
  ],
  "_ensure_bool_is_ndarray": [
    [
      "xarray/core/nputils.py",
      [
        "_ensure_bool_is_ndarray"
      ]
    ]
  ],
  "array_eq": [
    [
      "xarray/core/nputils.py",
      [
        "array_eq"
      ]
    ]
  ],
  "array_ne": [
    [
      "xarray/core/nputils.py",
      [
        "array_ne"
      ]
    ]
  ],
  "_is_contiguous": [
    [
      "xarray/core/nputils.py",
      [
        "_is_contiguous"
      ]
    ]
  ],
  "_advanced_indexer_subspaces": [
    [
      "xarray/core/nputils.py",
      [
        "_advanced_indexer_subspaces"
      ]
    ]
  ],
  "_rolling_window": [
    [
      "xarray/core/nputils.py",
      [
        "_rolling_window"
      ]
    ]
  ],
  "_create_bottleneck_method": [
    [
      "xarray/core/nputils.py",
      [
        "_create_bottleneck_method"
      ]
    ]
  ],
  "_nanpolyfit_1d": [
    [
      "xarray/core/nputils.py",
      [
        "_nanpolyfit_1d"
      ]
    ]
  ],
  "_call_possibly_missing_method": [
    [
      "xarray/core/ops.py",
      [
        "_call_possibly_missing_method"
      ]
    ]
  ],
  "_values_method_wrapper": [
    [
      "xarray/core/ops.py",
      [
        "_values_method_wrapper"
      ]
    ]
  ],
  "_method_wrapper": [
    [
      "xarray/core/ops.py",
      [
        "_method_wrapper"
      ]
    ]
  ],
  "_func_slash_method_wrapper": [
    [
      "xarray/core/ops.py",
      [
        "_func_slash_method_wrapper"
      ]
    ]
  ],
  "inject_reduce_methods": [
    [
      "xarray/core/ops.py",
      [
        "inject_reduce_methods"
      ]
    ]
  ],
  "inject_cum_methods": [
    [
      "xarray/core/ops.py",
      [
        "inject_cum_methods"
      ]
    ]
  ],
  "op_str": [
    [
      "xarray/core/ops.py",
      [
        "op_str"
      ]
    ]
  ],
  "get_op": [
    [
      "xarray/core/ops.py",
      [
        "get_op"
      ]
    ]
  ],
  "inplace_to_noninplace_op": [
    [
      "xarray/core/ops.py",
      [
        "inplace_to_noninplace_op"
      ]
    ]
  ],
  "inject_binary_ops": [
    [
      "xarray/core/ops.py",
      [
        "inject_binary_ops"
      ]
    ]
  ],
  "inject_all_ops_and_reduce_methods": [
    [
      "xarray/core/ops.py",
      [
        "inject_all_ops_and_reduce_methods"
      ]
    ]
  ],
  "_positive_integer": [
    [
      "xarray/core/options.py",
      [
        "_positive_integer"
      ]
    ]
  ],
  "_set_file_cache_maxsize": [
    [
      "xarray/core/options.py",
      [
        "_set_file_cache_maxsize"
      ]
    ]
  ],
  "_warn_on_setting_enable_cftimeindex": [
    [
      "xarray/core/options.py",
      [
        "_warn_on_setting_enable_cftimeindex"
      ]
    ]
  ],
  "_get_keep_attrs": [
    [
      "xarray/core/options.py",
      [
        "_get_keep_attrs"
      ]
    ]
  ],
  "_apply_update": [
    [
      "xarray/core/options.py",
      [
        "set_options",
        "_apply_update"
      ]
    ]
  ],
  "unzip": [
    [
      "xarray/core/parallel.py",
      [
        "unzip"
      ]
    ]
  ],
  "assert_chunks_compatible": [
    [
      "xarray/core/parallel.py",
      [
        "assert_chunks_compatible"
      ]
    ]
  ],
  "check_result_variables": [
    [
      "xarray/core/parallel.py",
      [
        "check_result_variables"
      ]
    ]
  ],
  "dataset_to_dataarray": [
    [
      "xarray/core/parallel.py",
      [
        "dataset_to_dataarray"
      ]
    ]
  ],
  "dataarray_to_dataset": [
    [
      "xarray/core/parallel.py",
      [
        "dataarray_to_dataset"
      ]
    ]
  ],
  "make_meta": [
    [
      "xarray/core/parallel.py",
      [
        "make_meta"
      ]
    ]
  ],
  "infer_template": [
    [
      "xarray/core/parallel.py",
      [
        "infer_template"
      ]
    ]
  ],
  "make_dict": [
    [
      "xarray/core/parallel.py",
      [
        "make_dict"
      ]
    ]
  ],
  "_get_chunk_slicer": [
    [
      "xarray/core/parallel.py",
      [
        "_get_chunk_slicer"
      ]
    ]
  ],
  "_wrapper": [
    [
      "xarray/core/parallel.py",
      [
        "map_blocks",
        "_wrapper"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "quantile",
        "_wrapper"
      ]
    ]
  ],
  "subset_dataset_to_block": [
    [
      "xarray/core/parallel.py",
      [
        "map_blocks",
        "subset_dataset_to_block"
      ]
    ]
  ],
  "count_not_none": [
    [
      "xarray/core/pdcompat.py",
      [
        "count_not_none"
      ]
    ]
  ],
  "_upsample": [
    [
      "xarray/core/resample.py",
      [
        "Resample",
        "_upsample"
      ]
    ]
  ],
  "asfreq": [
    [
      "xarray/core/resample.py",
      [
        "Resample",
        "asfreq"
      ]
    ]
  ],
  "backfill": [
    [
      "xarray/core/resample.py",
      [
        "Resample",
        "backfill"
      ]
    ]
  ],
  "nearest": [
    [
      "xarray/core/resample.py",
      [
        "Resample",
        "nearest"
      ]
    ]
  ],
  "interpolate": [
    [
      "xarray/core/resample.py",
      [
        "Resample",
        "interpolate"
      ]
    ]
  ],
  "_interpolate": [
    [
      "xarray/core/resample.py",
      [
        "Resample",
        "_interpolate"
      ]
    ]
  ],
  "first_items": [
    [
      "xarray/core/resample_cftime.py",
      [
        "CFTimeGrouper",
        "first_items"
      ]
    ]
  ],
  "_get_time_bins": [
    [
      "xarray/core/resample_cftime.py",
      [
        "_get_time_bins"
      ]
    ]
  ],
  "_adjust_bin_edges": [
    [
      "xarray/core/resample_cftime.py",
      [
        "_adjust_bin_edges"
      ]
    ]
  ],
  "_get_range_edges": [
    [
      "xarray/core/resample_cftime.py",
      [
        "_get_range_edges"
      ]
    ]
  ],
  "_adjust_dates_anchored": [
    [
      "xarray/core/resample_cftime.py",
      [
        "_adjust_dates_anchored"
      ]
    ]
  ],
  "exact_cftime_datetime_difference": [
    [
      "xarray/core/resample_cftime.py",
      [
        "exact_cftime_datetime_difference"
      ]
    ]
  ],
  "_min_periods": [
    [
      "xarray/core/rolling.py",
      [
        "Rolling",
        "_min_periods"
      ]
    ]
  ],
  "construct": [
    [
      "xarray/core/rolling.py",
      [
        "DataArrayRolling",
        "construct"
      ]
    ],
    [
      "xarray/core/rolling.py",
      [
        "DatasetRolling",
        "construct"
      ]
    ]
  ],
  "_counts": [
    [
      "xarray/core/rolling.py",
      [
        "DataArrayRolling",
        "_counts"
      ]
    ],
    [
      "xarray/core/rolling.py",
      [
        "DatasetRolling",
        "_counts"
      ]
    ]
  ],
  "_bottleneck_reduce": [
    [
      "xarray/core/rolling.py",
      [
        "DataArrayRolling",
        "_bottleneck_reduce"
      ]
    ]
  ],
  "_numpy_or_bottleneck_reduce": [
    [
      "xarray/core/rolling.py",
      [
        "DataArrayRolling",
        "_numpy_or_bottleneck_reduce"
      ]
    ],
    [
      "xarray/core/rolling.py",
      [
        "DatasetRolling",
        "_numpy_or_bottleneck_reduce"
      ]
    ]
  ],
  "_dataset_implementation": [
    [
      "xarray/core/rolling.py",
      [
        "DatasetRolling",
        "_dataset_implementation"
      ]
    ]
  ],
  "wrapped_func": [
    [
      "xarray/core/rolling.py",
      [
        "DataArrayCoarsen",
        "_reduce_method",
        "wrapped_func"
      ]
    ],
    [
      "xarray/core/rolling.py",
      [
        "DatasetCoarsen",
        "_reduce_method",
        "wrapped_func"
      ]
    ]
  ],
  "_get_alpha": [
    [
      "xarray/core/rolling_exp.py",
      [
        "_get_alpha"
      ]
    ]
  ],
  "move_exp_nanmean": [
    [
      "xarray/core/rolling_exp.py",
      [
        "move_exp_nanmean"
      ]
    ]
  ],
  "_get_center_of_mass": [
    [
      "xarray/core/rolling_exp.py",
      [
        "_get_center_of_mass"
      ]
    ]
  ],
  "_check_inplace": [
    [
      "xarray/core/utils.py",
      [
        "_check_inplace"
      ]
    ]
  ],
  "alias_message": [
    [
      "xarray/core/utils.py",
      [
        "alias_message"
      ]
    ]
  ],
  "alias_warning": [
    [
      "xarray/core/utils.py",
      [
        "alias_warning"
      ]
    ]
  ],
  "alias": [
    [
      "xarray/core/utils.py",
      [
        "alias"
      ]
    ]
  ],
  "_maybe_cast_to_cftimeindex": [
    [
      "xarray/core/utils.py",
      [
        "_maybe_cast_to_cftimeindex"
      ]
    ]
  ],
  "maybe_cast_to_coords_dtype": [
    [
      "xarray/core/utils.py",
      [
        "maybe_cast_to_coords_dtype"
      ]
    ]
  ],
  "safe_cast_to_index": [
    [
      "xarray/core/utils.py",
      [
        "safe_cast_to_index"
      ]
    ]
  ],
  "multiindex_from_product_levels": [
    [
      "xarray/core/utils.py",
      [
        "multiindex_from_product_levels"
      ]
    ]
  ],
  "maybe_wrap_array": [
    [
      "xarray/core/utils.py",
      [
        "maybe_wrap_array"
      ]
    ]
  ],
  "equivalent": [
    [
      "xarray/core/utils.py",
      [
        "equivalent"
      ]
    ]
  ],
  "list_equiv": [
    [
      "xarray/core/utils.py",
      [
        "list_equiv"
      ]
    ]
  ],
  "peek_at": [
    [
      "xarray/core/utils.py",
      [
        "peek_at"
      ]
    ]
  ],
  "update_safety_check": [
    [
      "xarray/core/utils.py",
      [
        "update_safety_check"
      ]
    ]
  ],
  "remove_incompatible_items": [
    [
      "xarray/core/utils.py",
      [
        "remove_incompatible_items"
      ]
    ]
  ],
  "is_dict_like": [
    [
      "xarray/core/utils.py",
      [
        "is_dict_like"
      ]
    ]
  ],
  "is_full_slice": [
    [
      "xarray/core/utils.py",
      [
        "is_full_slice"
      ]
    ]
  ],
  "is_list_like": [
    [
      "xarray/core/utils.py",
      [
        "is_list_like"
      ]
    ]
  ],
  "either_dict_or_kwargs": [
    [
      "xarray/core/utils.py",
      [
        "either_dict_or_kwargs"
      ]
    ]
  ],
  "is_scalar": [
    [
      "xarray/core/utils.py",
      [
        "is_scalar"
      ]
    ]
  ],
  "is_valid_numpy_dtype": [
    [
      "xarray/core/utils.py",
      [
        "is_valid_numpy_dtype"
      ]
    ]
  ],
  "to_0d_object_array": [
    [
      "xarray/core/utils.py",
      [
        "to_0d_object_array"
      ]
    ]
  ],
  "to_0d_array": [
    [
      "xarray/core/utils.py",
      [
        "to_0d_array"
      ]
    ]
  ],
  "dict_equiv": [
    [
      "xarray/core/utils.py",
      [
        "dict_equiv"
      ]
    ]
  ],
  "compat_dict_intersection": [
    [
      "xarray/core/utils.py",
      [
        "compat_dict_intersection"
      ]
    ]
  ],
  "compat_dict_union": [
    [
      "xarray/core/utils.py",
      [
        "compat_dict_union"
      ]
    ]
  ],
  "FrozenDict": [
    [
      "xarray/core/utils.py",
      [
        "FrozenDict"
      ]
    ]
  ],
  "discard": [
    [
      "xarray/core/utils.py",
      [
        "OrderedSet",
        "discard"
      ]
    ]
  ],
  "close_on_error": [
    [
      "xarray/core/utils.py",
      [
        "close_on_error"
      ]
    ]
  ],
  "is_remote_uri": [
    [
      "xarray/core/utils.py",
      [
        "is_remote_uri"
      ]
    ]
  ],
  "is_grib_path": [
    [
      "xarray/core/utils.py",
      [
        "is_grib_path"
      ]
    ]
  ],
  "is_uniform_spaced": [
    [
      "xarray/core/utils.py",
      [
        "is_uniform_spaced"
      ]
    ]
  ],
  "hashable": [
    [
      "xarray/core/utils.py",
      [
        "hashable"
      ]
    ]
  ],
  "not_implemented": [
    [
      "xarray/core/utils.py",
      [
        "not_implemented"
      ]
    ]
  ],
  "decode_numpy_dict_values": [
    [
      "xarray/core/utils.py",
      [
        "decode_numpy_dict_values"
      ]
    ]
  ],
  "ensure_us_time_resolution": [
    [
      "xarray/core/utils.py",
      [
        "ensure_us_time_resolution"
      ]
    ]
  ],
  "_raise_if_hidden": [
    [
      "xarray/core/utils.py",
      [
        "HiddenKeyDict",
        "_raise_if_hidden"
      ]
    ]
  ],
  "infix_dims": [
    [
      "xarray/core/utils.py",
      [
        "infix_dims"
      ]
    ]
  ],
  "get_temp_dimname": [
    [
      "xarray/core/utils.py",
      [
        "get_temp_dimname"
      ]
    ]
  ],
  "drop_dims_from_indexers": [
    [
      "xarray/core/utils.py",
      [
        "drop_dims_from_indexers"
      ]
    ]
  ],
  "as_variable": [
    [
      "xarray/core/variable.py",
      [
        "as_variable"
      ]
    ]
  ],
  "_maybe_wrap_data": [
    [
      "xarray/core/variable.py",
      [
        "_maybe_wrap_data"
      ]
    ]
  ],
  "_possibly_convert_objects": [
    [
      "xarray/core/variable.py",
      [
        "_possibly_convert_objects"
      ]
    ]
  ],
  "as_compatible_data": [
    [
      "xarray/core/variable.py",
      [
        "as_compatible_data"
      ]
    ]
  ],
  "_as_array_or_item": [
    [
      "xarray/core/variable.py",
      [
        "_as_array_or_item"
      ]
    ]
  ],
  "data_5": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "data_5"
      ]
    ]
  ],
  "values_18": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "values_18"
      ]
    ]
  ],
  "to_base_variable": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "to_base_variable"
      ]
    ]
  ],
  "to_index_variable": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "to_index_variable"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "to_index_variable"
      ]
    ]
  ],
  "_parse_dimensions": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_parse_dimensions"
      ]
    ]
  ],
  "_item_key_to_tuple": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_item_key_to_tuple"
      ]
    ]
  ],
  "_broadcast_indexes": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_broadcast_indexes"
      ]
    ]
  ],
  "_broadcast_indexes_basic": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_broadcast_indexes_basic"
      ]
    ]
  ],
  "_broadcast_indexes_outer": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_broadcast_indexes_outer"
      ]
    ]
  ],
  "_nonzero": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_nonzero"
      ]
    ]
  ],
  "_broadcast_indexes_vectorized": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_broadcast_indexes_vectorized"
      ]
    ]
  ],
  "_finalize_indexing_result": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_finalize_indexing_result"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "_finalize_indexing_result"
      ]
    ]
  ],
  "_getitem_with_mask": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_getitem_with_mask"
      ]
    ]
  ],
  "attrs_38": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "attrs_38"
      ]
    ]
  ],
  "encoding_40": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "encoding_40"
      ]
    ]
  ],
  "_as_sparse": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_as_sparse"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "_as_sparse"
      ]
    ]
  ],
  "_to_dense": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_to_dense"
      ]
    ],
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "_to_dense"
      ]
    ]
  ],
  "_shift_one_dim": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_shift_one_dim"
      ]
    ]
  ],
  "_pad_options_dim_to_index": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_pad_options_dim_to_index"
      ]
    ]
  ],
  "_roll_one_dim": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_roll_one_dim"
      ]
    ]
  ],
  "set_dims": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "set_dims"
      ]
    ]
  ],
  "no_conflicts": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "no_conflicts"
      ]
    ]
  ],
  "_coarsen_reshape": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_coarsen_reshape"
      ]
    ]
  ],
  "_to_numeric": [
    [
      "xarray/core/variable.py",
      [
        "Variable",
        "_to_numeric"
      ]
    ]
  ],
  "_data_equals": [
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "_data_equals"
      ]
    ]
  ],
  "level_names": [
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "level_names"
      ]
    ]
  ],
  "get_level_variable": [
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "get_level_variable"
      ]
    ]
  ],
  "name_18": [
    [
      "xarray/core/variable.py",
      [
        "IndexVariable",
        "name_18"
      ]
    ]
  ],
  "_unified_dims": [
    [
      "xarray/core/variable.py",
      [
        "_unified_dims"
      ]
    ]
  ],
  "_broadcast_compat_variables": [
    [
      "xarray/core/variable.py",
      [
        "_broadcast_compat_variables"
      ]
    ]
  ],
  "broadcast_variables": [
    [
      "xarray/core/variable.py",
      [
        "broadcast_variables"
      ]
    ]
  ],
  "_broadcast_compat_data": [
    [
      "xarray/core/variable.py",
      [
        "_broadcast_compat_data"
      ]
    ]
  ],
  "assert_unique_multiindex_level_names": [
    [
      "xarray/core/variable.py",
      [
        "assert_unique_multiindex_level_names"
      ]
    ]
  ],
  "_reduce": [
    [
      "xarray/core/weighted.py",
      [
        "Weighted",
        "_reduce"
      ]
    ]
  ],
  "_sum_of_weights": [
    [
      "xarray/core/weighted.py",
      [
        "Weighted",
        "_sum_of_weights"
      ]
    ]
  ],
  "_weighted_sum": [
    [
      "xarray/core/weighted.py",
      [
        "Weighted",
        "_weighted_sum"
      ]
    ]
  ],
  "_weighted_mean": [
    [
      "xarray/core/weighted.py",
      [
        "Weighted",
        "_weighted_mean"
      ]
    ]
  ],
  "_implementation": [
    [
      "xarray/core/weighted.py",
      [
        "Weighted",
        "_implementation"
      ]
    ],
    [
      "xarray/core/weighted.py",
      [
        "DataArrayWeighted",
        "_implementation"
      ]
    ],
    [
      "xarray/core/weighted.py",
      [
        "DatasetWeighted",
        "_implementation"
      ]
    ]
  ],
  "sum_of_weights": [
    [
      "xarray/core/weighted.py",
      [
        "Weighted",
        "sum_of_weights"
      ]
    ]
  ],
  "sum": [
    [
      "xarray/core/weighted.py",
      [
        "Weighted",
        "sum"
      ]
    ]
  ],
  "_inject_docstring": [
    [
      "xarray/core/weighted.py",
      [
        "_inject_docstring"
      ]
    ]
  ],
  "_infer_meta_data": [
    [
      "xarray/plot/dataset_plot.py",
      [
        "_infer_meta_data"
      ]
    ]
  ],
  "_infer_scatter_data": [
    [
      "xarray/plot/dataset_plot.py",
      [
        "_infer_scatter_data"
      ]
    ]
  ],
  "_parse_size": [
    [
      "xarray/plot/dataset_plot.py",
      [
        "_parse_size"
      ]
    ]
  ],
  "newplotfunc": [
    [
      "xarray/plot/dataset_plot.py",
      [
        "_dsplot",
        "newplotfunc"
      ]
    ],
    [
      "xarray/plot/plot.py",
      [
        "_plot2d",
        "newplotfunc"
      ]
    ]
  ],
  "plotmethod": [
    [
      "xarray/plot/dataset_plot.py",
      [
        "_dsplot",
        "plotmethod"
      ]
    ],
    [
      "xarray/plot/plot.py",
      [
        "_plot2d",
        "plotmethod"
      ]
    ]
  ],
  "_dsplot": [
    [
      "xarray/plot/dataset_plot.py",
      [
        "_dsplot"
      ]
    ]
  ],
  "scatter": [
    [
      "xarray/plot/dataset_plot.py",
      [
        "scatter"
      ]
    ]
  ],
  "_nicetitle": [
    [
      "xarray/plot/facetgrid.py",
      [
        "_nicetitle"
      ]
    ]
  ],
  "_left_axes": [
    [
      "xarray/plot/facetgrid.py",
      [
        "FacetGrid",
        "_left_axes"
      ]
    ]
  ],
  "_bottom_axes": [
    [
      "xarray/plot/facetgrid.py",
      [
        "FacetGrid",
        "_bottom_axes"
      ]
    ]
  ],
  "map_dataarray": [
    [
      "xarray/plot/facetgrid.py",
      [
        "FacetGrid",
        "map_dataarray"
      ]
    ]
  ],
  "map_dataarray_line": [
    [
      "xarray/plot/facetgrid.py",
      [
        "FacetGrid",
        "map_dataarray_line"
      ]
    ]
  ],
  "map_dataset": [
    [
      "xarray/plot/facetgrid.py",
      [
        "FacetGrid",
        "map_dataset"
      ]
    ]
  ],
  "_finalize_grid": [
    [
      "xarray/plot/facetgrid.py",
      [
        "FacetGrid",
        "_finalize_grid"
      ]
    ]
  ],
  "add_legend": [
    [
      "xarray/plot/facetgrid.py",
      [
        "FacetGrid",
        "add_legend"
      ]
    ]
  ],
  "add_colorbar": [
    [
      "xarray/plot/facetgrid.py",
      [
        "FacetGrid",
        "add_colorbar"
      ]
    ]
  ],
  "set_axis_labels": [
    [
      "xarray/plot/facetgrid.py",
      [
        "FacetGrid",
        "set_axis_labels"
      ]
    ]
  ],
  "set_xlabels": [
    [
      "xarray/plot/facetgrid.py",
      [
        "FacetGrid",
        "set_xlabels"
      ]
    ]
  ],
  "set_ylabels": [
    [
      "xarray/plot/facetgrid.py",
      [
        "FacetGrid",
        "set_ylabels"
      ]
    ]
  ],
  "set_titles": [
    [
      "xarray/plot/facetgrid.py",
      [
        "FacetGrid",
        "set_titles"
      ]
    ]
  ],
  "set_ticks": [
    [
      "xarray/plot/facetgrid.py",
      [
        "FacetGrid",
        "set_ticks"
      ]
    ]
  ],
  "_easy_facetgrid": [
    [
      "xarray/plot/facetgrid.py",
      [
        "_easy_facetgrid"
      ]
    ]
  ],
  "_infer_line_data": [
    [
      "xarray/plot/plot.py",
      [
        "_infer_line_data"
      ]
    ]
  ],
  "line": [
    [
      "xarray/plot/plot.py",
      [
        "line"
      ]
    ],
    [
      "xarray/plot/plot.py",
      [
        "_PlotMethods",
        "line"
      ]
    ]
  ],
  "step": [
    [
      "xarray/plot/plot.py",
      [
        "step"
      ]
    ],
    [
      "xarray/plot/plot.py",
      [
        "_PlotMethods",
        "step"
      ]
    ]
  ],
  "hist": [
    [
      "xarray/plot/plot.py",
      [
        "hist"
      ]
    ],
    [
      "xarray/plot/plot.py",
      [
        "_PlotMethods",
        "hist"
      ]
    ]
  ],
  "_plot2d": [
    [
      "xarray/plot/plot.py",
      [
        "_plot2d"
      ]
    ]
  ],
  "imshow": [
    [
      "xarray/plot/plot.py",
      [
        "imshow"
      ]
    ]
  ],
  "contour": [
    [
      "xarray/plot/plot.py",
      [
        "contour"
      ]
    ]
  ],
  "contourf": [
    [
      "xarray/plot/plot.py",
      [
        "contourf"
      ]
    ]
  ],
  "pcolormesh": [
    [
      "xarray/plot/plot.py",
      [
        "pcolormesh"
      ]
    ]
  ],
  "register_pandas_datetime_converter_if_needed": [
    [
      "xarray/plot/utils.py",
      [
        "register_pandas_datetime_converter_if_needed"
      ]
    ]
  ],
  "import_matplotlib_pyplot": [
    [
      "xarray/plot/utils.py",
      [
        "import_matplotlib_pyplot"
      ]
    ]
  ],
  "_determine_extend": [
    [
      "xarray/plot/utils.py",
      [
        "_determine_extend"
      ]
    ]
  ],
  "_build_discrete_cmap": [
    [
      "xarray/plot/utils.py",
      [
        "_build_discrete_cmap"
      ]
    ]
  ],
  "_color_palette": [
    [
      "xarray/plot/utils.py",
      [
        "_color_palette"
      ]
    ]
  ],
  "_determine_cmap_params": [
    [
      "xarray/plot/utils.py",
      [
        "_determine_cmap_params"
      ]
    ]
  ],
  "_infer_xy_labels_3d": [
    [
      "xarray/plot/utils.py",
      [
        "_infer_xy_labels_3d"
      ]
    ]
  ],
  "_infer_xy_labels": [
    [
      "xarray/plot/utils.py",
      [
        "_infer_xy_labels"
      ]
    ]
  ],
  "_assert_valid_xy": [
    [
      "xarray/plot/utils.py",
      [
        "_assert_valid_xy"
      ]
    ]
  ],
  "get_axis": [
    [
      "xarray/plot/utils.py",
      [
        "get_axis"
      ]
    ]
  ],
  "label_from_attrs": [
    [
      "xarray/plot/utils.py",
      [
        "label_from_attrs"
      ]
    ]
  ],
  "_interval_to_mid_points": [
    [
      "xarray/plot/utils.py",
      [
        "_interval_to_mid_points"
      ]
    ]
  ],
  "_interval_to_bound_points": [
    [
      "xarray/plot/utils.py",
      [
        "_interval_to_bound_points"
      ]
    ]
  ],
  "_interval_to_double_bound_points": [
    [
      "xarray/plot/utils.py",
      [
        "_interval_to_double_bound_points"
      ]
    ]
  ],
  "_resolve_intervals_1dplot": [
    [
      "xarray/plot/utils.py",
      [
        "_resolve_intervals_1dplot"
      ]
    ]
  ],
  "_resolve_intervals_2dplot": [
    [
      "xarray/plot/utils.py",
      [
        "_resolve_intervals_2dplot"
      ]
    ]
  ],
  "_valid_other_type": [
    [
      "xarray/plot/utils.py",
      [
        "_valid_other_type"
      ]
    ]
  ],
  "_valid_numpy_subdtype": [
    [
      "xarray/plot/utils.py",
      [
        "_valid_numpy_subdtype"
      ]
    ]
  ],
  "_ensure_plottable": [
    [
      "xarray/plot/utils.py",
      [
        "_ensure_plottable"
      ]
    ]
  ],
  "_is_numeric": [
    [
      "xarray/plot/utils.py",
      [
        "_is_numeric"
      ]
    ]
  ],
  "_add_colorbar": [
    [
      "xarray/plot/utils.py",
      [
        "_add_colorbar"
      ]
    ]
  ],
  "_rescale_imshow_rgb": [
    [
      "xarray/plot/utils.py",
      [
        "_rescale_imshow_rgb"
      ]
    ]
  ],
  "_update_axes": [
    [
      "xarray/plot/utils.py",
      [
        "_update_axes"
      ]
    ]
  ],
  "_is_monotonic": [
    [
      "xarray/plot/utils.py",
      [
        "_is_monotonic"
      ]
    ]
  ],
  "_infer_interval_breaks": [
    [
      "xarray/plot/utils.py",
      [
        "_infer_interval_breaks"
      ]
    ]
  ],
  "_process_cmap_cbar_kwargs": [
    [
      "xarray/plot/utils.py",
      [
        "_process_cmap_cbar_kwargs"
      ]
    ]
  ],
  "_decode_string_data": [
    [
      "xarray/testing.py",
      [
        "_decode_string_data"
      ]
    ]
  ],
  "_data_allclose_or_equiv": [
    [
      "xarray/testing.py",
      [
        "_data_allclose_or_equiv"
      ]
    ]
  ],
  "assert_equal": [
    [
      "xarray/testing.py",
      [
        "assert_equal"
      ]
    ],
    [
      "xarray/tests/__init__.py",
      [
        "assert_equal"
      ]
    ]
  ],
  "assert_identical": [
    [
      "xarray/testing.py",
      [
        "assert_identical"
      ]
    ],
    [
      "xarray/tests/__init__.py",
      [
        "assert_identical"
      ]
    ],
    [
      "xarray/tests/test_computation.py",
      [
        "assert_identical"
      ]
    ],
    [
      "xarray/tests/test_ufuncs.py",
      [
        "assert_identical"
      ]
    ]
  ],
  "compat_variable": [
    [
      "xarray/testing.py",
      [
        "assert_allclose",
        "compat_variable"
      ]
    ]
  ],
  "assert_allclose": [
    [
      "xarray/testing.py",
      [
        "assert_allclose"
      ]
    ],
    [
      "xarray/tests/__init__.py",
      [
        "assert_allclose"
      ]
    ]
  ],
  "assert_chunks_equal": [
    [
      "xarray/testing.py",
      [
        "assert_chunks_equal"
      ]
    ]
  ],
  "_assert_indexes_invariants_checks": [
    [
      "xarray/testing.py",
      [
        "_assert_indexes_invariants_checks"
      ]
    ]
  ],
  "_assert_variable_invariants": [
    [
      "xarray/testing.py",
      [
        "_assert_variable_invariants"
      ]
    ]
  ],
  "_assert_dataarray_invariants": [
    [
      "xarray/testing.py",
      [
        "_assert_dataarray_invariants"
      ]
    ]
  ],
  "_assert_dataset_invariants": [
    [
      "xarray/testing.py",
      [
        "_assert_dataset_invariants"
      ]
    ]
  ],
  "_assert_internal_invariants": [
    [
      "xarray/testing.py",
      [
        "_assert_internal_invariants"
      ]
    ]
  ],
  "_importorskip": [
    [
      "xarray/tests/__init__.py",
      [
        "_importorskip"
      ]
    ]
  ],
  "LooseVersion": [
    [
      "xarray/tests/__init__.py",
      [
        "LooseVersion"
      ]
    ]
  ],
  "raises_regex": [
    [
      "xarray/tests/__init__.py",
      [
        "raises_regex"
      ]
    ]
  ],
  "source_ndarray": [
    [
      "xarray/tests/__init__.py",
      [
        "source_ndarray"
      ]
    ]
  ],
  "test_field_access": [
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "TestDatetimeAccessor",
        "test_field_access"
      ]
    ],
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "TestTimedeltaAccessor",
        "test_field_access"
      ]
    ],
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "test_field_access"
      ]
    ]
  ],
  "test_strftime": [
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "TestDatetimeAccessor",
        "test_strftime"
      ]
    ]
  ],
  "test_not_datetime_type": [
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "TestDatetimeAccessor",
        "test_not_datetime_type"
      ]
    ],
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "TestTimedeltaAccessor",
        "test_not_datetime_type"
      ]
    ]
  ],
  "test_dask_field_access": [
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "TestDatetimeAccessor",
        "test_dask_field_access"
      ]
    ],
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "TestTimedeltaAccessor",
        "test_dask_field_access"
      ]
    ],
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "test_dask_field_access"
      ]
    ]
  ],
  "test_dask_accessor_method": [
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "TestDatetimeAccessor",
        "test_dask_accessor_method"
      ]
    ],
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "TestTimedeltaAccessor",
        "test_dask_accessor_method"
      ]
    ]
  ],
  "test_seasons": [
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "TestDatetimeAccessor",
        "test_seasons"
      ]
    ],
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "test_seasons"
      ]
    ]
  ],
  "test_accessor_method": [
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "TestDatetimeAccessor",
        "test_accessor_method"
      ]
    ]
  ],
  "test_accessor_methods": [
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "TestTimedeltaAccessor",
        "test_accessor_methods"
      ]
    ]
  ],
  "calendar": [
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "calendar"
      ]
    ],
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "calendar"
      ]
    ],
    [
      "xarray/tests/test_coding_times.py",
      [
        "calendar"
      ]
    ]
  ],
  "times": [
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "times"
      ]
    ],
    [
      "xarray/tests/test_coding_times.py",
      [
        "times"
      ]
    ]
  ],
  "times_3d": [
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "times_3d"
      ]
    ],
    [
      "xarray/tests/test_coding_times.py",
      [
        "times_3d"
      ]
    ]
  ],
  "test_cftime_strftime_access": [
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "test_cftime_strftime_access"
      ]
    ]
  ],
  "test_dask_field_access_1d": [
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "test_dask_field_access_1d"
      ]
    ]
  ],
  "cftime_date_type": [
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "cftime_date_type"
      ]
    ]
  ],
  "cftime_rounding_dataarray": [
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "cftime_rounding_dataarray"
      ]
    ]
  ],
  "test_cftime_floor_accessor": [
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "test_cftime_floor_accessor"
      ]
    ]
  ],
  "test_cftime_ceil_accessor": [
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "test_cftime_ceil_accessor"
      ]
    ]
  ],
  "test_cftime_round_accessor": [
    [
      "xarray/tests/test_accessor_dt.py",
      [
        "test_cftime_round_accessor"
      ]
    ]
  ],
  "test_dask": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_dask"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestPydap",
        "test_dask"
      ]
    ]
  ],
  "test_count": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_count"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_count"
      ]
    ],
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "TestOps",
        "test_count"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_count"
      ]
    ]
  ],
  "test_contains": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_contains"
      ]
    ],
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_contains"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_contains"
      ]
    ]
  ],
  "test_starts_ends_with": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_starts_ends_with"
      ]
    ]
  ],
  "test_case": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_case"
      ]
    ]
  ],
  "test_replace": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_replace"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_replace"
      ]
    ]
  ],
  "test_replace_callable": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_replace_callable"
      ]
    ]
  ],
  "test_replace_unicode": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_replace_unicode"
      ]
    ]
  ],
  "test_replace_compiled_regex": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_replace_compiled_regex"
      ]
    ]
  ],
  "test_replace_literal": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_replace_literal"
      ]
    ]
  ],
  "test_repeat": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_repeat"
      ]
    ]
  ],
  "test_match": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_match"
      ]
    ]
  ],
  "test_empty_str_methods": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_empty_str_methods"
      ]
    ]
  ],
  "test_ismethods": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_ismethods"
      ]
    ]
  ],
  "test_isnumeric": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_isnumeric"
      ]
    ]
  ],
  "test_len": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_len"
      ]
    ]
  ],
  "test_find": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_find"
      ]
    ]
  ],
  "test_index": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_index"
      ]
    ]
  ],
  "test_pad": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_pad"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_pad"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_pad"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_pad"
      ]
    ]
  ],
  "test_pad_fillchar": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_pad_fillchar"
      ]
    ]
  ],
  "test_translate": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_translate"
      ]
    ]
  ],
  "test_center_ljust_rjust": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_center_ljust_rjust"
      ]
    ]
  ],
  "test_center_ljust_rjust_fillchar": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_center_ljust_rjust_fillchar"
      ]
    ]
  ],
  "test_zfill": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_zfill"
      ]
    ]
  ],
  "test_slice": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_slice"
      ]
    ]
  ],
  "test_slice_replace": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_slice_replace"
      ]
    ]
  ],
  "test_strip_lstrip_rstrip": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_strip_lstrip_rstrip"
      ]
    ]
  ],
  "test_strip_lstrip_rstrip_args": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_strip_lstrip_rstrip_args"
      ]
    ]
  ],
  "test_wrap": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_wrap"
      ]
    ]
  ],
  "test_get": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_get"
      ]
    ]
  ],
  "test_encode_decode": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_encode_decode"
      ]
    ]
  ],
  "test_encode_decode_errors": [
    [
      "xarray/tests/test_accessor_str.py",
      [
        "test_encode_decode_errors"
      ]
    ]
  ],
  "open_example_dataset": [
    [
      "xarray/tests/test_backends.py",
      [
        "open_example_dataset"
      ]
    ]
  ],
  "open_example_mfdataset": [
    [
      "xarray/tests/test_backends.py",
      [
        "open_example_mfdataset"
      ]
    ]
  ],
  "create_masked_and_scaled_data": [
    [
      "xarray/tests/test_backends.py",
      [
        "create_masked_and_scaled_data"
      ]
    ]
  ],
  "create_encoded_masked_and_scaled_data": [
    [
      "xarray/tests/test_backends.py",
      [
        "create_encoded_masked_and_scaled_data"
      ]
    ]
  ],
  "create_unsigned_masked_scaled_data": [
    [
      "xarray/tests/test_backends.py",
      [
        "create_unsigned_masked_scaled_data"
      ]
    ]
  ],
  "create_encoded_unsigned_masked_scaled_data": [
    [
      "xarray/tests/test_backends.py",
      [
        "create_encoded_unsigned_masked_scaled_data"
      ]
    ]
  ],
  "create_bad_unsigned_masked_scaled_data": [
    [
      "xarray/tests/test_backends.py",
      [
        "create_bad_unsigned_masked_scaled_data"
      ]
    ]
  ],
  "create_bad_encoded_unsigned_masked_scaled_data": [
    [
      "xarray/tests/test_backends.py",
      [
        "create_bad_encoded_unsigned_masked_scaled_data"
      ]
    ]
  ],
  "create_signed_masked_scaled_data": [
    [
      "xarray/tests/test_backends.py",
      [
        "create_signed_masked_scaled_data"
      ]
    ]
  ],
  "create_encoded_signed_masked_scaled_data": [
    [
      "xarray/tests/test_backends.py",
      [
        "create_encoded_signed_masked_scaled_data"
      ]
    ]
  ],
  "create_boolean_data": [
    [
      "xarray/tests/test_backends.py",
      [
        "create_boolean_data"
      ]
    ]
  ],
  "test_robust_getitem": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestCommon",
        "test_robust_getitem"
      ]
    ],
    [
      "xarray/tests/test_backends_common.py",
      [
        "test_robust_getitem"
      ]
    ]
  ],
  "test_dtype_coercion_error": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF3Only",
        "test_dtype_coercion_error"
      ]
    ]
  ],
  "create_store": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "create_store"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestNetCDF4Data",
        "create_store"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "create_store"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestScipyInMemoryData",
        "create_store"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestScipyFileObject",
        "create_store"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestScipyFilePath",
        "create_store"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestNetCDF3ViaNetCDF4Data",
        "create_store"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestNetCDF4ClassicViaNetCDF4Data",
        "create_store"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestH5NetCDFData",
        "create_store"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "create_store"
      ]
    ],
    [
      "xarray/tests/test_conventions.py",
      [
        "TestCFEncodedDataStore",
        "create_store"
      ]
    ]
  ],
  "roundtrip": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "roundtrip"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestNetCDF4ViaDaskData",
        "roundtrip"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "roundtrip"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestScipyFileObject",
        "roundtrip"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestH5NetCDFViaDaskData",
        "roundtrip"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "roundtrip"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestPseudoNetCDFFormat",
        "roundtrip"
      ]
    ],
    [
      "xarray/tests/test_conventions.py",
      [
        "TestCFEncodedDataStore",
        "roundtrip"
      ]
    ]
  ],
  "roundtrip_append": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "roundtrip_append"
      ]
    ]
  ],
  "save": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "save"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "save"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestPyNio",
        "save"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestPseudoNetCDFFormat",
        "save"
      ]
    ]
  ],
  "test_zero_dimensional_variable": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_zero_dimensional_variable"
      ]
    ]
  ],
  "test_write_store": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_write_store"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestGenericNetCDFData",
        "test_write_store"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_write_store"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestPyNio",
        "test_write_store"
      ]
    ]
  ],
  "check_dtypes_roundtripped": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "check_dtypes_roundtripped"
      ]
    ]
  ],
  "test_roundtrip_test_data": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_roundtrip_test_data"
      ]
    ]
  ],
  "assert_loads": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_load",
        "assert_loads"
      ]
    ]
  ],
  "test_load": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_load"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_load"
      ]
    ]
  ],
  "test_dataset_compute": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_dataset_compute"
      ]
    ]
  ],
  "test_pickle": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_pickle"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestScipyFileObject",
        "test_pickle"
      ]
    ],
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_pickle"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_pickle"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_pickle"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseVariable",
        "test_pickle"
      ]
    ]
  ],
  "test_pickle_dataarray": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_pickle_dataarray"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestScipyFileObject",
        "test_pickle_dataarray"
      ]
    ],
    [
      "xarray/tests/test_extensions.py",
      [
        "TestAccessor",
        "test_pickle_dataarray"
      ]
    ]
  ],
  "test_dataset_caching": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_dataset_caching"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestNetCDF4ViaDaskData",
        "test_dataset_caching"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_dataset_caching"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestH5NetCDFViaDaskData",
        "test_dataset_caching"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_dataset_caching"
      ]
    ]
  ],
  "test_roundtrip_None_variable": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_roundtrip_None_variable"
      ]
    ]
  ],
  "test_roundtrip_object_dtype": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_roundtrip_object_dtype"
      ]
    ]
  ],
  "test_roundtrip_string_data": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_roundtrip_string_data"
      ]
    ]
  ],
  "test_roundtrip_string_encoded_characters": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_roundtrip_string_encoded_characters"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_roundtrip_string_encoded_characters"
      ]
    ]
  ],
  "test_roundtrip_numpy_datetime_data": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_roundtrip_numpy_datetime_data"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_roundtrip_numpy_datetime_data"
      ]
    ]
  ],
  "test_roundtrip_cftime_datetime_data": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_roundtrip_cftime_datetime_data"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_roundtrip_cftime_datetime_data"
      ]
    ]
  ],
  "test_roundtrip_timedelta_data": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_roundtrip_timedelta_data"
      ]
    ]
  ],
  "test_roundtrip_float64_data": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_roundtrip_float64_data"
      ]
    ]
  ],
  "test_roundtrip_example_1_netcdf": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_roundtrip_example_1_netcdf"
      ]
    ]
  ],
  "test_roundtrip_coordinates": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_roundtrip_coordinates"
      ]
    ],
    [
      "xarray/tests/test_conventions.py",
      [
        "TestCFEncodedDataStore",
        "test_roundtrip_coordinates"
      ]
    ]
  ],
  "test_roundtrip_global_coordinates": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_roundtrip_global_coordinates"
      ]
    ]
  ],
  "test_roundtrip_coordinates_with_space": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_roundtrip_coordinates_with_space"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_roundtrip_coordinates_with_space"
      ]
    ]
  ],
  "test_roundtrip_boolean_dtype": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_roundtrip_boolean_dtype"
      ]
    ]
  ],
  "test_orthogonal_indexing": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_orthogonal_indexing"
      ]
    ]
  ],
  "multiple_indexing": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_vectorized_indexing",
        "multiple_indexing"
      ]
    ]
  ],
  "test_vectorized_indexing": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_vectorized_indexing"
      ]
    ]
  ],
  "test_isel_dataarray": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_isel_dataarray"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_isel_dataarray"
      ]
    ]
  ],
  "validate_array_type": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "validate_array_type"
      ]
    ]
  ],
  "test_array_type_after_indexing": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_array_type_after_indexing"
      ]
    ]
  ],
  "test_dropna": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_dropna"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_dropna"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_dropna"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_dropna"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_dropna"
      ]
    ]
  ],
  "test_ondisk_after_print": [
    [
      "xarray/tests/test_backends.py",
      [
        "DatasetIOBase",
        "test_ondisk_after_print"
      ]
    ]
  ],
  "test_roundtrip_bytes_with_fill_value": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_roundtrip_bytes_with_fill_value"
      ]
    ]
  ],
  "test_roundtrip_string_with_fill_value_nchar": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_roundtrip_string_with_fill_value_nchar"
      ]
    ]
  ],
  "test_roundtrip_mask_and_scale": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_roundtrip_mask_and_scale"
      ]
    ]
  ],
  "equals_latlon": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_coordinates_encoding",
        "equals_latlon"
      ]
    ]
  ],
  "test_coordinates_encoding": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_coordinates_encoding"
      ]
    ]
  ],
  "test_roundtrip_endian": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_roundtrip_endian"
      ]
    ]
  ],
  "test_invalid_dataarray_names_raise": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_invalid_dataarray_names_raise"
      ]
    ],
    [
      "xarray/tests/test_conventions.py",
      [
        "TestCFEncodedDataStore",
        "test_invalid_dataarray_names_raise"
      ]
    ]
  ],
  "test_encoding_kwarg": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_encoding_kwarg"
      ]
    ],
    [
      "xarray/tests/test_conventions.py",
      [
        "TestCFEncodedDataStore",
        "test_encoding_kwarg"
      ]
    ]
  ],
  "test_encoding_kwarg_dates": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_encoding_kwarg_dates"
      ]
    ]
  ],
  "test_encoding_kwarg_fixed_width_string": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_encoding_kwarg_fixed_width_string"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_encoding_kwarg_fixed_width_string"
      ]
    ],
    [
      "xarray/tests/test_conventions.py",
      [
        "TestCFEncodedDataStore",
        "test_encoding_kwarg_fixed_width_string"
      ]
    ]
  ],
  "test_default_fill_value": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_default_fill_value"
      ]
    ]
  ],
  "test_explicitly_omit_fill_value": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_explicitly_omit_fill_value"
      ]
    ]
  ],
  "test_explicitly_omit_fill_value_via_encoding_kwarg": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_explicitly_omit_fill_value_via_encoding_kwarg"
      ]
    ]
  ],
  "test_explicitly_omit_fill_value_in_coord": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_explicitly_omit_fill_value_in_coord"
      ]
    ]
  ],
  "test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_explicitly_omit_fill_value_in_coord_via_encoding_kwarg"
      ]
    ]
  ],
  "test_encoding_same_dtype": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_encoding_same_dtype"
      ]
    ]
  ],
  "test_append_write": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_append_write"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_append_write"
      ]
    ]
  ],
  "test_append_overwrite_values": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_append_overwrite_values"
      ]
    ]
  ],
  "test_append_with_invalid_dim_raises": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_append_with_invalid_dim_raises"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_append_with_invalid_dim_raises"
      ]
    ]
  ],
  "test_multiindex_not_implemented": [
    [
      "xarray/tests/test_backends.py",
      [
        "CFEncodedBase",
        "test_multiindex_not_implemented"
      ]
    ]
  ],
  "create_tmp_file": [
    [
      "xarray/tests/test_backends.py",
      [
        "create_tmp_file"
      ]
    ]
  ],
  "create_tmp_files": [
    [
      "xarray/tests/test_backends.py",
      [
        "create_tmp_files"
      ]
    ]
  ],
  "test_open_group": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF4Base",
        "test_open_group"
      ]
    ]
  ],
  "test_open_subgroup": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF4Base",
        "test_open_subgroup"
      ]
    ]
  ],
  "test_write_groups": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF4Base",
        "test_write_groups"
      ]
    ]
  ],
  "test_encoding_kwarg_vlen_string": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF4Base",
        "test_encoding_kwarg_vlen_string"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestNetCDF3ViaNetCDF4Data",
        "test_encoding_kwarg_vlen_string"
      ]
    ]
  ],
  "test_roundtrip_string_with_fill_value_vlen": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF4Base",
        "test_roundtrip_string_with_fill_value_vlen"
      ]
    ]
  ],
  "test_roundtrip_character_array": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF4Base",
        "test_roundtrip_character_array"
      ]
    ]
  ],
  "test_default_to_char_arrays": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF4Base",
        "test_default_to_char_arrays"
      ]
    ]
  ],
  "test_open_encodings": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF4Base",
        "test_open_encodings"
      ]
    ]
  ],
  "test_dump_encodings": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF4Base",
        "test_dump_encodings"
      ]
    ]
  ],
  "test_dump_and_open_encodings": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF4Base",
        "test_dump_and_open_encodings"
      ]
    ]
  ],
  "test_compression_encoding": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF4Base",
        "test_compression_encoding"
      ]
    ]
  ],
  "test_encoding_kwarg_compression": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF4Base",
        "test_encoding_kwarg_compression"
      ]
    ]
  ],
  "test_keep_chunksizes_if_no_original_shape": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF4Base",
        "test_keep_chunksizes_if_no_original_shape"
      ]
    ]
  ],
  "test_encoding_chunksizes_unlimited": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF4Base",
        "test_encoding_chunksizes_unlimited"
      ]
    ]
  ],
  "test_mask_and_scale": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF4Base",
        "test_mask_and_scale"
      ]
    ]
  ],
  "test_0dimensional_variable": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF4Base",
        "test_0dimensional_variable"
      ]
    ]
  ],
  "test_read_variable_len_strings": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF4Base",
        "test_read_variable_len_strings"
      ]
    ]
  ],
  "test_encoding_unlimited_dims": [
    [
      "xarray/tests/test_backends.py",
      [
        "NetCDF4Base",
        "test_encoding_unlimited_dims"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestGenericNetCDFData",
        "test_encoding_unlimited_dims"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestH5NetCDFData",
        "test_encoding_unlimited_dims"
      ]
    ]
  ],
  "test_variable_order": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestNetCDF4Data",
        "test_variable_order"
      ]
    ]
  ],
  "test_unsorted_index_raises": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestNetCDF4Data",
        "test_unsorted_index_raises"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestNetCDF4ViaDaskData",
        "test_unsorted_index_raises"
      ]
    ]
  ],
  "test_setncattr_string": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestNetCDF4Data",
        "test_setncattr_string"
      ]
    ]
  ],
  "test_autoclose_future_warning": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestNetCDF4Data",
        "test_autoclose_future_warning"
      ]
    ]
  ],
  "test_already_open_dataset": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestNetCDF4Data",
        "test_already_open_dataset"
      ]
    ]
  ],
  "test_already_open_dataset_group": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestNetCDF4Data",
        "test_already_open_dataset_group"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestH5NetCDFData",
        "test_already_open_dataset_group"
      ]
    ]
  ],
  "test_write_inconsistent_chunks": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestNetCDF4ViaDaskData",
        "test_write_inconsistent_chunks"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestH5NetCDFViaDaskData",
        "test_write_inconsistent_chunks"
      ]
    ]
  ],
  "test_roundtrip_consolidated": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_roundtrip_consolidated"
      ]
    ]
  ],
  "test_auto_chunk": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_auto_chunk"
      ]
    ]
  ],
  "test_manual_chunk": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_manual_chunk"
      ]
    ]
  ],
  "test_warning_on_bad_chunks": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_warning_on_bad_chunks"
      ]
    ]
  ],
  "test_deprecate_auto_chunk": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_deprecate_auto_chunk"
      ]
    ]
  ],
  "test_write_uneven_dask_chunks": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_write_uneven_dask_chunks"
      ]
    ]
  ],
  "test_chunk_encoding": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_chunk_encoding"
      ]
    ]
  ],
  "test_chunk_encoding_with_dask": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_chunk_encoding_with_dask"
      ]
    ]
  ],
  "test_hidden_zarr_keys": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_hidden_zarr_keys"
      ]
    ]
  ],
  "test_write_persistence_modes": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_write_persistence_modes"
      ]
    ]
  ],
  "test_compressor_encoding": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_compressor_encoding"
      ]
    ]
  ],
  "test_group": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_group"
      ]
    ]
  ],
  "test_append_with_no_dims_raises": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_append_with_no_dims_raises"
      ]
    ]
  ],
  "test_append_with_append_dim_not_set_raises": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_append_with_append_dim_not_set_raises"
      ]
    ]
  ],
  "test_append_with_mode_not_a_raises": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_append_with_mode_not_a_raises"
      ]
    ]
  ],
  "test_append_with_existing_encoding_raises": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_append_with_existing_encoding_raises"
      ]
    ]
  ],
  "test_check_encoding_is_consistent_after_append": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_check_encoding_is_consistent_after_append"
      ]
    ]
  ],
  "test_append_with_new_variable": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_append_with_new_variable"
      ]
    ]
  ],
  "test_to_zarr_compute_false_roundtrip": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_to_zarr_compute_false_roundtrip"
      ]
    ]
  ],
  "test_to_zarr_append_compute_false_roundtrip": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_to_zarr_append_compute_false_roundtrip"
      ]
    ]
  ],
  "test_encoding_chunksizes": [
    [
      "xarray/tests/test_backends.py",
      [
        "ZarrBase",
        "test_encoding_chunksizes"
      ]
    ]
  ],
  "create_zarr_target": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestZarrDictStore",
        "create_zarr_target"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestZarrDirectoryStore",
        "create_zarr_target"
      ]
    ]
  ],
  "test_to_netcdf_explicit_engine": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestScipyInMemoryData",
        "test_to_netcdf_explicit_engine"
      ]
    ]
  ],
  "test_bytes_pickle": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestScipyInMemoryData",
        "test_bytes_pickle"
      ]
    ]
  ],
  "test_array_attrs": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestScipyFilePath",
        "test_array_attrs"
      ]
    ]
  ],
  "test_roundtrip_example_1_netcdf_gz": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestScipyFilePath",
        "test_roundtrip_example_1_netcdf_gz"
      ]
    ]
  ],
  "test_netcdf3_endianness": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestScipyFilePath",
        "test_netcdf3_endianness"
      ]
    ]
  ],
  "test_nc4_scipy": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestScipyFilePath",
        "test_nc4_scipy"
      ]
    ]
  ],
  "test_engine": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestGenericNetCDFData",
        "test_engine"
      ]
    ]
  ],
  "test_cross_engine_read_write_netcdf3": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestGenericNetCDFData",
        "test_cross_engine_read_write_netcdf3"
      ]
    ]
  ],
  "test_complex": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestH5NetCDFData",
        "test_complex"
      ]
    ]
  ],
  "test_cross_engine_read_write_netcdf4": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestH5NetCDFData",
        "test_cross_engine_read_write_netcdf4"
      ]
    ]
  ],
  "test_read_byte_attrs_as_unicode": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestH5NetCDFData",
        "test_read_byte_attrs_as_unicode"
      ]
    ]
  ],
  "test_compression_encoding_h5py": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestH5NetCDFData",
        "test_compression_encoding_h5py"
      ]
    ]
  ],
  "test_compression_check_encoding_h5py": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestH5NetCDFData",
        "test_compression_check_encoding_h5py"
      ]
    ]
  ],
  "test_dump_encodings_h5py": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestH5NetCDFData",
        "test_dump_encodings_h5py"
      ]
    ]
  ],
  "test_open_badbytes": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestH5NetCDFFileObject",
        "test_open_badbytes"
      ]
    ]
  ],
  "test_open_twice": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestH5NetCDFFileObject",
        "test_open_twice"
      ]
    ]
  ],
  "test_open_fileobj": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestH5NetCDFFileObject",
        "test_open_fileobj"
      ]
    ]
  ],
  "readengine": [
    [
      "xarray/tests/test_backends.py",
      [
        "readengine"
      ]
    ]
  ],
  "nfiles": [
    [
      "xarray/tests/test_backends.py",
      [
        "nfiles"
      ]
    ]
  ],
  "file_cache_maxsize": [
    [
      "xarray/tests/test_backends.py",
      [
        "file_cache_maxsize"
      ]
    ]
  ],
  "parallel": [
    [
      "xarray/tests/test_backends.py",
      [
        "parallel"
      ]
    ]
  ],
  "skip_if_not_engine": [
    [
      "xarray/tests/test_backends.py",
      [
        "skip_if_not_engine"
      ]
    ]
  ],
  "test_open_mfdataset_manyfiles": [
    [
      "xarray/tests/test_backends.py",
      [
        "test_open_mfdataset_manyfiles"
      ]
    ]
  ],
  "test_open_mfdataset_list_attr": [
    [
      "xarray/tests/test_backends.py",
      [
        "test_open_mfdataset_list_attr"
      ]
    ]
  ],
  "setup_files_and_datasets": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestOpenMFDatasetWithDataVarsAndCoordsKw",
        "setup_files_and_datasets"
      ]
    ]
  ],
  "gen_datasets_with_common_coord_and_time": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestOpenMFDatasetWithDataVarsAndCoordsKw",
        "gen_datasets_with_common_coord_and_time"
      ]
    ]
  ],
  "test_open_mfdataset_does_same_as_concat": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestOpenMFDatasetWithDataVarsAndCoordsKw",
        "test_open_mfdataset_does_same_as_concat"
      ]
    ]
  ],
  "test_open_mfdataset_dataset_attr_by_coords": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestOpenMFDatasetWithDataVarsAndCoordsKw",
        "test_open_mfdataset_dataset_attr_by_coords"
      ]
    ]
  ],
  "test_open_mfdataset_dataarray_attr_by_coords": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestOpenMFDatasetWithDataVarsAndCoordsKw",
        "test_open_mfdataset_dataarray_attr_by_coords"
      ]
    ]
  ],
  "test_open_mfdataset_exact_join_raises_error": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestOpenMFDatasetWithDataVarsAndCoordsKw",
        "test_open_mfdataset_exact_join_raises_error"
      ]
    ]
  ],
  "test_common_coord_when_datavars_all": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestOpenMFDatasetWithDataVarsAndCoordsKw",
        "test_common_coord_when_datavars_all"
      ]
    ]
  ],
  "test_common_coord_when_datavars_minimal": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestOpenMFDatasetWithDataVarsAndCoordsKw",
        "test_common_coord_when_datavars_minimal"
      ]
    ]
  ],
  "test_invalid_data_vars_value_should_fail": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestOpenMFDatasetWithDataVarsAndCoordsKw",
        "test_invalid_data_vars_value_should_fail"
      ]
    ]
  ],
  "test_open_mfdataset": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_open_mfdataset"
      ]
    ]
  ],
  "test_open_mfdataset_2d": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_open_mfdataset_2d"
      ]
    ]
  ],
  "test_open_mfdataset_pathlib": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_open_mfdataset_pathlib"
      ]
    ]
  ],
  "test_open_mfdataset_2d_pathlib": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_open_mfdataset_2d_pathlib"
      ]
    ]
  ],
  "test_open_mfdataset_2": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_open_mfdataset_2"
      ]
    ]
  ],
  "test_attrs_mfdataset": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_attrs_mfdataset"
      ]
    ]
  ],
  "test_open_mfdataset_attrs_file": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_open_mfdataset_attrs_file"
      ]
    ]
  ],
  "test_open_mfdataset_attrs_file_path": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_open_mfdataset_attrs_file_path"
      ]
    ]
  ],
  "test_open_mfdataset_auto_combine": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_open_mfdataset_auto_combine"
      ]
    ]
  ],
  "test_encoding_mfdataset": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_encoding_mfdataset"
      ]
    ]
  ],
  "test_preprocess_mfdataset": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_preprocess_mfdataset"
      ]
    ]
  ],
  "test_save_mfdataset_roundtrip": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_save_mfdataset_roundtrip"
      ]
    ]
  ],
  "test_save_mfdataset_invalid": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_save_mfdataset_invalid"
      ]
    ]
  ],
  "test_save_mfdataset_invalid_dataarray": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_save_mfdataset_invalid_dataarray"
      ]
    ]
  ],
  "test_save_mfdataset_pathlib_roundtrip": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_save_mfdataset_pathlib_roundtrip"
      ]
    ]
  ],
  "test_open_and_do_math": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_open_and_do_math"
      ]
    ]
  ],
  "test_open_mfdataset_concat_dim_none": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_open_mfdataset_concat_dim_none"
      ]
    ]
  ],
  "test_open_mfdataset_concat_dim_default_none": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_open_mfdataset_concat_dim_default_none"
      ]
    ]
  ],
  "test_open_dataset": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_open_dataset"
      ]
    ]
  ],
  "test_open_single_dataset": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_open_single_dataset"
      ]
    ]
  ],
  "test_open_multi_dataset": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_open_multi_dataset"
      ]
    ]
  ],
  "test_dask_roundtrip": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_dask_roundtrip"
      ]
    ]
  ],
  "test_deterministic_names": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_deterministic_names"
      ]
    ]
  ],
  "test_dataarray_compute": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_dataarray_compute"
      ]
    ]
  ],
  "test_save_mfdataset_compute_false_roundtrip": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_save_mfdataset_compute_false_roundtrip"
      ]
    ]
  ],
  "test_load_dataset": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_load_dataset"
      ]
    ]
  ],
  "test_load_dataarray": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDask",
        "test_load_dataarray"
      ]
    ]
  ],
  "convert_to_pydap_dataset": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestPydap",
        "convert_to_pydap_dataset"
      ]
    ]
  ],
  "create_datasets": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestPydap",
        "create_datasets"
      ]
    ],
    [
      "xarray/tests/test_backends.py",
      [
        "TestPydapOnline",
        "create_datasets"
      ]
    ]
  ],
  "test_cmp_local_file": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestPydap",
        "test_cmp_local_file"
      ]
    ]
  ],
  "test_compatible_to_netcdf": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestPydap",
        "test_compatible_to_netcdf"
      ]
    ]
  ],
  "test_session": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestPydapOnline",
        "test_session"
      ]
    ]
  ],
  "test_kwargs": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestPyNio",
        "test_kwargs"
      ]
    ],
    [
      "xarray/tests/test_ufuncs.py",
      [
        "test_kwargs"
      ]
    ]
  ],
  "test_weakrefs": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestPyNio",
        "test_weakrefs"
      ]
    ]
  ],
  "test_read": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestCfGrib",
        "test_read"
      ]
    ]
  ],
  "test_read_filter_by_keys": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestCfGrib",
        "test_read_filter_by_keys"
      ]
    ]
  ],
  "myatts": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestPseudoNetCDFFormat",
        "test_ict_format",
        "myatts"
      ]
    ]
  ],
  "test_ict_format": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestPseudoNetCDFFormat",
        "test_ict_format"
      ]
    ]
  ],
  "test_ict_format_write": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestPseudoNetCDFFormat",
        "test_ict_format_write"
      ]
    ]
  ],
  "test_uamiv_format_read": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestPseudoNetCDFFormat",
        "test_uamiv_format_read"
      ]
    ]
  ],
  "test_uamiv_format_mfread": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestPseudoNetCDFFormat",
        "test_uamiv_format_mfread"
      ]
    ]
  ],
  "test_uamiv_format_write": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestPseudoNetCDFFormat",
        "test_uamiv_format_write"
      ]
    ]
  ],
  "create_tmp_geotiff": [
    [
      "xarray/tests/test_backends.py",
      [
        "create_tmp_geotiff"
      ]
    ]
  ],
  "test_serialization": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestRasterio",
        "test_serialization"
      ]
    ]
  ],
  "test_utm": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestRasterio",
        "test_utm"
      ]
    ]
  ],
  "test_non_rectilinear": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestRasterio",
        "test_non_rectilinear"
      ]
    ]
  ],
  "test_platecarree": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestRasterio",
        "test_platecarree"
      ]
    ]
  ],
  "test_notransform": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestRasterio",
        "test_notransform"
      ]
    ]
  ],
  "test_indexing": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestRasterio",
        "test_indexing"
      ]
    ],
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_indexing"
      ]
    ]
  ],
  "test_caching": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestRasterio",
        "test_caching"
      ]
    ]
  ],
  "test_chunks": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestRasterio",
        "test_chunks"
      ]
    ]
  ],
  "test_pickle_rasterio": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestRasterio",
        "test_pickle_rasterio"
      ]
    ]
  ],
  "test_ENVI_tags": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestRasterio",
        "test_ENVI_tags"
      ]
    ]
  ],
  "test_geotiff_tags": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestRasterio",
        "test_geotiff_tags"
      ]
    ]
  ],
  "test_no_mftime": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestRasterio",
        "test_no_mftime"
      ]
    ]
  ],
  "test_http_url": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestRasterio",
        "test_http_url"
      ]
    ]
  ],
  "test_rasterio_environment": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestRasterio",
        "test_rasterio_environment"
      ]
    ]
  ],
  "test_rasterio_vrt": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestRasterio",
        "test_rasterio_vrt"
      ]
    ]
  ],
  "test_rasterio_vrt_with_transform_and_size": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestRasterio",
        "test_rasterio_vrt_with_transform_and_size"
      ]
    ]
  ],
  "test_rasterio_vrt_with_src_crs": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestRasterio",
        "test_rasterio_vrt_with_src_crs"
      ]
    ]
  ],
  "test_rasterio_vrt_network": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestRasterio",
        "test_rasterio_vrt_network"
      ]
    ]
  ],
  "test_extract_nc4_variable_encoding": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestEncodingInvalid",
        "test_extract_nc4_variable_encoding"
      ]
    ]
  ],
  "test_extract_h5nc_encoding": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestEncodingInvalid",
        "test_extract_h5nc_encoding"
      ]
    ]
  ],
  "new_dataset": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestValidateAttrs",
        "test_validating_attrs",
        "new_dataset"
      ]
    ]
  ],
  "new_dataset_and_dataset_attrs": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestValidateAttrs",
        "test_validating_attrs",
        "new_dataset_and_dataset_attrs"
      ]
    ]
  ],
  "new_dataset_and_data_attrs": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestValidateAttrs",
        "test_validating_attrs",
        "new_dataset_and_data_attrs"
      ]
    ]
  ],
  "new_dataset_and_coord_attrs": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestValidateAttrs",
        "test_validating_attrs",
        "new_dataset_and_coord_attrs"
      ]
    ]
  ],
  "test_validating_attrs": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestValidateAttrs",
        "test_validating_attrs"
      ]
    ]
  ],
  "test_dataarray_to_netcdf_no_name": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDataArrayToNetCDF",
        "test_dataarray_to_netcdf_no_name"
      ]
    ]
  ],
  "test_dataarray_to_netcdf_with_name": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDataArrayToNetCDF",
        "test_dataarray_to_netcdf_with_name"
      ]
    ]
  ],
  "test_dataarray_to_netcdf_coord_name_clash": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDataArrayToNetCDF",
        "test_dataarray_to_netcdf_coord_name_clash"
      ]
    ]
  ],
  "test_open_dataarray_options": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDataArrayToNetCDF",
        "test_open_dataarray_options"
      ]
    ]
  ],
  "test_dataarray_to_netcdf_return_bytes": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDataArrayToNetCDF",
        "test_dataarray_to_netcdf_return_bytes"
      ]
    ]
  ],
  "test_dataarray_to_netcdf_no_name_pathlib": [
    [
      "xarray/tests/test_backends.py",
      [
        "TestDataArrayToNetCDF",
        "test_dataarray_to_netcdf_no_name_pathlib"
      ]
    ]
  ],
  "test_no_warning_from_dask_effective_get": [
    [
      "xarray/tests/test_backends.py",
      [
        "test_no_warning_from_dask_effective_get"
      ]
    ]
  ],
  "test_source_encoding_always_present": [
    [
      "xarray/tests/test_backends.py",
      [
        "test_source_encoding_always_present"
      ]
    ]
  ],
  "_assert_no_dates_out_of_range_warning": [
    [
      "xarray/tests/test_backends.py",
      [
        "_assert_no_dates_out_of_range_warning"
      ]
    ]
  ],
  "test_use_cftime_standard_calendar_default_in_range": [
    [
      "xarray/tests/test_backends.py",
      [
        "test_use_cftime_standard_calendar_default_in_range"
      ]
    ]
  ],
  "test_use_cftime_standard_calendar_default_out_of_range": [
    [
      "xarray/tests/test_backends.py",
      [
        "test_use_cftime_standard_calendar_default_out_of_range"
      ]
    ]
  ],
  "test_use_cftime_true": [
    [
      "xarray/tests/test_backends.py",
      [
        "test_use_cftime_true"
      ]
    ],
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_use_cftime_true"
      ]
    ]
  ],
  "test_use_cftime_false_standard_calendar_in_range": [
    [
      "xarray/tests/test_backends.py",
      [
        "test_use_cftime_false_standard_calendar_in_range"
      ]
    ],
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_use_cftime_false_standard_calendar_in_range"
      ]
    ]
  ],
  "test_use_cftime_false_standard_calendar_out_of_range": [
    [
      "xarray/tests/test_backends.py",
      [
        "test_use_cftime_false_standard_calendar_out_of_range"
      ]
    ],
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_use_cftime_false_standard_calendar_out_of_range"
      ]
    ]
  ],
  "test_use_cftime_false_nonstandard_calendar": [
    [
      "xarray/tests/test_backends.py",
      [
        "test_use_cftime_false_nonstandard_calendar"
      ]
    ]
  ],
  "test_invalid_netcdf_raises": [
    [
      "xarray/tests/test_backends.py",
      [
        "test_invalid_netcdf_raises"
      ]
    ]
  ],
  "test_encode_zarr_attr_value": [
    [
      "xarray/tests/test_backends.py",
      [
        "test_encode_zarr_attr_value"
      ]
    ]
  ],
  "test_extract_zarr_variable_encoding": [
    [
      "xarray/tests/test_backends.py",
      [
        "test_extract_zarr_variable_encoding"
      ]
    ]
  ],
  "test__get_default_engine": [
    [
      "xarray/tests/test_backends_api.py",
      [
        "test__get_default_engine"
      ]
    ]
  ],
  "file_cache": [
    [
      "xarray/tests/test_backends_file_manager.py",
      [
        "file_cache"
      ]
    ]
  ],
  "test_file_manager_mock_write": [
    [
      "xarray/tests/test_backends_file_manager.py",
      [
        "test_file_manager_mock_write"
      ]
    ]
  ],
  "test_file_manager_autoclose": [
    [
      "xarray/tests/test_backends_file_manager.py",
      [
        "test_file_manager_autoclose"
      ]
    ]
  ],
  "test_file_manager_autoclose_while_locked": [
    [
      "xarray/tests/test_backends_file_manager.py",
      [
        "test_file_manager_autoclose_while_locked"
      ]
    ]
  ],
  "test_file_manager_repr": [
    [
      "xarray/tests/test_backends_file_manager.py",
      [
        "test_file_manager_repr"
      ]
    ]
  ],
  "test_file_manager_refcounts": [
    [
      "xarray/tests/test_backends_file_manager.py",
      [
        "test_file_manager_refcounts"
      ]
    ]
  ],
  "test_file_manager_replace_object": [
    [
      "xarray/tests/test_backends_file_manager.py",
      [
        "test_file_manager_replace_object"
      ]
    ]
  ],
  "test_file_manager_write_consecutive": [
    [
      "xarray/tests/test_backends_file_manager.py",
      [
        "test_file_manager_write_consecutive"
      ]
    ]
  ],
  "test_file_manager_write_concurrent": [
    [
      "xarray/tests/test_backends_file_manager.py",
      [
        "test_file_manager_write_concurrent"
      ]
    ]
  ],
  "test_file_manager_write_pickle": [
    [
      "xarray/tests/test_backends_file_manager.py",
      [
        "test_file_manager_write_pickle"
      ]
    ]
  ],
  "test_file_manager_read": [
    [
      "xarray/tests/test_backends_file_manager.py",
      [
        "test_file_manager_read"
      ]
    ]
  ],
  "test_file_manager_invalid_kwargs": [
    [
      "xarray/tests/test_backends_file_manager.py",
      [
        "test_file_manager_invalid_kwargs"
      ]
    ]
  ],
  "test_file_manager_acquire_context": [
    [
      "xarray/tests/test_backends_file_manager.py",
      [
        "test_file_manager_acquire_context"
      ]
    ]
  ],
  "test_threaded_lock": [
    [
      "xarray/tests/test_backends_locks.py",
      [
        "test_threaded_lock"
      ]
    ]
  ],
  "test_simple": [
    [
      "xarray/tests/test_backends_lru_cache.py",
      [
        "test_simple"
      ]
    ]
  ],
  "test_trivial": [
    [
      "xarray/tests/test_backends_lru_cache.py",
      [
        "test_trivial"
      ]
    ]
  ],
  "test_invalid": [
    [
      "xarray/tests/test_backends_lru_cache.py",
      [
        "test_invalid"
      ]
    ]
  ],
  "test_update_priority": [
    [
      "xarray/tests/test_backends_lru_cache.py",
      [
        "test_update_priority"
      ]
    ]
  ],
  "test_del": [
    [
      "xarray/tests/test_backends_lru_cache.py",
      [
        "test_del"
      ]
    ]
  ],
  "test_on_evict": [
    [
      "xarray/tests/test_backends_lru_cache.py",
      [
        "test_on_evict"
      ]
    ]
  ],
  "test_on_evict_trivial": [
    [
      "xarray/tests/test_backends_lru_cache.py",
      [
        "test_on_evict_trivial"
      ]
    ]
  ],
  "test_resize": [
    [
      "xarray/tests/test_backends_lru_cache.py",
      [
        "test_resize"
      ]
    ]
  ],
  "_id_func": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "_id_func"
      ]
    ]
  ],
  "test_cftime_offset_constructor_valid_n": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_cftime_offset_constructor_valid_n"
      ]
    ]
  ],
  "test_cftime_offset_constructor_invalid_n": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_cftime_offset_constructor_invalid_n"
      ]
    ]
  ],
  "test_year_offset_constructor_valid_month": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_year_offset_constructor_valid_month"
      ]
    ]
  ],
  "test_year_offset_constructor_invalid_month": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_year_offset_constructor_invalid_month"
      ]
    ]
  ],
  "test_rule_code": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_rule_code"
      ]
    ]
  ],
  "test_str_and_repr": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_str_and_repr"
      ]
    ]
  ],
  "test_to_offset_offset_input": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_to_offset_offset_input"
      ]
    ]
  ],
  "test_to_offset_sub_annual": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_to_offset_sub_annual"
      ]
    ]
  ],
  "test_to_offset_annual": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_to_offset_annual"
      ]
    ]
  ],
  "test_to_offset_quarter": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_to_offset_quarter"
      ]
    ]
  ],
  "test_invalid_to_offset_str": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_invalid_to_offset_str"
      ]
    ]
  ],
  "test_to_cftime_datetime": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_to_cftime_datetime"
      ]
    ]
  ],
  "test_to_cftime_datetime_error_no_calendar": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_to_cftime_datetime_error_no_calendar"
      ]
    ]
  ],
  "test_to_cftime_datetime_error_type_error": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_to_cftime_datetime_error_type_error"
      ]
    ]
  ],
  "test_neq": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_neq"
      ]
    ]
  ],
  "test_eq": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_eq"
      ]
    ]
  ],
  "test_mul": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_mul"
      ]
    ]
  ],
  "test_rmul": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_rmul"
      ]
    ]
  ],
  "test_neg": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_neg"
      ]
    ]
  ],
  "test_add_sub_monthly": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_add_sub_monthly"
      ]
    ]
  ],
  "test_radd_sub_monthly": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_radd_sub_monthly"
      ]
    ]
  ],
  "test_rsub_sub_monthly": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_rsub_sub_monthly"
      ]
    ]
  ],
  "test_sub_error": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_sub_error"
      ]
    ]
  ],
  "test_minus_offset": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_minus_offset"
      ]
    ]
  ],
  "test_minus_offset_error": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_minus_offset_error"
      ]
    ]
  ],
  "test_days_in_month_non_december": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_days_in_month_non_december"
      ]
    ]
  ],
  "test_days_in_month_december": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_days_in_month_december"
      ]
    ]
  ],
  "test_add_month_begin": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_add_month_begin"
      ]
    ]
  ],
  "test_add_month_end": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_add_month_end"
      ]
    ]
  ],
  "test_add_month_end_onOffset": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_add_month_end_onOffset"
      ]
    ]
  ],
  "test_add_year_begin": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_add_year_begin"
      ]
    ]
  ],
  "test_add_year_end": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_add_year_end"
      ]
    ]
  ],
  "test_add_year_end_onOffset": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_add_year_end_onOffset"
      ]
    ]
  ],
  "test_add_quarter_begin": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_add_quarter_begin"
      ]
    ]
  ],
  "test_add_quarter_end": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_add_quarter_end"
      ]
    ]
  ],
  "test_add_quarter_end_onOffset": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_add_quarter_end_onOffset"
      ]
    ]
  ],
  "test_onOffset": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_onOffset"
      ]
    ]
  ],
  "test_onOffset_month_or_quarter_or_year_end": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_onOffset_month_or_quarter_or_year_end"
      ]
    ]
  ],
  "test_rollforward": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_rollforward"
      ]
    ]
  ],
  "test_rollback": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_rollback"
      ]
    ]
  ],
  "test_cftime_range": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_cftime_range"
      ]
    ]
  ],
  "test_cftime_range_name": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_cftime_range_name"
      ]
    ]
  ],
  "test_invalid_cftime_range_inputs": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_invalid_cftime_range_inputs"
      ]
    ]
  ],
  "test_calendar_specific_month_end": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_calendar_specific_month_end"
      ]
    ]
  ],
  "test_calendar_year_length": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_calendar_year_length"
      ]
    ]
  ],
  "test_dayofweek_after_cftime_range": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_dayofweek_after_cftime_range"
      ]
    ]
  ],
  "test_dayofyear_after_cftime_range": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_dayofyear_after_cftime_range"
      ]
    ]
  ],
  "test_cftime_range_standard_calendar_refers_to_gregorian": [
    [
      "xarray/tests/test_cftime_offsets.py",
      [
        "test_cftime_range_standard_calendar_refers_to_gregorian"
      ]
    ]
  ],
  "date_dict": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "date_dict"
      ]
    ]
  ],
  "test_parse_iso8601": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_parse_iso8601"
      ]
    ]
  ],
  "date_type": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "date_type"
      ]
    ]
  ],
  "monotonic_decreasing_index": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "monotonic_decreasing_index"
      ]
    ]
  ],
  "length_one_index": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "length_one_index"
      ]
    ]
  ],
  "da": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "da"
      ]
    ],
    [
      "xarray/tests/test_cftimeindex_resample.py",
      [
        "da"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "da"
      ]
    ],
    [
      "xarray/tests/test_missing.py",
      [
        "da"
      ]
    ]
  ],
  "series": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "series"
      ]
    ]
  ],
  "df": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "df"
      ]
    ]
  ],
  "feb_days": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "feb_days"
      ]
    ]
  ],
  "dec_days": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "dec_days"
      ]
    ]
  ],
  "index_with_name": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "index_with_name"
      ]
    ]
  ],
  "test_constructor_with_name": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_constructor_with_name"
      ]
    ]
  ],
  "test_assert_all_valid_date_type": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_assert_all_valid_date_type"
      ]
    ]
  ],
  "test_cftimeindex_field_accessors": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftimeindex_field_accessors"
      ]
    ]
  ],
  "test_cftimeindex_dayofyear_accessor": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftimeindex_dayofyear_accessor"
      ]
    ]
  ],
  "test_cftimeindex_dayofweek_accessor": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftimeindex_dayofweek_accessor"
      ]
    ]
  ],
  "test_cftimeindex_days_in_month_accessor": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftimeindex_days_in_month_accessor"
      ]
    ]
  ],
  "test_parse_iso8601_with_reso": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_parse_iso8601_with_reso"
      ]
    ]
  ],
  "test_parse_string_to_bounds_year": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_parse_string_to_bounds_year"
      ]
    ]
  ],
  "test_parse_string_to_bounds_month_feb": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_parse_string_to_bounds_month_feb"
      ]
    ]
  ],
  "test_parse_string_to_bounds_month_dec": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_parse_string_to_bounds_month_dec"
      ]
    ]
  ],
  "test_parsed_string_to_bounds_sub_monthly": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_parsed_string_to_bounds_sub_monthly"
      ]
    ]
  ],
  "test_parsed_string_to_bounds_raises": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_parsed_string_to_bounds_raises"
      ]
    ]
  ],
  "test_get_loc": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_get_loc"
      ]
    ]
  ],
  "test_get_slice_bound": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_get_slice_bound"
      ]
    ]
  ],
  "test_get_slice_bound_decreasing_index": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_get_slice_bound_decreasing_index"
      ]
    ]
  ],
  "test_get_slice_bound_length_one_index": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_get_slice_bound_length_one_index"
      ]
    ]
  ],
  "test_string_slice_length_one_index": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_string_slice_length_one_index"
      ]
    ]
  ],
  "test_date_type_property": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_date_type_property"
      ]
    ]
  ],
  "test_groupby": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_groupby"
      ]
    ],
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_groupby"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_groupby"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_groupby"
      ]
    ],
    [
      "xarray/tests/test_ufuncs.py",
      [
        "test_groupby"
      ]
    ]
  ],
  "test_sel_string_or_list": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_sel_string_or_list"
      ]
    ]
  ],
  "test_sel_date_slice_or_list": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_sel_date_slice_or_list"
      ]
    ]
  ],
  "test_sel_date_scalar": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_sel_date_scalar"
      ]
    ]
  ],
  "test_sel_date_distant_date": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_sel_date_distant_date"
      ]
    ]
  ],
  "test_sel_date_scalar_nearest": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_sel_date_scalar_nearest"
      ]
    ]
  ],
  "test_sel_date_scalar_pad": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_sel_date_scalar_pad"
      ]
    ]
  ],
  "test_sel_date_scalar_backfill": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_sel_date_scalar_backfill"
      ]
    ]
  ],
  "test_sel_date_scalar_tolerance_raises": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_sel_date_scalar_tolerance_raises"
      ]
    ]
  ],
  "test_sel_date_list_nearest": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_sel_date_list_nearest"
      ]
    ]
  ],
  "test_sel_date_list_pad": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_sel_date_list_pad"
      ]
    ]
  ],
  "test_sel_date_list_backfill": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_sel_date_list_backfill"
      ]
    ]
  ],
  "test_sel_date_list_tolerance_raises": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_sel_date_list_tolerance_raises"
      ]
    ]
  ],
  "test_isel": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_isel"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_isel"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_isel"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_isel"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_isel"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_isel"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_isel"
      ]
    ]
  ],
  "scalar_args": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "scalar_args"
      ]
    ]
  ],
  "range_args": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "range_args"
      ]
    ]
  ],
  "test_indexing_in_series_getitem": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_indexing_in_series_getitem"
      ]
    ]
  ],
  "test_indexing_in_series_loc": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_indexing_in_series_loc"
      ]
    ]
  ],
  "test_indexing_in_series_iloc": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_indexing_in_series_iloc"
      ]
    ]
  ],
  "test_series_dropna": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_series_dropna"
      ]
    ]
  ],
  "test_indexing_in_dataframe_loc": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_indexing_in_dataframe_loc"
      ]
    ]
  ],
  "test_indexing_in_dataframe_iloc": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_indexing_in_dataframe_iloc"
      ]
    ]
  ],
  "test_concat_cftimeindex": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_concat_cftimeindex"
      ]
    ]
  ],
  "test_empty_cftimeindex": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_empty_cftimeindex"
      ]
    ]
  ],
  "test_cftimeindex_add": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftimeindex_add"
      ]
    ]
  ],
  "test_cftimeindex_add_timedeltaindex": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftimeindex_add_timedeltaindex"
      ]
    ]
  ],
  "test_cftimeindex_radd": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftimeindex_radd"
      ]
    ]
  ],
  "test_timedeltaindex_add_cftimeindex": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_timedeltaindex_add_cftimeindex"
      ]
    ]
  ],
  "test_cftimeindex_sub_timedelta": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftimeindex_sub_timedelta"
      ]
    ]
  ],
  "test_cftimeindex_sub_timedelta_array": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftimeindex_sub_timedelta_array"
      ]
    ]
  ],
  "test_cftimeindex_sub_cftimeindex": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftimeindex_sub_cftimeindex"
      ]
    ]
  ],
  "test_cftimeindex_sub_cftime_datetime": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftimeindex_sub_cftime_datetime"
      ]
    ]
  ],
  "test_cftime_datetime_sub_cftimeindex": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftime_datetime_sub_cftimeindex"
      ]
    ]
  ],
  "test_distant_cftime_datetime_sub_cftimeindex": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_distant_cftime_datetime_sub_cftimeindex"
      ]
    ]
  ],
  "test_cftimeindex_sub_timedeltaindex": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftimeindex_sub_timedeltaindex"
      ]
    ]
  ],
  "test_cftimeindex_sub_index_of_cftime_datetimes": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftimeindex_sub_index_of_cftime_datetimes"
      ]
    ]
  ],
  "test_cftimeindex_sub_not_implemented": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftimeindex_sub_not_implemented"
      ]
    ]
  ],
  "test_cftimeindex_rsub": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftimeindex_rsub"
      ]
    ]
  ],
  "test_cftimeindex_shift": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftimeindex_shift"
      ]
    ]
  ],
  "test_cftimeindex_shift_invalid_n": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftimeindex_shift_invalid_n"
      ]
    ]
  ],
  "test_cftimeindex_shift_invalid_freq": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_cftimeindex_shift_invalid_freq"
      ]
    ]
  ],
  "test_parse_array_of_cftime_strings": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_parse_array_of_cftime_strings"
      ]
    ]
  ],
  "test_strftime_of_cftime_array": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_strftime_of_cftime_array"
      ]
    ]
  ],
  "test_to_datetimeindex": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_to_datetimeindex"
      ]
    ]
  ],
  "test_to_datetimeindex_out_of_range": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_to_datetimeindex_out_of_range"
      ]
    ]
  ],
  "test_to_datetimeindex_feb_29": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_to_datetimeindex_feb_29"
      ]
    ]
  ],
  "test_multiindex": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_multiindex"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_multiindex"
      ]
    ]
  ],
  "test_rounding_methods_against_datetimeindex": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_rounding_methods_against_datetimeindex"
      ]
    ]
  ],
  "test_rounding_methods_invalid_freq": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_rounding_methods_invalid_freq"
      ]
    ]
  ],
  "rounding_index": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "rounding_index"
      ]
    ]
  ],
  "test_ceil": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_ceil"
      ]
    ]
  ],
  "test_floor": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_floor"
      ]
    ]
  ],
  "test_round": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_round"
      ]
    ]
  ],
  "test_asi8": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_asi8"
      ]
    ]
  ],
  "test_asi8_distant_date": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_asi8_distant_date"
      ]
    ]
  ],
  "test_infer_freq_valid_types": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_infer_freq_valid_types"
      ]
    ]
  ],
  "test_infer_freq_invalid_inputs": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_infer_freq_invalid_inputs"
      ]
    ]
  ],
  "test_infer_freq": [
    [
      "xarray/tests/test_cftimeindex.py",
      [
        "test_infer_freq"
      ]
    ]
  ],
  "test_resample": [
    [
      "xarray/tests/test_cftimeindex_resample.py",
      [
        "test_resample"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_resample"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_resample"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_resample"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_resample"
      ]
    ]
  ],
  "test_closed_label_defaults": [
    [
      "xarray/tests/test_cftimeindex_resample.py",
      [
        "test_closed_label_defaults"
      ]
    ]
  ],
  "test_calendars": [
    [
      "xarray/tests/test_cftimeindex_resample.py",
      [
        "test_calendars"
      ]
    ]
  ],
  "test_CFMaskCoder_decode": [
    [
      "xarray/tests/test_coding.py",
      [
        "test_CFMaskCoder_decode"
      ]
    ]
  ],
  "test_CFMaskCoder_encode_missing_fill_values_conflict": [
    [
      "xarray/tests/test_coding.py",
      [
        "test_CFMaskCoder_encode_missing_fill_values_conflict"
      ]
    ]
  ],
  "test_CFMaskCoder_missing_value": [
    [
      "xarray/tests/test_coding.py",
      [
        "test_CFMaskCoder_missing_value"
      ]
    ]
  ],
  "test_CFMaskCoder_decode_dask": [
    [
      "xarray/tests/test_coding.py",
      [
        "test_CFMaskCoder_decode_dask"
      ]
    ]
  ],
  "test_coder_roundtrip": [
    [
      "xarray/tests/test_coding.py",
      [
        "test_coder_roundtrip"
      ]
    ]
  ],
  "test_scaling_converts_to_float32": [
    [
      "xarray/tests/test_coding.py",
      [
        "test_scaling_converts_to_float32"
      ]
    ]
  ],
  "test_vlen_dtype": [
    [
      "xarray/tests/test_coding_strings.py",
      [
        "test_vlen_dtype"
      ]
    ]
  ],
  "test_EncodedStringCoder_decode": [
    [
      "xarray/tests/test_coding_strings.py",
      [
        "test_EncodedStringCoder_decode"
      ]
    ]
  ],
  "test_EncodedStringCoder_decode_dask": [
    [
      "xarray/tests/test_coding_strings.py",
      [
        "test_EncodedStringCoder_decode_dask"
      ]
    ]
  ],
  "test_EncodedStringCoder_encode": [
    [
      "xarray/tests/test_coding_strings.py",
      [
        "test_EncodedStringCoder_encode"
      ]
    ]
  ],
  "test_CharacterArrayCoder_roundtrip": [
    [
      "xarray/tests/test_coding_strings.py",
      [
        "test_CharacterArrayCoder_roundtrip"
      ]
    ]
  ],
  "test_CharacterArrayCoder_encode": [
    [
      "xarray/tests/test_coding_strings.py",
      [
        "test_CharacterArrayCoder_encode"
      ]
    ]
  ],
  "test_CharacterArrayCoder_char_dim_name": [
    [
      "xarray/tests/test_coding_strings.py",
      [
        "test_CharacterArrayCoder_char_dim_name"
      ]
    ]
  ],
  "test_StackedBytesArray": [
    [
      "xarray/tests/test_coding_strings.py",
      [
        "test_StackedBytesArray"
      ]
    ]
  ],
  "test_StackedBytesArray_scalar": [
    [
      "xarray/tests/test_coding_strings.py",
      [
        "test_StackedBytesArray_scalar"
      ]
    ]
  ],
  "test_StackedBytesArray_vectorized_indexing": [
    [
      "xarray/tests/test_coding_strings.py",
      [
        "test_StackedBytesArray_vectorized_indexing"
      ]
    ]
  ],
  "test_char_to_bytes": [
    [
      "xarray/tests/test_coding_strings.py",
      [
        "test_char_to_bytes"
      ]
    ]
  ],
  "test_char_to_bytes_ndim_zero": [
    [
      "xarray/tests/test_coding_strings.py",
      [
        "test_char_to_bytes_ndim_zero"
      ]
    ]
  ],
  "test_char_to_bytes_size_zero": [
    [
      "xarray/tests/test_coding_strings.py",
      [
        "test_char_to_bytes_size_zero"
      ]
    ]
  ],
  "test_char_to_bytes_dask": [
    [
      "xarray/tests/test_coding_strings.py",
      [
        "test_char_to_bytes_dask"
      ]
    ]
  ],
  "test_bytes_to_char": [
    [
      "xarray/tests/test_coding_strings.py",
      [
        "test_bytes_to_char"
      ]
    ]
  ],
  "test_bytes_to_char_dask": [
    [
      "xarray/tests/test_coding_strings.py",
      [
        "test_bytes_to_char_dask"
      ]
    ]
  ],
  "_all_cftime_date_types": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "_all_cftime_date_types"
      ]
    ]
  ],
  "test_cf_datetime": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_cf_datetime"
      ]
    ]
  ],
  "test_decode_cf_datetime_overflow": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_decode_cf_datetime_overflow"
      ]
    ]
  ],
  "test_decode_cf_datetime_non_standard_units": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_decode_cf_datetime_non_standard_units"
      ]
    ]
  ],
  "test_decode_cf_datetime_non_iso_strings": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_decode_cf_datetime_non_iso_strings"
      ]
    ]
  ],
  "test_decode_standard_calendar_inside_timestamp_range": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_decode_standard_calendar_inside_timestamp_range"
      ]
    ]
  ],
  "test_decode_non_standard_calendar_inside_timestamp_range": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_decode_non_standard_calendar_inside_timestamp_range"
      ]
    ]
  ],
  "test_decode_dates_outside_timestamp_range": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_decode_dates_outside_timestamp_range"
      ]
    ]
  ],
  "test_decode_standard_calendar_single_element_inside_timestamp_range": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_decode_standard_calendar_single_element_inside_timestamp_range"
      ]
    ]
  ],
  "test_decode_non_standard_calendar_single_element_inside_timestamp_range": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_decode_non_standard_calendar_single_element_inside_timestamp_range"
      ]
    ]
  ],
  "test_decode_single_element_outside_timestamp_range": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_decode_single_element_outside_timestamp_range"
      ]
    ]
  ],
  "test_decode_standard_calendar_multidim_time_inside_timestamp_range": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_decode_standard_calendar_multidim_time_inside_timestamp_range"
      ]
    ]
  ],
  "test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_decode_nonstandard_calendar_multidim_time_inside_timestamp_range"
      ]
    ]
  ],
  "test_decode_multidim_time_outside_timestamp_range": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_decode_multidim_time_outside_timestamp_range"
      ]
    ]
  ],
  "test_decode_non_standard_calendar_single_element": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_decode_non_standard_calendar_single_element"
      ]
    ]
  ],
  "test_decode_360_day_calendar": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_decode_360_day_calendar"
      ]
    ]
  ],
  "test_decode_abbreviation": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_decode_abbreviation"
      ]
    ]
  ],
  "test_cf_datetime_nan": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_cf_datetime_nan"
      ]
    ]
  ],
  "test_decoded_cf_datetime_array_2d": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_decoded_cf_datetime_array_2d"
      ]
    ]
  ],
  "test_infer_datetime_units": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_infer_datetime_units"
      ]
    ]
  ],
  "test_infer_cftime_datetime_units": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_infer_cftime_datetime_units"
      ]
    ]
  ],
  "test_cf_timedelta": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_cf_timedelta"
      ]
    ]
  ],
  "test_cf_timedelta_2d": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_cf_timedelta_2d"
      ]
    ]
  ],
  "test_infer_timedelta_units": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_infer_timedelta_units"
      ]
    ]
  ],
  "test_format_cftime_datetime": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_format_cftime_datetime"
      ]
    ]
  ],
  "test_decode_cf": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_decode_cf"
      ]
    ]
  ],
  "test_decode_cf_time_bounds": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_decode_cf_time_bounds"
      ]
    ]
  ],
  "test_encode_time_bounds": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_encode_time_bounds"
      ]
    ]
  ],
  "test_contains_cftime_datetimes_1d": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_contains_cftime_datetimes_1d"
      ]
    ]
  ],
  "test_contains_cftime_datetimes_dask_1d": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_contains_cftime_datetimes_dask_1d"
      ]
    ]
  ],
  "test_contains_cftime_datetimes_3d": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_contains_cftime_datetimes_3d"
      ]
    ]
  ],
  "test_contains_cftime_datetimes_dask_3d": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_contains_cftime_datetimes_dask_3d"
      ]
    ]
  ],
  "test_contains_cftime_datetimes_non_cftimes": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_contains_cftime_datetimes_non_cftimes"
      ]
    ]
  ],
  "test_contains_cftime_datetimes_non_cftimes_dask": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_contains_cftime_datetimes_non_cftimes_dask"
      ]
    ]
  ],
  "test_encode_cf_datetime_overflow": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_encode_cf_datetime_overflow"
      ]
    ]
  ],
  "test_encode_cf_datetime_pandas_min": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_encode_cf_datetime_pandas_min"
      ]
    ]
  ],
  "test_time_units_with_timezone_roundtrip": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_time_units_with_timezone_roundtrip"
      ]
    ]
  ],
  "test_use_cftime_default_standard_calendar_in_range": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_use_cftime_default_standard_calendar_in_range"
      ]
    ]
  ],
  "test_use_cftime_default_standard_calendar_out_of_range": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_use_cftime_default_standard_calendar_out_of_range"
      ]
    ]
  ],
  "test_use_cftime_default_non_standard_calendar": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_use_cftime_default_non_standard_calendar"
      ]
    ]
  ],
  "test_use_cftime_false_non_standard_calendar": [
    [
      "xarray/tests/test_coding_times.py",
      [
        "test_use_cftime_false_non_standard_calendar"
      ]
    ]
  ],
  "assert_combined_tile_ids_equal": [
    [
      "xarray/tests/test_combine.py",
      [
        "assert_combined_tile_ids_equal"
      ]
    ]
  ],
  "test_1d": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromNestedList",
        "test_1d"
      ]
    ],
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromCoords",
        "test_1d"
      ]
    ]
  ],
  "test_2d": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromNestedList",
        "test_2d"
      ]
    ],
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromCoords",
        "test_2d"
      ]
    ]
  ],
  "test_3d": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromNestedList",
        "test_3d"
      ]
    ]
  ],
  "test_single_dataset": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromNestedList",
        "test_single_dataset"
      ]
    ]
  ],
  "test_redundant_nesting": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromNestedList",
        "test_redundant_nesting"
      ]
    ]
  ],
  "test_ignore_empty_list": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromNestedList",
        "test_ignore_empty_list"
      ]
    ]
  ],
  "test_uneven_depth_input": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromNestedList",
        "test_uneven_depth_input"
      ]
    ]
  ],
  "test_uneven_length_input": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromNestedList",
        "test_uneven_length_input"
      ]
    ]
  ],
  "test_infer_from_datasets": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromNestedList",
        "test_infer_from_datasets"
      ]
    ]
  ],
  "test_no_dimension_coords": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromCoords",
        "test_no_dimension_coords"
      ]
    ]
  ],
  "test_coord_not_monotonic": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromCoords",
        "test_coord_not_monotonic"
      ]
    ]
  ],
  "test_coord_monotonically_decreasing": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromCoords",
        "test_coord_monotonically_decreasing"
      ]
    ]
  ],
  "test_no_concatenation_needed": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromCoords",
        "test_no_concatenation_needed"
      ]
    ]
  ],
  "test_2d_plus_bystander_dim": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromCoords",
        "test_2d_plus_bystander_dim"
      ]
    ]
  ],
  "test_string_coords": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromCoords",
        "test_string_coords"
      ]
    ]
  ],
  "test_lexicographic_sort_string_coords": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromCoords",
        "test_lexicographic_sort_string_coords"
      ]
    ]
  ],
  "test_datetime_coords": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestTileIDsFromCoords",
        "test_datetime_coords"
      ]
    ]
  ],
  "create_combined_ids": [
    [
      "xarray/tests/test_combine.py",
      [
        "create_combined_ids"
      ]
    ]
  ],
  "_create_combined_ids": [
    [
      "xarray/tests/test_combine.py",
      [
        "_create_combined_ids"
      ]
    ]
  ],
  "_create_tile_ids": [
    [
      "xarray/tests/test_combine.py",
      [
        "_create_tile_ids"
      ]
    ]
  ],
  "test_new_tile_id": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNewTileIDs",
        "test_new_tile_id"
      ]
    ]
  ],
  "test_get_new_tile_ids": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNewTileIDs",
        "test_get_new_tile_ids"
      ]
    ]
  ],
  "test_concat_once": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestCombineND",
        "test_concat_once"
      ]
    ]
  ],
  "test_concat_only_first_dim": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestCombineND",
        "test_concat_only_first_dim"
      ]
    ]
  ],
  "test_concat_twice": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestCombineND",
        "test_concat_twice"
      ]
    ]
  ],
  "test_check_depths": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestCheckShapeTileIDs",
        "test_check_depths"
      ]
    ]
  ],
  "test_check_lengths": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestCheckShapeTileIDs",
        "test_check_lengths"
      ]
    ]
  ],
  "test_nested_concat": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNestedCombine",
        "test_nested_concat"
      ]
    ]
  ],
  "test_combine_nested_join": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNestedCombine",
        "test_combine_nested_join"
      ]
    ]
  ],
  "test_combine_nested_join_exact": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNestedCombine",
        "test_combine_nested_join_exact"
      ]
    ]
  ],
  "test_empty_input": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNestedCombine",
        "test_empty_input"
      ]
    ],
    [
      "xarray/tests/test_combine.py",
      [
        "TestCombineAuto",
        "test_combine_by_coords",
        "test_empty_input"
      ]
    ]
  ],
  "test_nested_concat_too_many_dims_at_once": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNestedCombine",
        "test_nested_concat_too_many_dims_at_once"
      ]
    ]
  ],
  "test_nested_concat_along_new_dim": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNestedCombine",
        "test_nested_concat_along_new_dim"
      ]
    ]
  ],
  "test_nested_merge": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNestedCombine",
        "test_nested_merge"
      ]
    ]
  ],
  "test_concat_multiple_dims": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNestedCombine",
        "test_concat_multiple_dims"
      ]
    ]
  ],
  "test_concat_name_symmetry": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNestedCombine",
        "test_concat_name_symmetry"
      ]
    ]
  ],
  "test_concat_one_dim_merge_another": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNestedCombine",
        "test_concat_one_dim_merge_another"
      ]
    ]
  ],
  "test_auto_combine_2d": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNestedCombine",
        "test_auto_combine_2d"
      ]
    ]
  ],
  "test_auto_combine_2d_combine_attrs_kwarg": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNestedCombine",
        "test_auto_combine_2d_combine_attrs_kwarg"
      ]
    ]
  ],
  "test_combine_nested_missing_data_new_dim": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNestedCombine",
        "test_combine_nested_missing_data_new_dim"
      ]
    ]
  ],
  "test_invalid_hypercube_input": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNestedCombine",
        "test_invalid_hypercube_input"
      ]
    ]
  ],
  "test_merge_one_dim_concat_another": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNestedCombine",
        "test_merge_one_dim_concat_another"
      ]
    ]
  ],
  "test_combine_concat_over_redundant_nesting": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNestedCombine",
        "test_combine_concat_over_redundant_nesting"
      ]
    ]
  ],
  "test_combine_nested_fill_value": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestNestedCombine",
        "test_combine_nested_fill_value"
      ]
    ]
  ],
  "test_combine_by_coords": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestCombineAuto",
        "test_combine_by_coords"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "test_combine_by_coords"
      ]
    ]
  ],
  "test_combine_coords_join": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestCombineAuto",
        "test_combine_coords_join"
      ]
    ]
  ],
  "test_combine_coords_join_exact": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestCombineAuto",
        "test_combine_coords_join_exact"
      ]
    ]
  ],
  "test_combine_coords_combine_attrs": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestCombineAuto",
        "test_combine_coords_combine_attrs"
      ]
    ]
  ],
  "test_combine_coords_combine_attrs_identical": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestCombineAuto",
        "test_combine_coords_combine_attrs_identical"
      ]
    ]
  ],
  "test_infer_order_from_coords": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestCombineAuto",
        "test_infer_order_from_coords"
      ]
    ]
  ],
  "test_combine_leaving_bystander_dimensions": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestCombineAuto",
        "test_combine_leaving_bystander_dimensions"
      ]
    ]
  ],
  "test_combine_by_coords_previously_failed": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestCombineAuto",
        "test_combine_by_coords_previously_failed"
      ]
    ]
  ],
  "test_combine_by_coords_still_fails": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestCombineAuto",
        "test_combine_by_coords_still_fails"
      ]
    ]
  ],
  "test_combine_by_coords_no_concat": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestCombineAuto",
        "test_combine_by_coords_no_concat"
      ]
    ]
  ],
  "test_check_for_impossible_ordering": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestCombineAuto",
        "test_check_for_impossible_ordering"
      ]
    ]
  ],
  "test_combine_by_coords_incomplete_hypercube": [
    [
      "xarray/tests/test_combine.py",
      [
        "TestCombineAuto",
        "test_combine_by_coords_incomplete_hypercube"
      ]
    ]
  ],
  "test_combine_by_coords_distant_cftime_dates": [
    [
      "xarray/tests/test_combine.py",
      [
        "test_combine_by_coords_distant_cftime_dates"
      ]
    ]
  ],
  "test_signature_properties": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_signature_properties"
      ]
    ]
  ],
  "test_result_name": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_result_name"
      ]
    ]
  ],
  "test_ordered_set_union": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_ordered_set_union"
      ]
    ]
  ],
  "test_ordered_set_intersection": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_ordered_set_intersection"
      ]
    ]
  ],
  "test_join_dict_keys": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_join_dict_keys"
      ]
    ]
  ],
  "test_collect_dict_values": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_collect_dict_values"
      ]
    ]
  ],
  "identity": [
    [
      "xarray/tests/test_computation.py",
      [
        "identity"
      ]
    ]
  ],
  "test_apply_identity": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_identity"
      ]
    ]
  ],
  "test_apply_two_inputs": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_two_inputs"
      ]
    ]
  ],
  "test_apply_1d_and_0d": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_1d_and_0d"
      ]
    ]
  ],
  "twice": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_two_outputs",
        "twice"
      ]
    ]
  ],
  "test_apply_two_outputs": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_two_outputs"
      ]
    ]
  ],
  "first_element": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_input_core_dimension",
        "first_element"
      ]
    ]
  ],
  "multiply": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_input_core_dimension",
        "multiply"
      ]
    ]
  ],
  "test_apply_input_core_dimension": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_input_core_dimension"
      ]
    ]
  ],
  "stack_negative": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_output_core_dimension",
        "stack_negative"
      ]
    ],
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_dask_new_output_dimension",
        "stack_negative"
      ]
    ]
  ],
  "original_and_stack_negative": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_output_core_dimension",
        "original_and_stack_negative"
      ]
    ]
  ],
  "test_apply_output_core_dimension": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_output_core_dimension"
      ]
    ]
  ],
  "test_apply_exclude": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_exclude"
      ]
    ]
  ],
  "test_apply_groupby_add": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_groupby_add"
      ]
    ]
  ],
  "test_unified_dim_sizes": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_unified_dim_sizes"
      ]
    ]
  ],
  "test_broadcast_compat_data_1d": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_broadcast_compat_data_1d"
      ]
    ]
  ],
  "test_broadcast_compat_data_2d": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_broadcast_compat_data_2d"
      ]
    ]
  ],
  "test_keep_attrs": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_keep_attrs"
      ]
    ],
    [
      "xarray/tests/test_options.py",
      [
        "test_keep_attrs"
      ]
    ]
  ],
  "test_dataset_join": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_dataset_join"
      ]
    ]
  ],
  "dask_safe_identity": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_dask",
        "dask_safe_identity"
      ]
    ]
  ],
  "test_apply_dask": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_dask"
      ]
    ]
  ],
  "test_apply_dask_parallelized_one_arg": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_dask_parallelized_one_arg"
      ]
    ]
  ],
  "parallel_add": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_dask_parallelized_two_args",
        "parallel_add"
      ]
    ]
  ],
  "check": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_dask_parallelized_two_args",
        "check"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestAsCompatibleData",
        "test_full_like_dask",
        "check"
      ]
    ]
  ],
  "test_apply_dask_parallelized_two_args": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_dask_parallelized_two_args"
      ]
    ]
  ],
  "test_apply_dask_parallelized_errors": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_dask_parallelized_errors"
      ]
    ]
  ],
  "covariance": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_dask_multiple_inputs",
        "covariance"
      ]
    ]
  ],
  "test_apply_dask_multiple_inputs": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_dask_multiple_inputs"
      ]
    ]
  ],
  "test_apply_dask_new_output_dimension": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_apply_dask_new_output_dimension"
      ]
    ]
  ],
  "pandas_median": [
    [
      "xarray/tests/test_computation.py",
      [
        "pandas_median"
      ]
    ]
  ],
  "test_vectorize": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_vectorize"
      ]
    ]
  ],
  "test_vectorize_dask": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_vectorize_dask"
      ]
    ]
  ],
  "arrays_w_tuples": [
    [
      "xarray/tests/test_computation.py",
      [
        "arrays_w_tuples"
      ]
    ]
  ],
  "np_cov_ind": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_cov",
        "if_dim_is_not_None_",
        "np_cov_ind"
      ]
    ]
  ],
  "test_cov": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_cov"
      ]
    ]
  ],
  "np_corr_ind": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_corr",
        "if_dim_is_not_None_",
        "np_corr_ind"
      ]
    ]
  ],
  "test_corr": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_corr"
      ]
    ]
  ],
  "test_covcorr_consistency": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_covcorr_consistency"
      ]
    ]
  ],
  "test_autocov": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_autocov"
      ]
    ]
  ],
  "test_vectorize_dask_new_output_dims": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_vectorize_dask_new_output_dims"
      ]
    ]
  ],
  "test_output_wrong_number": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_output_wrong_number"
      ]
    ]
  ],
  "test_output_wrong_dims": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_output_wrong_dims"
      ]
    ]
  ],
  "truncate": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_output_wrong_dim_size",
        "truncate"
      ]
    ]
  ],
  "apply_truncate_broadcast_invalid": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_output_wrong_dim_size",
        "apply_truncate_broadcast_invalid"
      ]
    ]
  ],
  "apply_truncate_x_x_invalid": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_output_wrong_dim_size",
        "apply_truncate_x_x_invalid"
      ]
    ]
  ],
  "apply_truncate_x_z": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_output_wrong_dim_size",
        "apply_truncate_x_z"
      ]
    ]
  ],
  "apply_truncate_x_x_valid": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_output_wrong_dim_size",
        "apply_truncate_x_x_valid"
      ]
    ]
  ],
  "test_output_wrong_dim_size": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_output_wrong_dim_size"
      ]
    ]
  ],
  "test_dot": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_dot"
      ]
    ],
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_dot"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_dot"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_dot"
      ]
    ]
  ],
  "test_dot_align_coords": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_dot_align_coords"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_dot_align_coords"
      ]
    ]
  ],
  "test_where": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_where"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_where"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_where"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_where"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_where"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_where"
      ]
    ]
  ],
  "test_polyval": [
    [
      "xarray/tests/test_computation.py",
      [
        "test_polyval"
      ]
    ]
  ],
  "test_concat_compat": [
    [
      "xarray/tests/test_concat.py",
      [
        "test_concat_compat"
      ]
    ]
  ],
  "rectify_dim_order": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "rectify_dim_order"
      ]
    ]
  ],
  "test_concat_simple": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat_simple"
      ]
    ]
  ],
  "test_concat_merge_variables_present_in_some_datasets": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat_merge_variables_present_in_some_datasets"
      ]
    ]
  ],
  "test_concat_2": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat_2"
      ]
    ]
  ],
  "test_concat_coords_kwarg": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat_coords_kwarg"
      ]
    ]
  ],
  "test_concat": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat"
      ]
    ],
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataArray",
        "test_concat"
      ]
    ],
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_concat"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_concat"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_concat"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_concat"
      ]
    ]
  ],
  "test_concat_dim_precedence": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat_dim_precedence"
      ]
    ]
  ],
  "test_concat_data_vars": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat_data_vars"
      ]
    ]
  ],
  "test_concat_coords": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat_coords"
      ]
    ]
  ],
  "test_concat_constant_index": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat_constant_index"
      ]
    ]
  ],
  "test_concat_size0": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat_size0"
      ]
    ]
  ],
  "test_concat_autoalign": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat_autoalign"
      ]
    ]
  ],
  "test_concat_errors": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat_errors"
      ]
    ]
  ],
  "test_concat_join_kwarg": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat_join_kwarg"
      ]
    ],
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataArray",
        "test_concat_join_kwarg"
      ]
    ]
  ],
  "test_concat_combine_attrs_kwarg": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat_combine_attrs_kwarg"
      ]
    ],
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataArray",
        "test_concat_combine_attrs_kwarg"
      ]
    ]
  ],
  "test_concat_promote_shape": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat_promote_shape"
      ]
    ]
  ],
  "test_concat_do_not_promote": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat_do_not_promote"
      ]
    ]
  ],
  "test_concat_dim_is_variable": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat_dim_is_variable"
      ]
    ]
  ],
  "test_concat_multiindex": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat_multiindex"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_concat_multiindex"
      ]
    ]
  ],
  "test_concat_fill_value": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataset",
        "test_concat_fill_value"
      ]
    ],
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataArray",
        "test_concat_fill_value"
      ]
    ]
  ],
  "test_concat_encoding": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataArray",
        "test_concat_encoding"
      ]
    ]
  ],
  "test_concat_lazy": [
    [
      "xarray/tests/test_concat.py",
      [
        "TestConcatDataArray",
        "test_concat_lazy"
      ]
    ]
  ],
  "test_concat_attrs_first_variable": [
    [
      "xarray/tests/test_concat.py",
      [
        "test_concat_attrs_first_variable"
      ]
    ]
  ],
  "test_concat_merge_single_non_dim_coord": [
    [
      "xarray/tests/test_concat.py",
      [
        "test_concat_merge_single_non_dim_coord"
      ]
    ]
  ],
  "test_booltype_array": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestBoolTypeArray",
        "test_booltype_array"
      ]
    ]
  ],
  "test": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestNativeEndiannessArray",
        "test"
      ]
    ],
    [
      "xarray/tests/test_utils.py",
      [
        "TestAlias",
        "test"
      ]
    ]
  ],
  "test_decode_cf_with_conflicting_fill_missing_value": [
    [
      "xarray/tests/test_conventions.py",
      [
        "test_decode_cf_with_conflicting_fill_missing_value"
      ]
    ]
  ],
  "test_incompatible_attributes": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestEncodeCFVariable",
        "test_incompatible_attributes"
      ]
    ]
  ],
  "test_missing_fillvalue": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestEncodeCFVariable",
        "test_missing_fillvalue"
      ]
    ]
  ],
  "test_multidimensional_coordinates": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestEncodeCFVariable",
        "test_multidimensional_coordinates"
      ]
    ]
  ],
  "test_do_not_overwrite_user_coordinates": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestEncodeCFVariable",
        "test_do_not_overwrite_user_coordinates"
      ]
    ]
  ],
  "test_string_object_warning": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestEncodeCFVariable",
        "test_string_object_warning"
      ]
    ]
  ],
  "test_dataset": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestDecodeCF",
        "test_dataset"
      ]
    ],
    [
      "xarray/tests/test_interp.py",
      [
        "test_dataset"
      ]
    ]
  ],
  "test_invalid_coordinates": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestDecodeCF",
        "test_invalid_coordinates"
      ]
    ]
  ],
  "test_decode_coordinates": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestDecodeCF",
        "test_decode_coordinates"
      ]
    ]
  ],
  "test_0d_int32_encoding": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestDecodeCF",
        "test_0d_int32_encoding"
      ]
    ]
  ],
  "test_decode_cf_with_multiple_missing_values": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestDecodeCF",
        "test_decode_cf_with_multiple_missing_values"
      ]
    ]
  ],
  "test_decode_cf_with_drop_variables": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestDecodeCF",
        "test_decode_cf_with_drop_variables"
      ]
    ]
  ],
  "test_invalid_time_units_raises_eagerly": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestDecodeCF",
        "test_invalid_time_units_raises_eagerly"
      ]
    ]
  ],
  "test_dataset_repr_with_netcdf4_datetimes": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestDecodeCF",
        "test_dataset_repr_with_netcdf4_datetimes"
      ]
    ]
  ],
  "test_decode_cf_datetime_transition_to_invalid": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestDecodeCF",
        "test_decode_cf_datetime_transition_to_invalid"
      ]
    ]
  ],
  "test_decode_cf_with_dask": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestDecodeCF",
        "test_decode_cf_with_dask"
      ]
    ]
  ],
  "test_decode_dask_times": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestDecodeCF",
        "test_decode_dask_times"
      ]
    ]
  ],
  "test_decode_cf_time_kwargs": [
    [
      "xarray/tests/test_conventions.py",
      [
        "TestDecodeCF",
        "test_decode_cf_time_kwargs"
      ]
    ]
  ],
  "raise_if_dask_computes": [
    [
      "xarray/tests/test_dask.py",
      [
        "raise_if_dask_computes"
      ]
    ]
  ],
  "test_raise_if_dask_computes": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_raise_if_dask_computes"
      ]
    ]
  ],
  "assertLazyAnd": [
    [
      "xarray/tests/test_dask.py",
      [
        "DaskTestCase",
        "assertLazyAnd"
      ]
    ]
  ],
  "assertLazyAndIdentical": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "assertLazyAndIdentical"
      ]
    ],
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "assertLazyAndIdentical"
      ]
    ]
  ],
  "assertLazyAndAllClose": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "assertLazyAndAllClose"
      ]
    ],
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "assertLazyAndAllClose"
      ]
    ]
  ],
  "setUp": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "TestOps",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot1D",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlotStep",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlotHistogram",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestDetermineCmapParams",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestDiscreteColorMap",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid4d",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetedLinePlotsLegend",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetedLinePlots",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestDatasetScatterPlots",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestDatetimePlot",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestCFDatetimePlot",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestNcAxisNotInstalled",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseVariable",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_tutorial.py",
      [
        "TestLoadDataset",
        "setUp"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestBackendIndexing",
        "setUp"
      ]
    ]
  ],
  "test_basics": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_basics"
      ]
    ]
  ],
  "test_copy": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_copy"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_copy"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_copy"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_copy"
      ]
    ]
  ],
  "test_chunk": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_chunk"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_chunk"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_chunk"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "test_chunk"
      ]
    ]
  ],
  "test_squeeze": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_squeeze"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_squeeze"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_squeeze"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_squeeze"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_squeeze"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_squeeze"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_squeeze"
      ]
    ]
  ],
  "test_equals": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_equals"
      ]
    ]
  ],
  "test_transpose": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_transpose"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_transpose"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_transpose"
      ]
    ]
  ],
  "test_shift": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_shift"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_shift"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_shift"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_shift"
      ]
    ]
  ],
  "test_roll": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_roll"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_roll"
      ]
    ]
  ],
  "test_unary_op": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_unary_op"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseVariable",
        "test_unary_op"
      ]
    ]
  ],
  "test_binary_op": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_binary_op"
      ]
    ]
  ],
  "test_repr": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_repr"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_repr"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_repr"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseVariable",
        "test_repr"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_repr"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_repr"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_repr"
      ]
    ]
  ],
  "test_reduce": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_reduce"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_reduce"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reduce"
      ]
    ],
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_reduce"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_reduce"
      ]
    ]
  ],
  "test_missing_values": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_missing_values"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseVariable",
        "test_missing_values"
      ]
    ]
  ],
  "test_missing_methods": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_missing_methods"
      ]
    ]
  ],
  "test_univariate_ufunc": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_univariate_ufunc"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseVariable",
        "test_univariate_ufunc"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_univariate_ufunc"
      ]
    ]
  ],
  "test_bivariate_ufunc": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_bivariate_ufunc"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseVariable",
        "test_bivariate_ufunc"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_bivariate_ufunc"
      ]
    ]
  ],
  "test_compute": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_compute"
      ]
    ],
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_compute"
      ]
    ]
  ],
  "test_persist": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestVariable",
        "test_persist"
      ]
    ],
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_persist"
      ]
    ]
  ],
  "assertLazyAndEqual": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "assertLazyAndEqual"
      ]
    ]
  ],
  "test_rechunk": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_rechunk"
      ]
    ]
  ],
  "test_new_chunk": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_new_chunk"
      ]
    ]
  ],
  "test_lazy_dataset": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_lazy_dataset"
      ]
    ]
  ],
  "test_lazy_array": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_lazy_array"
      ]
    ]
  ],
  "test_concat_loads_variables": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_concat_loads_variables"
      ]
    ]
  ],
  "test_rolling": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_rolling"
      ]
    ],
    [
      "xarray/tests/test_nputils.py",
      [
        "test_rolling"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_rolling"
      ]
    ]
  ],
  "test_groupby_first": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_groupby_first"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_groupby_first"
      ]
    ]
  ],
  "test_reindex": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_reindex"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reindex"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_reindex"
      ]
    ]
  ],
  "test_to_dataset_roundtrip": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_to_dataset_roundtrip"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_to_dataset_roundtrip"
      ]
    ]
  ],
  "test_merge": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_merge"
      ]
    ],
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeMethod",
        "test_merge"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_merge"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_merge"
      ]
    ]
  ],
  "test_ufuncs": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_ufuncs"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_ufuncs"
      ]
    ]
  ],
  "test_where_dispatching": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_where_dispatching"
      ]
    ]
  ],
  "test_simultaneous_compute": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_simultaneous_compute"
      ]
    ]
  ],
  "test_stack": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_stack"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_stack"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_stack"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_stack"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_stack"
      ]
    ]
  ],
  "test_dataarray_repr_legacy": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_dataarray_repr_legacy"
      ]
    ]
  ],
  "test_dataarray_repr": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_dataarray_repr"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_dataarray_repr"
      ]
    ]
  ],
  "test_dataset_repr": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_dataset_repr"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_dataset_repr"
      ]
    ]
  ],
  "test_dataarray_pickle": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_dataarray_pickle"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_dataarray_pickle"
      ]
    ]
  ],
  "test_dataset_pickle": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_dataset_pickle"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_dataset_pickle"
      ]
    ]
  ],
  "test_dataarray_getattr": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_dataarray_getattr"
      ]
    ]
  ],
  "test_dataset_getattr": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_dataset_getattr"
      ]
    ]
  ],
  "test_values": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_values"
      ]
    ]
  ],
  "test_from_dask_variable": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestDataArrayAndDataset",
        "test_from_dask_variable"
      ]
    ]
  ],
  "test_to_dask_dataframe": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestToDaskDataFrame",
        "test_to_dask_dataframe"
      ]
    ]
  ],
  "test_to_dask_dataframe_2D": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestToDaskDataFrame",
        "test_to_dask_dataframe_2D"
      ]
    ]
  ],
  "test_to_dask_dataframe_2D_set_index": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestToDaskDataFrame",
        "test_to_dask_dataframe_2D_set_index"
      ]
    ]
  ],
  "test_to_dask_dataframe_coordinates": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestToDaskDataFrame",
        "test_to_dask_dataframe_coordinates"
      ]
    ]
  ],
  "test_to_dask_dataframe_not_daskarray": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestToDaskDataFrame",
        "test_to_dask_dataframe_not_daskarray"
      ]
    ]
  ],
  "test_to_dask_dataframe_no_coordinate": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestToDaskDataFrame",
        "test_to_dask_dataframe_no_coordinate"
      ]
    ]
  ],
  "test_to_dask_dataframe_dim_order": [
    [
      "xarray/tests/test_dask.py",
      [
        "TestToDaskDataFrame",
        "test_to_dask_dataframe_dim_order"
      ]
    ]
  ],
  "test_dask_kwargs_variable": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_dask_kwargs_variable"
      ]
    ]
  ],
  "test_dask_kwargs_dataarray": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_dask_kwargs_dataarray"
      ]
    ]
  ],
  "test_dask_kwargs_dataset": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_dask_kwargs_dataset"
      ]
    ]
  ],
  "kernel": [
    [
      "xarray/tests/test_dask.py",
      [
        "kernel"
      ]
    ]
  ],
  "build_dask_array": [
    [
      "xarray/tests/test_dask.py",
      [
        "build_dask_array"
      ]
    ]
  ],
  "test_persist_Dataset": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_persist_Dataset"
      ]
    ]
  ],
  "test_persist_DataArray": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_persist_DataArray"
      ]
    ]
  ],
  "test_dataarray_with_dask_coords": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_dataarray_with_dask_coords"
      ]
    ]
  ],
  "test_basic_compute": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_basic_compute"
      ]
    ]
  ],
  "test_dask_layers_and_dependencies": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_dask_layers_and_dependencies"
      ]
    ]
  ],
  "make_da": [
    [
      "xarray/tests/test_dask.py",
      [
        "make_da"
      ]
    ]
  ],
  "map_da": [
    [
      "xarray/tests/test_dask.py",
      [
        "map_da"
      ]
    ]
  ],
  "map_ds": [
    [
      "xarray/tests/test_dask.py",
      [
        "map_ds"
      ]
    ]
  ],
  "test_unify_chunks": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_unify_chunks"
      ]
    ]
  ],
  "test_unify_chunks_shallow_copy": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_unify_chunks_shallow_copy"
      ]
    ]
  ],
  "test_auto_chunk_da": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_auto_chunk_da"
      ]
    ]
  ],
  "bad_func": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_error",
        "bad_func"
      ]
    ]
  ],
  "returns_numpy": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_error",
        "returns_numpy"
      ]
    ]
  ],
  "really_bad_func": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_error",
        "really_bad_func"
      ]
    ]
  ],
  "test_map_blocks_error": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_error"
      ]
    ]
  ],
  "test_map_blocks": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks"
      ]
    ]
  ],
  "test_map_blocks_convert_args_to_list": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_convert_args_to_list"
      ]
    ]
  ],
  "sumda": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_dask_args",
        "sumda"
      ]
    ]
  ],
  "test_map_blocks_dask_args": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_dask_args"
      ]
    ]
  ],
  "test_map_blocks_add_attrs": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_add_attrs"
      ]
    ]
  ],
  "test_map_blocks_change_name": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_change_name"
      ]
    ]
  ],
  "test_map_blocks_kwargs": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_kwargs"
      ]
    ]
  ],
  "test_map_blocks_to_array": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_to_array"
      ]
    ]
  ],
  "test_map_blocks_da_transformations": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_da_transformations"
      ]
    ]
  ],
  "test_map_blocks_ds_transformations": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_ds_transformations"
      ]
    ]
  ],
  "test_map_blocks_da_ds_with_template": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_da_ds_with_template"
      ]
    ]
  ],
  "test_map_blocks_template_convert_object": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_template_convert_object"
      ]
    ]
  ],
  "test_map_blocks_errors_bad_template": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_errors_bad_template"
      ]
    ]
  ],
  "test_map_blocks_errors_bad_template_2": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_errors_bad_template_2"
      ]
    ]
  ],
  "test_map_blocks_object_method": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_object_method"
      ]
    ]
  ],
  "test_map_blocks_hlg_layers": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_map_blocks_hlg_layers"
      ]
    ]
  ],
  "test_make_meta": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_make_meta"
      ]
    ]
  ],
  "test_identical_coords_no_computes": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_identical_coords_no_computes"
      ]
    ]
  ],
  "test_token_changes_on_transform": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_token_changes_on_transform"
      ]
    ]
  ],
  "test_token_changes_when_data_changes": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_token_changes_when_data_changes"
      ]
    ]
  ],
  "test_token_changes_when_buffer_changes": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_token_changes_when_buffer_changes"
      ]
    ]
  ],
  "test_token_identical": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_token_identical"
      ]
    ]
  ],
  "test_recursive_token": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_recursive_token"
      ]
    ]
  ],
  "test_normalize_token_with_backend": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_normalize_token_with_backend"
      ]
    ]
  ],
  "test_lazy_array_equiv_variables": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_lazy_array_equiv_variables"
      ]
    ]
  ],
  "test_lazy_array_equiv_merge": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_lazy_array_equiv_merge"
      ]
    ]
  ],
  "test_transforms_pass_lazy_array_equiv": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_transforms_pass_lazy_array_equiv"
      ]
    ]
  ],
  "test_more_transforms_pass_lazy_array_equiv": [
    [
      "xarray/tests/test_dask.py",
      [
        "test_more_transforms_pass_lazy_array_equiv"
      ]
    ]
  ],
  "test_repr_multiindex": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_repr_multiindex"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_repr_multiindex"
      ]
    ]
  ],
  "test_repr_multiindex_long": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_repr_multiindex_long"
      ]
    ]
  ],
  "test_properties": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_properties"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_properties"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_properties"
      ]
    ]
  ],
  "test_data_property": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_data_property"
      ]
    ]
  ],
  "test_indexes": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_indexes"
      ]
    ]
  ],
  "test_get_index": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_get_index"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_get_index"
      ]
    ]
  ],
  "test_get_index_size_zero": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_get_index_size_zero"
      ]
    ]
  ],
  "test_struct_array_dims": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_struct_array_dims"
      ]
    ]
  ],
  "test_name": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_name"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_name"
      ]
    ]
  ],
  "test_dims": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_dims"
      ]
    ]
  ],
  "test_sizes": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_sizes"
      ]
    ]
  ],
  "test_encoding": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_encoding"
      ]
    ]
  ],
  "test_constructor": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_constructor"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_constructor"
      ]
    ]
  ],
  "test_constructor_invalid": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_constructor_invalid"
      ]
    ]
  ],
  "test_constructor_from_self_described": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_constructor_from_self_described"
      ]
    ]
  ],
  "test_constructor_from_0d": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_constructor_from_0d"
      ]
    ]
  ],
  "test_constructor_dask_coords": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_constructor_dask_coords"
      ]
    ]
  ],
  "test_equals_and_identical": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_equals_and_identical"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_equals_and_identical"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_equals_and_identical"
      ]
    ]
  ],
  "test_equals_failures": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_equals_failures"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_equals_failures"
      ]
    ]
  ],
  "test_broadcast_equals": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_broadcast_equals"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_broadcast_equals"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_broadcast_equals"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_broadcast_equals"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_broadcast_equals"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_broadcast_equals"
      ]
    ]
  ],
  "test_getitem": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_getitem"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_getitem"
      ]
    ]
  ],
  "test_getitem_dict": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_getitem_dict"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_getitem_dict"
      ]
    ]
  ],
  "test_getitem_coords": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_getitem_coords"
      ]
    ]
  ],
  "test_getitem_dataarray": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_getitem_dataarray"
      ]
    ]
  ],
  "test_getitem_empty_index": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_getitem_empty_index"
      ]
    ]
  ],
  "test_setitem": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_setitem"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_setitem"
      ]
    ],
    [
      "xarray/tests/test_indexing.py",
      [
        "TestCopyOnWriteArray",
        "test_setitem"
      ]
    ],
    [
      "xarray/tests/test_indexing.py",
      [
        "TestMemoryCachedArray",
        "test_setitem"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_setitem"
      ]
    ]
  ],
  "test_setitem_fancy": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_setitem_fancy"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_setitem_fancy"
      ]
    ]
  ],
  "get_data": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_setitem_dataarray",
        "get_data"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_loc_assign_dataarray",
        "get_data"
      ]
    ]
  ],
  "test_setitem_dataarray": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_setitem_dataarray"
      ]
    ]
  ],
  "test_attr_sources_multiindex": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_attr_sources_multiindex"
      ]
    ]
  ],
  "test_isel_types": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_isel_types"
      ]
    ]
  ],
  "test_isel_fancy": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_isel_fancy"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_isel_fancy"
      ]
    ]
  ],
  "test_sel": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_sel"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_selection_multiindex",
        "test_sel"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_sel"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_selection_multiindex",
        "test_sel"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_sel"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_sel"
      ]
    ]
  ],
  "test_sel_dataarray": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_sel_dataarray"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_sel_dataarray"
      ]
    ]
  ],
  "test_sel_invalid_slice": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_sel_invalid_slice"
      ]
    ]
  ],
  "test_sel_dataarray_datetime": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_sel_dataarray_datetime"
      ]
    ]
  ],
  "test_sel_float": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_sel_float"
      ]
    ]
  ],
  "test_sel_no_index": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_sel_no_index"
      ]
    ]
  ],
  "test_sel_method": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_sel_method"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_sel_method"
      ]
    ]
  ],
  "test_sel_drop": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_sel_drop"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_sel_drop"
      ]
    ]
  ],
  "test_isel_drop": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_isel_drop"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_isel_drop"
      ]
    ]
  ],
  "test_head": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_head"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_head"
      ]
    ]
  ],
  "test_tail": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_tail"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_tail"
      ]
    ]
  ],
  "test_thin": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_thin"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_thin"
      ]
    ]
  ],
  "test_loc": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_loc"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_loc"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_loc"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_loc"
      ]
    ]
  ],
  "test_loc_assign": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_loc_assign"
      ]
    ]
  ],
  "test_loc_assign_dataarray": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_loc_assign_dataarray"
      ]
    ]
  ],
  "test_loc_single_boolean": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_loc_single_boolean"
      ]
    ]
  ],
  "test_selection_multiindex": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_selection_multiindex"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_selection_multiindex"
      ]
    ]
  ],
  "test_selection_multiindex_remove_unused": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_selection_multiindex_remove_unused"
      ]
    ]
  ],
  "test_selection_multiindex_from_level": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_selection_multiindex_from_level"
      ]
    ]
  ],
  "test_stack_groupby_unsorted_coord": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_stack_groupby_unsorted_coord"
      ]
    ]
  ],
  "test_virtual_default_coords": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_virtual_default_coords"
      ]
    ]
  ],
  "test_virtual_time_components": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_virtual_time_components"
      ]
    ]
  ],
  "test_coords": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_coords"
      ]
    ]
  ],
  "test_coords_to_index": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_coords_to_index"
      ]
    ]
  ],
  "test_coord_coords": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_coord_coords"
      ]
    ]
  ],
  "test_reset_coords": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_reset_coords"
      ]
    ]
  ],
  "test_assign_coords": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_assign_coords"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_assign_coords"
      ]
    ]
  ],
  "test_coords_alignment": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_coords_alignment"
      ]
    ]
  ],
  "test_set_coords_update_index": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_set_coords_update_index"
      ]
    ]
  ],
  "test_coords_replacement_alignment": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_coords_replacement_alignment"
      ]
    ]
  ],
  "test_coords_non_string": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_coords_non_string"
      ]
    ]
  ],
  "test_coords_delitem_delete_indexes": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_coords_delitem_delete_indexes"
      ]
    ]
  ],
  "test_broadcast_like": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_broadcast_like"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_broadcast_like"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_broadcast_like"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_broadcast_like"
      ]
    ]
  ],
  "test_reindex_like": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_reindex_like"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reindex_like"
      ]
    ]
  ],
  "test_reindex_like_no_index": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_reindex_like_no_index"
      ]
    ]
  ],
  "test_reindex_regressions": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_reindex_regressions"
      ]
    ]
  ],
  "test_reindex_method": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_reindex_method"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reindex_method"
      ]
    ]
  ],
  "test_reindex_fill_value": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_reindex_fill_value"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reindex_fill_value"
      ]
    ]
  ],
  "test_rename": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_rename"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_rename"
      ]
    ]
  ],
  "test_init_value": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_init_value"
      ]
    ]
  ],
  "test_swap_dims": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_swap_dims"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_swap_dims"
      ]
    ]
  ],
  "test_expand_dims_error": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_expand_dims_error"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_expand_dims_error"
      ]
    ]
  ],
  "test_expand_dims": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_expand_dims"
      ]
    ]
  ],
  "test_expand_dims_with_scalar_coordinate": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_expand_dims_with_scalar_coordinate"
      ]
    ]
  ],
  "test_expand_dims_with_greater_dim_size": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_expand_dims_with_greater_dim_size"
      ]
    ]
  ],
  "test_set_index": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_set_index"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_set_index"
      ]
    ]
  ],
  "test_reset_index": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_reset_index"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reset_index"
      ]
    ]
  ],
  "test_reset_index_keep_attrs": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_reset_index_keep_attrs"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reset_index_keep_attrs"
      ]
    ]
  ],
  "test_reorder_levels": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_reorder_levels"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reorder_levels"
      ]
    ]
  ],
  "test_dataset_getitem": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_dataset_getitem"
      ]
    ]
  ],
  "test_array_interface": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_array_interface"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_array_interface"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariableWithDask",
        "test_array_interface"
      ]
    ]
  ],
  "test_is_null": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_is_null"
      ]
    ]
  ],
  "test_math": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_math"
      ]
    ]
  ],
  "test_math_automatic_alignment": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_math_automatic_alignment"
      ]
    ]
  ],
  "test_non_overlapping_dataarrays_return_empty_result": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_non_overlapping_dataarrays_return_empty_result"
      ]
    ]
  ],
  "test_empty_dataarrays_return_empty_result": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_empty_dataarrays_return_empty_result"
      ]
    ]
  ],
  "test_inplace_math_basics": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_inplace_math_basics"
      ]
    ]
  ],
  "test_inplace_math_automatic_alignment": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_inplace_math_automatic_alignment"
      ]
    ]
  ],
  "test_math_name": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_math_name"
      ]
    ]
  ],
  "test_math_with_coords": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_math_with_coords"
      ]
    ]
  ],
  "test_index_math": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_index_math"
      ]
    ]
  ],
  "test_dataset_math": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_dataset_math"
      ]
    ]
  ],
  "test_stack_unstack": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_stack_unstack"
      ]
    ]
  ],
  "test_stack_unstack_decreasing_coordinate": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_stack_unstack_decreasing_coordinate"
      ]
    ]
  ],
  "test_unstack_pandas_consistency": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_unstack_pandas_consistency"
      ]
    ]
  ],
  "test_stack_nonunique_consistency": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_stack_nonunique_consistency"
      ]
    ]
  ],
  "test_to_unstacked_dataset_raises_value_error": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_to_unstacked_dataset_raises_value_error"
      ]
    ]
  ],
  "test_squeeze_drop": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_squeeze_drop"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_squeeze_drop"
      ]
    ]
  ],
  "test_drop_coordinates": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_drop_coordinates"
      ]
    ]
  ],
  "test_drop_index_labels": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_drop_index_labels"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_drop_index_labels"
      ]
    ]
  ],
  "test_where_lambda": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_where_lambda"
      ]
    ]
  ],
  "test_where_string": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_where_string"
      ]
    ]
  ],
  "test_cumops": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_cumops"
      ]
    ]
  ],
  "test_reduce_keepdims": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_reduce_keepdims"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reduce_keepdims"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_reduce_keepdims"
      ]
    ]
  ],
  "test_reduce_keepdims_bottleneck": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_reduce_keepdims_bottleneck"
      ]
    ]
  ],
  "test_reduce_dtype": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_reduce_dtype"
      ]
    ]
  ],
  "test_reduce_out": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_reduce_out"
      ]
    ]
  ],
  "test_quantile": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_quantile"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_quantile"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_quantile"
      ]
    ]
  ],
  "test_reduce_keep_attrs": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_reduce_keep_attrs"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reduce_keep_attrs"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_reduce_keep_attrs"
      ]
    ]
  ],
  "test_assign_attrs": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_assign_attrs"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_assign_attrs"
      ]
    ]
  ],
  "test_fillna": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_fillna"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_fillna"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_fillna"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_fillna"
      ]
    ]
  ],
  "test_groupby_iter": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_iter"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_groupby_iter"
      ]
    ]
  ],
  "make_groupby_example_array": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "make_groupby_example_array"
      ]
    ]
  ],
  "test_groupby_properties": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_properties"
      ]
    ]
  ],
  "test_groupby_map_identity": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_map_identity"
      ]
    ]
  ],
  "test_groupby_sum": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_sum"
      ]
    ]
  ],
  "test_groupby_sum_default": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_sum_default"
      ]
    ]
  ],
  "test_groupby_count": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_count"
      ]
    ]
  ],
  "test_groupby_reduce_attrs": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_reduce_attrs"
      ]
    ]
  ],
  "test_groupby_map_center": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_map_center"
      ]
    ]
  ],
  "test_groupby_map_ndarray": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_map_ndarray"
      ]
    ]
  ],
  "test_groupby_map_changes_metadata": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_map_changes_metadata"
      ]
    ]
  ],
  "test_groupby_math": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_math"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_groupby_math"
      ]
    ]
  ],
  "test_groupby_math_not_aligned": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_math_not_aligned"
      ]
    ]
  ],
  "test_groupby_restore_dim_order": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_restore_dim_order"
      ]
    ]
  ],
  "test_groupby_restore_coord_dims": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_restore_coord_dims"
      ]
    ]
  ],
  "test_groupby_first_and_last": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_first_and_last"
      ]
    ]
  ],
  "make_groupby_multidim_example_array": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "make_groupby_multidim_example_array"
      ]
    ]
  ],
  "test_groupby_multidim": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_multidim"
      ]
    ]
  ],
  "test_groupby_multidim_map": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_multidim_map"
      ]
    ]
  ],
  "test_groupby_bins": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_bins"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_groupby_bins"
      ]
    ]
  ],
  "test_groupby_bins_empty": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_bins_empty"
      ]
    ]
  ],
  "test_groupby_bins_multidim": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_bins_multidim"
      ]
    ]
  ],
  "test_groupby_bins_sort": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_groupby_bins_sort"
      ]
    ]
  ],
  "test_da_resample_func_args": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_da_resample_func_args"
      ]
    ]
  ],
  "test_resample_first": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_resample_first"
      ]
    ]
  ],
  "test_resample_bad_resample_dim": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_resample_bad_resample_dim"
      ]
    ]
  ],
  "test_resample_drop_nondim_coords": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_resample_drop_nondim_coords"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_resample_drop_nondim_coords"
      ]
    ]
  ],
  "test_resample_keep_attrs": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_resample_keep_attrs"
      ]
    ]
  ],
  "test_resample_skipna": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_resample_skipna"
      ]
    ]
  ],
  "test_upsample": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_upsample"
      ]
    ]
  ],
  "test_upsample_nd": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_upsample_nd"
      ]
    ]
  ],
  "test_upsample_tolerance": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_upsample_tolerance"
      ]
    ]
  ],
  "test_upsample_interpolate": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_upsample_interpolate"
      ]
    ]
  ],
  "test_upsample_interpolate_bug_2197": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_upsample_interpolate_bug_2197"
      ]
    ]
  ],
  "test_upsample_interpolate_regression_1605": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_upsample_interpolate_regression_1605"
      ]
    ]
  ],
  "test_upsample_interpolate_dask": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_upsample_interpolate_dask"
      ]
    ]
  ],
  "test_align": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_align"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_align"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_align"
      ]
    ]
  ],
  "test_align_dtype": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_align_dtype"
      ]
    ]
  ],
  "test_align_copy": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_align_copy"
      ]
    ]
  ],
  "test_align_override": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_align_override"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_align_override"
      ]
    ]
  ],
  "test_align_override_error": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_align_override_error"
      ]
    ]
  ],
  "test_align_exclude": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_align_exclude"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_align_exclude"
      ]
    ]
  ],
  "test_align_indexes": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_align_indexes"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_align_indexes"
      ]
    ]
  ],
  "test_align_without_indexes_exclude": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_align_without_indexes_exclude"
      ]
    ]
  ],
  "test_align_mixed_indexes": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_align_mixed_indexes"
      ]
    ]
  ],
  "test_align_without_indexes_errors": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_align_without_indexes_errors"
      ]
    ]
  ],
  "test_broadcast_arrays": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_broadcast_arrays"
      ]
    ]
  ],
  "test_broadcast_arrays_misaligned": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_broadcast_arrays_misaligned"
      ]
    ]
  ],
  "test_broadcast_arrays_nocopy": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_broadcast_arrays_nocopy"
      ]
    ]
  ],
  "test_broadcast_arrays_exclude": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_broadcast_arrays_exclude"
      ]
    ]
  ],
  "test_broadcast_coordinates": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_broadcast_coordinates"
      ]
    ]
  ],
  "test_to_pandas": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_to_pandas"
      ]
    ]
  ],
  "test_to_dataframe": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_to_dataframe"
      ]
    ]
  ],
  "test_to_pandas_name_matches_coordinate": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_to_pandas_name_matches_coordinate"
      ]
    ]
  ],
  "test_to_and_from_series": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_to_and_from_series"
      ]
    ]
  ],
  "test_from_series_multiindex": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_from_series_multiindex"
      ]
    ]
  ],
  "test_from_series_sparse": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_from_series_sparse"
      ]
    ]
  ],
  "test_from_multiindex_series_sparse": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_from_multiindex_series_sparse"
      ]
    ]
  ],
  "test_to_and_from_empty_series": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_to_and_from_empty_series"
      ]
    ]
  ],
  "test_series_categorical_index": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_series_categorical_index"
      ]
    ]
  ],
  "test_to_and_from_dict": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_to_and_from_dict"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_to_and_from_dict"
      ]
    ]
  ],
  "test_to_and_from_dict_with_time_dim": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_to_and_from_dict_with_time_dim"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_to_and_from_dict_with_time_dim"
      ]
    ]
  ],
  "test_to_and_from_dict_with_nan_nat": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_to_and_from_dict_with_nan_nat"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_to_and_from_dict_with_nan_nat"
      ]
    ]
  ],
  "test_to_dict_with_numpy_attrs": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_to_dict_with_numpy_attrs"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_to_dict_with_numpy_attrs"
      ]
    ]
  ],
  "test_to_masked_array": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_to_masked_array"
      ]
    ]
  ],
  "test_to_and_from_cdms2_classic": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_to_and_from_cdms2_classic"
      ]
    ]
  ],
  "test_to_and_from_cdms2_sgrid": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_to_and_from_cdms2_sgrid"
      ]
    ]
  ],
  "test_to_and_from_cdms2_ugrid": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_to_and_from_cdms2_ugrid"
      ]
    ]
  ],
  "test_to_dataset_whole": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_to_dataset_whole"
      ]
    ]
  ],
  "test_to_dataset_split": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_to_dataset_split"
      ]
    ]
  ],
  "test_to_dataset_retains_keys": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_to_dataset_retains_keys"
      ]
    ]
  ],
  "test__title_for_slice": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test__title_for_slice"
      ]
    ]
  ],
  "test__title_for_slice_truncate": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test__title_for_slice_truncate"
      ]
    ]
  ],
  "test_dataarray_diff_n1": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_dataarray_diff_n1"
      ]
    ]
  ],
  "test_coordinate_diff": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_coordinate_diff"
      ]
    ]
  ],
  "test_roll_coords": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_roll_coords"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_roll_coords"
      ]
    ]
  ],
  "test_roll_no_coords": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_roll_no_coords"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_roll_no_coords"
      ]
    ]
  ],
  "test_roll_coords_none": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_roll_coords_none"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_roll_coords_none"
      ]
    ]
  ],
  "test_copy_with_data": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_copy_with_data"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_copy_with_data"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_copy_with_data"
      ]
    ]
  ],
  "test_copy_coords": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_copy_coords"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_copy_coords"
      ]
    ]
  ],
  "test_real_and_imag": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_real_and_imag"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_real_and_imag"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_real_and_imag"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_real_and_imag"
      ]
    ]
  ],
  "test_setattr_raises": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_setattr_raises"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_setattr_raises"
      ]
    ]
  ],
  "test_full_like": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_full_like"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_full_like"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestAsCompatibleData",
        "test_full_like"
      ]
    ]
  ],
  "test_matmul": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_matmul"
      ]
    ]
  ],
  "test_matmul_align_coords": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_matmul_align_coords"
      ]
    ]
  ],
  "test_binary_op_propagate_indexes": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_binary_op_propagate_indexes"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_binary_op_propagate_indexes"
      ]
    ]
  ],
  "test_binary_op_join_setting": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_binary_op_join_setting"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_binary_op_join_setting"
      ]
    ]
  ],
  "test_combine_first": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_combine_first"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_combine_first"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_combine_first"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_combine_first"
      ]
    ]
  ],
  "test_sortby": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_sortby"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_sortby"
      ]
    ]
  ],
  "test_rank": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_rank"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_rank"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_rank"
      ]
    ]
  ],
  "test_polyfit": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_polyfit"
      ]
    ]
  ],
  "test_pad_constant": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_pad_constant"
      ]
    ]
  ],
  "test_pad_coords": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_pad_coords"
      ]
    ]
  ],
  "test_pad_stat_length": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_pad_stat_length"
      ]
    ]
  ],
  "test_pad_linear_ramp": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_pad_linear_ramp"
      ]
    ]
  ],
  "test_pad_reflect": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestDataArray",
        "test_pad_reflect"
      ]
    ]
  ],
  "test_min": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestReduce1D",
        "test_min"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestReduce2D",
        "test_min"
      ]
    ]
  ],
  "test_max": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestReduce1D",
        "test_max"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestReduce2D",
        "test_max"
      ]
    ]
  ],
  "test_argmin": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestReduce1D",
        "test_argmin"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestReduce2D",
        "test_argmin"
      ]
    ]
  ],
  "test_argmax": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestReduce1D",
        "test_argmax"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestReduce2D",
        "test_argmax"
      ]
    ]
  ],
  "test_idxmin": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestReduce1D",
        "test_idxmin"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestReduce2D",
        "test_idxmin"
      ]
    ]
  ],
  "test_idxmax": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestReduce1D",
        "test_idxmax"
      ]
    ],
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestReduce2D",
        "test_idxmax"
      ]
    ]
  ],
  "test_idxminmax_dask": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestReduceND",
        "test_idxminmax_dask"
      ]
    ]
  ],
  "da_dask": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "da_dask"
      ]
    ]
  ],
  "test_isin": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_isin"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "test_isin"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_isin"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_isin"
      ]
    ]
  ],
  "test_rolling_iter": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_rolling_iter"
      ]
    ]
  ],
  "test_rolling_doc": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_rolling_doc"
      ]
    ]
  ],
  "test_rolling_properties": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_rolling_properties"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "test_rolling_properties"
      ]
    ]
  ],
  "test_rolling_wrapped_bottleneck": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_rolling_wrapped_bottleneck"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "test_rolling_wrapped_bottleneck"
      ]
    ]
  ],
  "test_rolling_wrapped_dask": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_rolling_wrapped_dask"
      ]
    ]
  ],
  "test_rolling_wrapped_dask_nochunk": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_rolling_wrapped_dask_nochunk"
      ]
    ]
  ],
  "test_rolling_pandas_compat": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_rolling_pandas_compat"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "test_rolling_pandas_compat"
      ]
    ]
  ],
  "test_rolling_construct": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_rolling_construct"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "test_rolling_construct"
      ]
    ]
  ],
  "test_rolling_reduce": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_rolling_reduce"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "test_rolling_reduce"
      ]
    ]
  ],
  "test_rolling_reduce_nonnumeric": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_rolling_reduce_nonnumeric"
      ]
    ]
  ],
  "test_rolling_count_correct": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_rolling_count_correct"
      ]
    ]
  ],
  "test_raise_no_warning_for_nan_in_binary_ops": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_raise_no_warning_for_nan_in_binary_ops"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "test_raise_no_warning_for_nan_in_binary_ops"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "test_raise_no_warning_for_nan_in_binary_ops"
      ]
    ]
  ],
  "test_name_in_masking": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_name_in_masking"
      ]
    ]
  ],
  "test_to_and_from_iris": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestIrisConversion",
        "test_to_and_from_iris"
      ]
    ]
  ],
  "test_to_and_from_iris_dask": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestIrisConversion",
        "test_to_and_from_iris_dask"
      ]
    ]
  ],
  "test_da_name_from_cube": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestIrisConversion",
        "test_da_name_from_cube"
      ]
    ]
  ],
  "test_da_coord_name_from_cube": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestIrisConversion",
        "test_da_coord_name_from_cube"
      ]
    ]
  ],
  "test_prevent_duplicate_coord_names": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestIrisConversion",
        "test_prevent_duplicate_coord_names"
      ]
    ]
  ],
  "test_fallback_to_iris_AuxCoord": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "TestIrisConversion",
        "test_fallback_to_iris_AuxCoord"
      ]
    ]
  ],
  "test_rolling_exp": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_rolling_exp"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "test_rolling_exp"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_rolling_exp"
      ]
    ]
  ],
  "test_no_dict": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_no_dict"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "test_no_dict"
      ]
    ]
  ],
  "test_subclass_slots": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_subclass_slots"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "test_subclass_slots"
      ]
    ]
  ],
  "test_weakref": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_weakref"
      ]
    ],
    [
      "xarray/tests/test_dataset.py",
      [
        "test_weakref"
      ]
    ]
  ],
  "test_delete_coords": [
    [
      "xarray/tests/test_dataarray.py",
      [
        "test_delete_coords"
      ]
    ]
  ],
  "create_test_data": [
    [
      "xarray/tests/test_dataset.py",
      [
        "create_test_data"
      ]
    ]
  ],
  "create_append_test_data": [
    [
      "xarray/tests/test_dataset.py",
      [
        "create_append_test_data"
      ]
    ]
  ],
  "create_test_multiindex": [
    [
      "xarray/tests/test_dataset.py",
      [
        "create_test_multiindex"
      ]
    ]
  ],
  "create_test_stacked_array": [
    [
      "xarray/tests/test_dataset.py",
      [
        "create_test_stacked_array"
      ]
    ]
  ],
  "test_repr_period_index": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_repr_period_index"
      ]
    ]
  ],
  "test_unicode_data": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_unicode_data"
      ]
    ]
  ],
  "test_repr_nep18": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_repr_nep18"
      ]
    ]
  ],
  "test_info": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_info"
      ]
    ]
  ],
  "test_constructor_invalid_dims": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_constructor_invalid_dims"
      ]
    ]
  ],
  "test_constructor_1d": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_constructor_1d"
      ]
    ]
  ],
  "test_constructor_0d": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_constructor_0d"
      ]
    ]
  ],
  "test_constructor_deprecated": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_constructor_deprecated"
      ]
    ]
  ],
  "test_constructor_auto_align": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_constructor_auto_align"
      ]
    ]
  ],
  "test_constructor_pandas_sequence": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_constructor_pandas_sequence"
      ]
    ]
  ],
  "test_constructor_pandas_single": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_constructor_pandas_single"
      ]
    ]
  ],
  "test_constructor_compat": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_constructor_compat"
      ]
    ]
  ],
  "test_constructor_with_coords": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_constructor_with_coords"
      ]
    ]
  ],
  "test_asarray": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_asarray"
      ]
    ]
  ],
  "test_attr_access": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_attr_access"
      ]
    ]
  ],
  "test_variable": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_variable"
      ]
    ]
  ],
  "test_modify_inplace": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_modify_inplace"
      ]
    ]
  ],
  "test_coords_properties": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_coords_properties"
      ]
    ]
  ],
  "test_coords_modify": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_coords_modify"
      ]
    ]
  ],
  "test_update_index": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_update_index"
      ]
    ]
  ],
  "test_coords_setitem_with_new_dimension": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_coords_setitem_with_new_dimension"
      ]
    ]
  ],
  "test_coords_setitem_multiindex": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_coords_setitem_multiindex"
      ]
    ]
  ],
  "test_coords_set": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_coords_set"
      ]
    ]
  ],
  "test_coords_to_dataset": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_coords_to_dataset"
      ]
    ]
  ],
  "test_coords_merge": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_coords_merge"
      ]
    ]
  ],
  "test_coords_merge_mismatched_shape": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_coords_merge_mismatched_shape"
      ]
    ]
  ],
  "test_data_vars_properties": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_data_vars_properties"
      ]
    ]
  ],
  "test_attrs": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_attrs"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_attrs"
      ]
    ]
  ],
  "get_dask_names": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_chunk",
        "get_dask_names"
      ]
    ]
  ],
  "test_dask_is_lazy": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_dask_is_lazy"
      ]
    ]
  ],
  "test_sel_dataarray_mindex": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_sel_dataarray_mindex"
      ]
    ]
  ],
  "test_sel_categorical": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_sel_categorical"
      ]
    ]
  ],
  "test_sel_categorical_error": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_sel_categorical_error"
      ]
    ]
  ],
  "test_categorical_index": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_categorical_index"
      ]
    ]
  ],
  "test_categorical_reindex": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_categorical_reindex"
      ]
    ]
  ],
  "test_categorical_multiindex": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_categorical_multiindex"
      ]
    ]
  ],
  "test_sel_fancy": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_sel_fancy"
      ]
    ]
  ],
  "test_reindex_warning": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reindex_warning"
      ]
    ]
  ],
  "test_reindex_variables_copied": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reindex_variables_copied"
      ]
    ]
  ],
  "test_reindex_like_fill_value": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reindex_like_fill_value"
      ]
    ]
  ],
  "test_align_fill_value": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_align_fill_value"
      ]
    ]
  ],
  "test_align_exact": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_align_exact"
      ]
    ]
  ],
  "test_align_nocopy": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_align_nocopy"
      ]
    ]
  ],
  "test_align_non_unique": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_align_non_unique"
      ]
    ]
  ],
  "test_broadcast": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_broadcast"
      ]
    ]
  ],
  "test_broadcast_nocopy": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_broadcast_nocopy"
      ]
    ]
  ],
  "test_broadcast_exclude": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_broadcast_exclude"
      ]
    ]
  ],
  "test_broadcast_misaligned": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_broadcast_misaligned"
      ]
    ]
  ],
  "test_variable_indexing": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_variable_indexing"
      ]
    ]
  ],
  "test_drop_variables": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_drop_variables"
      ]
    ]
  ],
  "test_drop_labels_by_keyword": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_drop_labels_by_keyword"
      ]
    ]
  ],
  "test_drop_dims": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_drop_dims"
      ]
    ]
  ],
  "test_copy_with_data_errors": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_copy_with_data_errors"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_copy_with_data_errors"
      ]
    ]
  ],
  "test_rename_old_name": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_rename_old_name"
      ]
    ]
  ],
  "test_rename_same_name": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_rename_same_name"
      ]
    ]
  ],
  "test_rename_inplace": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_rename_inplace"
      ]
    ]
  ],
  "test_rename_dims": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_rename_dims"
      ]
    ]
  ],
  "test_rename_vars": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_rename_vars"
      ]
    ]
  ],
  "test_rename_multiindex": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_rename_multiindex"
      ]
    ]
  ],
  "test_rename_does_not_change_CFTimeIndex_type": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_rename_does_not_change_CFTimeIndex_type"
      ]
    ]
  ],
  "test_rename_does_not_change_DatetimeIndex_type": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_rename_does_not_change_DatetimeIndex_type"
      ]
    ]
  ],
  "test_expand_dims_int": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_expand_dims_int"
      ]
    ]
  ],
  "test_expand_dims_coords": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_expand_dims_coords"
      ]
    ]
  ],
  "test_expand_dims_existing_scalar_coord": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_expand_dims_existing_scalar_coord"
      ]
    ]
  ],
  "test_isel_expand_dims_roundtrip": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_isel_expand_dims_roundtrip"
      ]
    ]
  ],
  "test_expand_dims_mixed_int_and_coords": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_expand_dims_mixed_int_and_coords"
      ]
    ]
  ],
  "test_expand_dims_kwargs_python36plus": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_expand_dims_kwargs_python36plus"
      ]
    ]
  ],
  "test_unstack": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_unstack"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_unstack"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_unstack"
      ]
    ]
  ],
  "test_unstack_errors": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_unstack_errors"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_unstack_errors"
      ]
    ]
  ],
  "test_unstack_fill_value": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_unstack_fill_value"
      ]
    ]
  ],
  "test_unstack_sparse": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_unstack_sparse"
      ]
    ]
  ],
  "test_stack_unstack_fast": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_stack_unstack_fast"
      ]
    ]
  ],
  "test_stack_unstack_slow": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_stack_unstack_slow"
      ]
    ]
  ],
  "test_to_stacked_array_invalid_sample_dims": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_to_stacked_array_invalid_sample_dims"
      ]
    ]
  ],
  "test_to_stacked_array_name": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_to_stacked_array_name"
      ]
    ]
  ],
  "test_to_stacked_array_dtype_dims": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_to_stacked_array_dtype_dims"
      ]
    ]
  ],
  "test_to_stacked_array_to_unstacked_dataset": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_to_stacked_array_to_unstacked_dataset"
      ]
    ]
  ],
  "test_to_stacked_array_to_unstacked_dataset_different_dimension": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_to_stacked_array_to_unstacked_dataset_different_dimension"
      ]
    ]
  ],
  "test_update": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_update"
      ]
    ]
  ],
  "test_update_overwrite_coords": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_update_overwrite_coords"
      ]
    ]
  ],
  "test_update_auto_align": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_update_auto_align"
      ]
    ]
  ],
  "test_getitem_hashable": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_getitem_hashable"
      ]
    ]
  ],
  "test_virtual_variables_default_coords": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_virtual_variables_default_coords"
      ]
    ]
  ],
  "test_virtual_variables_time": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_virtual_variables_time"
      ]
    ]
  ],
  "test_virtual_variable_same_name": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_virtual_variable_same_name"
      ]
    ]
  ],
  "test_virtual_variable_multiindex": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_virtual_variable_multiindex"
      ]
    ]
  ],
  "test_time_season": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_time_season"
      ]
    ]
  ],
  "test_slice_virtual_variable": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_slice_virtual_variable"
      ]
    ]
  ],
  "test_setitem_pandas": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_setitem_pandas"
      ]
    ]
  ],
  "test_setitem_auto_align": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_setitem_auto_align"
      ]
    ]
  ],
  "test_setitem_dimension_override": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_setitem_dimension_override"
      ]
    ]
  ],
  "test_setitem_with_coords": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_setitem_with_coords"
      ]
    ]
  ],
  "test_setitem_align_new_indexes": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_setitem_align_new_indexes"
      ]
    ]
  ],
  "test_assign": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_assign"
      ]
    ]
  ],
  "test_assign_multiindex_level": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_assign_multiindex_level"
      ]
    ]
  ],
  "test_merge_multiindex_level": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_merge_multiindex_level"
      ]
    ]
  ],
  "test_setitem_original_non_unique_index": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_setitem_original_non_unique_index"
      ]
    ]
  ],
  "test_setitem_both_non_unique_index": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_setitem_both_non_unique_index"
      ]
    ]
  ],
  "test_setitem_multiindex_level": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_setitem_multiindex_level"
      ]
    ]
  ],
  "test_delitem": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_delitem"
      ]
    ]
  ],
  "test_groupby_returns_new_type": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_groupby_returns_new_type"
      ]
    ]
  ],
  "test_groupby_errors": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_groupby_errors"
      ]
    ]
  ],
  "test_groupby_reduce": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_groupby_reduce"
      ]
    ]
  ],
  "reorder_dims": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_groupby_math",
        "reorder_dims"
      ]
    ]
  ],
  "test_groupby_math_virtual": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_groupby_math_virtual"
      ]
    ]
  ],
  "test_groupby_nan": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_groupby_nan"
      ]
    ]
  ],
  "test_groupby_order": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_groupby_order"
      ]
    ]
  ],
  "test_resample_and_first": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_resample_and_first"
      ]
    ]
  ],
  "test_resample_min_count": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_resample_min_count"
      ]
    ]
  ],
  "test_resample_by_mean_with_keep_attrs": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_resample_by_mean_with_keep_attrs"
      ]
    ]
  ],
  "test_resample_loffset": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_resample_loffset"
      ]
    ]
  ],
  "test_resample_by_mean_discarding_attrs": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_resample_by_mean_discarding_attrs"
      ]
    ]
  ],
  "test_resample_by_last_discarding_attrs": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_resample_by_last_discarding_attrs"
      ]
    ]
  ],
  "test_resample_old_api": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_resample_old_api"
      ]
    ]
  ],
  "test_resample_ds_da_are_the_same": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_resample_ds_da_are_the_same"
      ]
    ]
  ],
  "test_ds_resample_apply_func_args": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_ds_resample_apply_func_args"
      ]
    ]
  ],
  "test_to_array": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_to_array"
      ]
    ]
  ],
  "test_to_and_from_dataframe": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_to_and_from_dataframe"
      ]
    ]
  ],
  "test_from_dataframe_categorical": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_from_dataframe_categorical"
      ]
    ]
  ],
  "test_from_dataframe_sparse": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_from_dataframe_sparse"
      ]
    ]
  ],
  "test_to_and_from_empty_dataframe": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_to_and_from_empty_dataframe"
      ]
    ]
  ],
  "test_from_dataframe_non_unique_columns": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_from_dataframe_non_unique_columns"
      ]
    ]
  ],
  "test_convert_dataframe_with_many_types_and_multiindex": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_convert_dataframe_with_many_types_and_multiindex"
      ]
    ]
  ],
  "test_lazy_load": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_lazy_load"
      ]
    ]
  ],
  "test_where_other": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_where_other"
      ]
    ]
  ],
  "test_where_drop": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_where_drop"
      ]
    ]
  ],
  "test_where_drop_empty": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_where_drop_empty"
      ]
    ]
  ],
  "test_where_drop_no_indexes": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_where_drop_no_indexes"
      ]
    ]
  ],
  "test_reduce_coords": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reduce_coords"
      ]
    ]
  ],
  "test_mean_uint_dtype": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_mean_uint_dtype"
      ]
    ]
  ],
  "test_reduce_bad_dim": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reduce_bad_dim"
      ]
    ]
  ],
  "test_reduce_cumsum": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reduce_cumsum"
      ]
    ]
  ],
  "test_reduce_cumsum_test_dims": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reduce_cumsum_test_dims"
      ]
    ]
  ],
  "test_reduce_non_numeric": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reduce_non_numeric"
      ]
    ]
  ],
  "test_reduce_strings": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reduce_strings"
      ]
    ]
  ],
  "test_reduce_dtypes": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reduce_dtypes"
      ]
    ]
  ],
  "test_reduce_argmin": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reduce_argmin"
      ]
    ]
  ],
  "test_reduce_scalars": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reduce_scalars"
      ]
    ]
  ],
  "test_reduce_only_one_axis": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reduce_only_one_axis"
      ]
    ]
  ],
  "test_reduce_no_axis": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_reduce_no_axis"
      ]
    ]
  ],
  "test_quantile_skipna": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_quantile_skipna"
      ]
    ]
  ],
  "test_map": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_map"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_map"
      ]
    ]
  ],
  "test_apply_pending_deprecated_map": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_apply_pending_deprecated_map"
      ]
    ]
  ],
  "make_example_math_dataset": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "make_example_math_dataset"
      ]
    ]
  ],
  "test_dataset_number_math": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_dataset_number_math"
      ]
    ]
  ],
  "test_unary_ops": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_unary_ops"
      ]
    ]
  ],
  "test_dataset_array_math": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_dataset_array_math"
      ]
    ]
  ],
  "test_dataset_dataset_math": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_dataset_dataset_math"
      ]
    ]
  ],
  "test_dataset_math_auto_align": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_dataset_math_auto_align"
      ]
    ]
  ],
  "test_dataset_math_errors": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_dataset_math_errors"
      ]
    ]
  ],
  "test_dataset_transpose": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_dataset_transpose"
      ]
    ]
  ],
  "test_dataset_ellipsis_transpose_different_ordered_vars": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_dataset_ellipsis_transpose_different_ordered_vars"
      ]
    ]
  ],
  "test_dataset_retains_period_index_on_transpose": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_dataset_retains_period_index_on_transpose"
      ]
    ]
  ],
  "test_dataset_diff_n1_simple": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_dataset_diff_n1_simple"
      ]
    ]
  ],
  "test_dataset_diff_n1_label": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_dataset_diff_n1_label"
      ]
    ]
  ],
  "test_dataset_diff_n1": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_dataset_diff_n1"
      ]
    ]
  ],
  "test_dataset_diff_n2": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_dataset_diff_n2"
      ]
    ]
  ],
  "test_dataset_diff_exception_n_neg": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_dataset_diff_exception_n_neg"
      ]
    ]
  ],
  "test_dataset_diff_exception_label_str": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_dataset_diff_exception_label_str"
      ]
    ]
  ],
  "test_roll_multidim": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_roll_multidim"
      ]
    ]
  ],
  "test_filter_by_attrs": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_filter_by_attrs"
      ]
    ]
  ],
  "test_attribute_access": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_attribute_access"
      ]
    ]
  ],
  "test_ipython_key_completion": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_ipython_key_completion"
      ]
    ]
  ],
  "test_polyfit_output": [
    [
      "xarray/tests/test_dataset.py",
      [
        "TestDataset",
        "test_polyfit_output"
      ]
    ]
  ],
  "data_set": [
    [
      "xarray/tests/test_dataset.py",
      [
        "data_set"
      ]
    ]
  ],
  "test_isin_dask": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_isin_dask"
      ]
    ]
  ],
  "test_isin_dataset": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_isin_dataset"
      ]
    ]
  ],
  "test_dataset_constructor_aligns_to_explicit_coords": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_dataset_constructor_aligns_to_explicit_coords"
      ]
    ]
  ],
  "test_error_message_on_set_supplied": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_error_message_on_set_supplied"
      ]
    ]
  ],
  "test_constructor_raises_with_invalid_coords": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_constructor_raises_with_invalid_coords"
      ]
    ]
  ],
  "test_dir_expected_attrs": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_dir_expected_attrs"
      ]
    ]
  ],
  "test_dir_non_string": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_dir_non_string"
      ]
    ]
  ],
  "test_dir_unicode": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_dir_unicode"
      ]
    ]
  ],
  "test_coarsen_absent_dims_error": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_coarsen_absent_dims_error"
      ]
    ]
  ],
  "test_coarsen": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_coarsen"
      ]
    ],
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_coarsen"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_coarsen"
      ]
    ]
  ],
  "test_coarsen_coords": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_coarsen_coords"
      ]
    ]
  ],
  "test_coarsen_coords_cftime": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_coarsen_coords_cftime"
      ]
    ]
  ],
  "test_coarsen_keep_attrs": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_coarsen_keep_attrs"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_coarsen_keep_attrs"
      ]
    ]
  ],
  "test_rolling_keep_attrs": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_rolling_keep_attrs"
      ]
    ]
  ],
  "test_differentiate": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_differentiate"
      ]
    ]
  ],
  "test_differentiate_datetime": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_differentiate_datetime"
      ]
    ]
  ],
  "test_differentiate_cftime": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_differentiate_cftime"
      ]
    ]
  ],
  "test_integrate": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_integrate"
      ]
    ]
  ],
  "test_trapz_datetime": [
    [
      "xarray/tests/test_dataset.py",
      [
        "test_trapz_datetime"
      ]
    ]
  ],
  "tmp_netcdf_filename": [
    [
      "xarray/tests/test_distributed.py",
      [
        "tmp_netcdf_filename"
      ]
    ]
  ],
  "test_dask_distributed_netcdf_roundtrip": [
    [
      "xarray/tests/test_distributed.py",
      [
        "test_dask_distributed_netcdf_roundtrip"
      ]
    ]
  ],
  "test_dask_distributed_read_netcdf_integration_test": [
    [
      "xarray/tests/test_distributed.py",
      [
        "test_dask_distributed_read_netcdf_integration_test"
      ]
    ]
  ],
  "test_dask_distributed_zarr_integration_test": [
    [
      "xarray/tests/test_distributed.py",
      [
        "test_dask_distributed_zarr_integration_test"
      ]
    ]
  ],
  "test_dask_distributed_rasterio_integration_test": [
    [
      "xarray/tests/test_distributed.py",
      [
        "test_dask_distributed_rasterio_integration_test"
      ]
    ]
  ],
  "test_dask_distributed_cfgrib_integration_test": [
    [
      "xarray/tests/test_distributed.py",
      [
        "test_dask_distributed_cfgrib_integration_test"
      ]
    ]
  ],
  "test_async": [
    [
      "xarray/tests/test_distributed.py",
      [
        "test_async"
      ]
    ]
  ],
  "test_hdf5_lock": [
    [
      "xarray/tests/test_distributed.py",
      [
        "test_hdf5_lock"
      ]
    ]
  ],
  "test_serializable_locks": [
    [
      "xarray/tests/test_distributed.py",
      [
        "test_serializable_locks"
      ]
    ]
  ],
  "test_result_type": [
    [
      "xarray/tests/test_dtypes.py",
      [
        "test_result_type"
      ]
    ]
  ],
  "test_result_type_scalar": [
    [
      "xarray/tests/test_dtypes.py",
      [
        "test_result_type_scalar"
      ]
    ]
  ],
  "test_result_type_dask_array": [
    [
      "xarray/tests/test_dtypes.py",
      [
        "test_result_type_dask_array"
      ]
    ]
  ],
  "test_inf": [
    [
      "xarray/tests/test_dtypes.py",
      [
        "test_inf"
      ]
    ]
  ],
  "test_maybe_promote": [
    [
      "xarray/tests/test_dtypes.py",
      [
        "test_maybe_promote"
      ]
    ]
  ],
  "test_first": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "TestOps",
        "test_first"
      ]
    ]
  ],
  "test_last": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "TestOps",
        "test_last"
      ]
    ]
  ],
  "test_where_type_promotion": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "TestOps",
        "test_where_type_promotion"
      ]
    ]
  ],
  "test_stack_type_promotion": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "TestOps",
        "test_stack_type_promotion"
      ]
    ]
  ],
  "test_concatenate_type_promotion": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "TestOps",
        "test_concatenate_type_promotion"
      ]
    ]
  ],
  "test_all_nan_arrays": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "TestOps",
        "test_all_nan_arrays"
      ]
    ]
  ],
  "test_cumsum_1d": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_cumsum_1d"
      ]
    ]
  ],
  "test_cumsum_2d": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_cumsum_2d"
      ]
    ]
  ],
  "test_cumprod_2d": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_cumprod_2d"
      ]
    ]
  ],
  "test_equal": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "TestArrayNotNullEquiv",
        "test_equal"
      ]
    ]
  ],
  "test_some_not_equal": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "TestArrayNotNullEquiv",
        "test_some_not_equal"
      ]
    ]
  ],
  "test_wrong_shape": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "TestArrayNotNullEquiv",
        "test_wrong_shape"
      ]
    ]
  ],
  "test_types": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "TestArrayNotNullEquiv",
        "test_types"
      ]
    ]
  ],
  "construct_dataarray": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "construct_dataarray"
      ]
    ]
  ],
  "from_series_or_scalar": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "from_series_or_scalar"
      ]
    ]
  ],
  "series_reduce": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "series_reduce"
      ]
    ]
  ],
  "assert_dask_array": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "assert_dask_array"
      ]
    ]
  ],
  "test_datetime_mean": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_datetime_mean"
      ]
    ]
  ],
  "test_cftime_datetime_mean": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_cftime_datetime_mean"
      ]
    ]
  ],
  "test_cftime_datetime_mean_dask_error": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_cftime_datetime_mean_dask_error"
      ]
    ]
  ],
  "test_argmin_max": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_argmin_max"
      ]
    ]
  ],
  "test_argmin_max_error": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_argmin_max_error"
      ]
    ]
  ],
  "test_isnull": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_isnull"
      ]
    ]
  ],
  "test_isnull_with_dask": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_isnull_with_dask"
      ]
    ]
  ],
  "test_dask_rolling": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_dask_rolling"
      ]
    ]
  ],
  "test_dask_gradient": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_dask_gradient"
      ]
    ]
  ],
  "test_min_count": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_min_count"
      ]
    ]
  ],
  "test_min_count_dataset": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_min_count_dataset"
      ]
    ]
  ],
  "test_multiple_dims": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_multiple_dims"
      ]
    ]
  ],
  "test_docs": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_docs"
      ]
    ]
  ],
  "test_datetime_to_numeric_datetime64": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_datetime_to_numeric_datetime64"
      ]
    ]
  ],
  "test_datetime_to_numeric_cftime": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_datetime_to_numeric_cftime"
      ]
    ]
  ],
  "test_datetime_to_numeric_potential_overflow": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_datetime_to_numeric_potential_overflow"
      ]
    ]
  ],
  "test_py_timedelta_to_float": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_py_timedelta_to_float"
      ]
    ]
  ],
  "test_np_timedelta64_to_float": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_np_timedelta64_to_float"
      ]
    ]
  ],
  "test_pd_timedelta_to_float": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_pd_timedelta_to_float"
      ]
    ]
  ],
  "test_timedelta_to_numeric": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_timedelta_to_numeric"
      ]
    ]
  ],
  "test_least_squares": [
    [
      "xarray/tests/test_duck_array_ops.py",
      [
        "test_least_squares"
      ]
    ]
  ],
  "foo": [
    [
      "xarray/tests/test_extensions.py",
      [
        "TestAccessor",
        "test_register",
        "DemoAccessor",
        "foo"
      ]
    ]
  ],
  "test_register": [
    [
      "xarray/tests/test_extensions.py",
      [
        "TestAccessor",
        "test_register"
      ]
    ]
  ],
  "test_pickle_dataset": [
    [
      "xarray/tests/test_extensions.py",
      [
        "TestAccessor",
        "test_pickle_dataset"
      ]
    ]
  ],
  "test_broken_accessor": [
    [
      "xarray/tests/test_extensions.py",
      [
        "TestAccessor",
        "test_broken_accessor"
      ]
    ]
  ],
  "test_get_indexer_at_least_n_items": [
    [
      "xarray/tests/test_formatting.py",
      [
        "TestFormatting",
        "test_get_indexer_at_least_n_items"
      ]
    ]
  ],
  "test_first_n_items": [
    [
      "xarray/tests/test_formatting.py",
      [
        "TestFormatting",
        "test_first_n_items"
      ]
    ]
  ],
  "test_last_n_items": [
    [
      "xarray/tests/test_formatting.py",
      [
        "TestFormatting",
        "test_last_n_items"
      ]
    ]
  ],
  "test_last_item": [
    [
      "xarray/tests/test_formatting.py",
      [
        "TestFormatting",
        "test_last_item"
      ]
    ]
  ],
  "test_format_item": [
    [
      "xarray/tests/test_formatting.py",
      [
        "TestFormatting",
        "test_format_item"
      ]
    ]
  ],
  "test_format_items": [
    [
      "xarray/tests/test_formatting.py",
      [
        "TestFormatting",
        "test_format_items"
      ]
    ]
  ],
  "test_format_array_flat": [
    [
      "xarray/tests/test_formatting.py",
      [
        "TestFormatting",
        "test_format_array_flat"
      ]
    ]
  ],
  "test_pretty_print": [
    [
      "xarray/tests/test_formatting.py",
      [
        "TestFormatting",
        "test_pretty_print"
      ]
    ]
  ],
  "test_maybe_truncate": [
    [
      "xarray/tests/test_formatting.py",
      [
        "TestFormatting",
        "test_maybe_truncate"
      ]
    ]
  ],
  "test_format_timestamp_out_of_bounds": [
    [
      "xarray/tests/test_formatting.py",
      [
        "TestFormatting",
        "test_format_timestamp_out_of_bounds"
      ]
    ]
  ],
  "test_attribute_repr": [
    [
      "xarray/tests/test_formatting.py",
      [
        "TestFormatting",
        "test_attribute_repr"
      ]
    ]
  ],
  "test_diff_array_repr": [
    [
      "xarray/tests/test_formatting.py",
      [
        "TestFormatting",
        "test_diff_array_repr"
      ]
    ]
  ],
  "test_diff_attrs_repr_with_array": [
    [
      "xarray/tests/test_formatting.py",
      [
        "TestFormatting",
        "test_diff_attrs_repr_with_array"
      ]
    ]
  ],
  "test_diff_dataset_repr": [
    [
      "xarray/tests/test_formatting.py",
      [
        "TestFormatting",
        "test_diff_dataset_repr"
      ]
    ]
  ],
  "test_array_repr": [
    [
      "xarray/tests/test_formatting.py",
      [
        "TestFormatting",
        "test_array_repr"
      ]
    ]
  ],
  "test_set_numpy_options": [
    [
      "xarray/tests/test_formatting.py",
      [
        "test_set_numpy_options"
      ]
    ]
  ],
  "test_short_numpy_repr": [
    [
      "xarray/tests/test_formatting.py",
      [
        "test_short_numpy_repr"
      ]
    ]
  ],
  "test_large_array_repr_length": [
    [
      "xarray/tests/test_formatting.py",
      [
        "test_large_array_repr_length"
      ]
    ]
  ],
  "dataarray": [
    [
      "xarray/tests/test_formatting_html.py",
      [
        "dataarray"
      ]
    ]
  ],
  "dask_dataarray": [
    [
      "xarray/tests/test_formatting_html.py",
      [
        "dask_dataarray"
      ]
    ]
  ],
  "multiindex": [
    [
      "xarray/tests/test_formatting_html.py",
      [
        "multiindex"
      ]
    ]
  ],
  "dataset": [
    [
      "xarray/tests/test_formatting_html.py",
      [
        "dataset"
      ]
    ],
    [
      "xarray/tests/test_groupby.py",
      [
        "dataset"
      ]
    ]
  ],
  "test_short_data_repr_html": [
    [
      "xarray/tests/test_formatting_html.py",
      [
        "test_short_data_repr_html"
      ]
    ]
  ],
  "test_short_data_repr_html_non_str_keys": [
    [
      "xarray/tests/test_formatting_html.py",
      [
        "test_short_data_repr_html_non_str_keys"
      ]
    ]
  ],
  "test_short_data_repr_html_dask": [
    [
      "xarray/tests/test_formatting_html.py",
      [
        "test_short_data_repr_html_dask"
      ]
    ]
  ],
  "test_format_dims_no_dims": [
    [
      "xarray/tests/test_formatting_html.py",
      [
        "test_format_dims_no_dims"
      ]
    ]
  ],
  "test_format_dims_unsafe_dim_name": [
    [
      "xarray/tests/test_formatting_html.py",
      [
        "test_format_dims_unsafe_dim_name"
      ]
    ]
  ],
  "test_format_dims_non_index": [
    [
      "xarray/tests/test_formatting_html.py",
      [
        "test_format_dims_non_index"
      ]
    ]
  ],
  "test_format_dims_index": [
    [
      "xarray/tests/test_formatting_html.py",
      [
        "test_format_dims_index"
      ]
    ]
  ],
  "test_summarize_attrs_with_unsafe_attr_name_and_value": [
    [
      "xarray/tests/test_formatting_html.py",
      [
        "test_summarize_attrs_with_unsafe_attr_name_and_value"
      ]
    ]
  ],
  "test_repr_of_dataarray": [
    [
      "xarray/tests/test_formatting_html.py",
      [
        "test_repr_of_dataarray"
      ]
    ]
  ],
  "test_summary_of_multiindex_coord": [
    [
      "xarray/tests/test_formatting_html.py",
      [
        "test_summary_of_multiindex_coord"
      ]
    ]
  ],
  "test_repr_of_multiindex": [
    [
      "xarray/tests/test_formatting_html.py",
      [
        "test_repr_of_multiindex"
      ]
    ]
  ],
  "test_repr_of_dataset": [
    [
      "xarray/tests/test_formatting_html.py",
      [
        "test_repr_of_dataset"
      ]
    ]
  ],
  "test_repr_text_fallback": [
    [
      "xarray/tests/test_formatting_html.py",
      [
        "test_repr_text_fallback"
      ]
    ]
  ],
  "test_variable_repr_html": [
    [
      "xarray/tests/test_formatting_html.py",
      [
        "test_variable_repr_html"
      ]
    ]
  ],
  "array": [
    [
      "xarray/tests/test_groupby.py",
      [
        "array"
      ]
    ]
  ],
  "test_consolidate_slices": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_consolidate_slices"
      ]
    ]
  ],
  "test_groupby_dims_property": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_groupby_dims_property"
      ]
    ]
  ],
  "test_multi_index_groupby_map": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_multi_index_groupby_map"
      ]
    ]
  ],
  "test_multi_index_groupby_sum": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_multi_index_groupby_sum"
      ]
    ]
  ],
  "test_groupby_da_datetime": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_groupby_da_datetime"
      ]
    ]
  ],
  "test_groupby_duplicate_coordinate_labels": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_groupby_duplicate_coordinate_labels"
      ]
    ]
  ],
  "test_groupby_input_mutation": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_groupby_input_mutation"
      ]
    ]
  ],
  "test_groupby_map_shrink_groups": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_groupby_map_shrink_groups"
      ]
    ]
  ],
  "test_groupby_map_change_group_size": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_groupby_map_change_group_size"
      ]
    ]
  ],
  "test_da_groupby_map_func_args": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_da_groupby_map_func_args"
      ]
    ]
  ],
  "test_ds_groupby_map_func_args": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_ds_groupby_map_func_args"
      ]
    ]
  ],
  "test_da_groupby_empty": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_da_groupby_empty"
      ]
    ]
  ],
  "test_da_groupby_quantile": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_da_groupby_quantile"
      ]
    ]
  ],
  "test_ds_groupby_quantile": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_ds_groupby_quantile"
      ]
    ]
  ],
  "test_da_groupby_assign_coords": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_da_groupby_assign_coords"
      ]
    ]
  ],
  "test_groupby_repr": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_groupby_repr"
      ]
    ]
  ],
  "test_groupby_repr_datetime": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_groupby_repr_datetime"
      ]
    ]
  ],
  "test_groupby_drops_nans": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_groupby_drops_nans"
      ]
    ]
  ],
  "test_groupby_grouping_errors": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_groupby_grouping_errors"
      ]
    ]
  ],
  "test_groupby_reduce_dimension_error": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_groupby_reduce_dimension_error"
      ]
    ]
  ],
  "test_groupby_multiple_string_args": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_groupby_multiple_string_args"
      ]
    ]
  ],
  "test_groupby_bins_timeseries": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_groupby_bins_timeseries"
      ]
    ]
  ],
  "test_groupby_none_group_name": [
    [
      "xarray/tests/test_groupby.py",
      [
        "test_groupby_none_group_name"
      ]
    ]
  ],
  "set_to_zero": [
    [
      "xarray/tests/test_indexing.py",
      [
        "TestIndexers",
        "set_to_zero"
      ]
    ]
  ],
  "test_expanded_indexer": [
    [
      "xarray/tests/test_indexing.py",
      [
        "TestIndexers",
        "test_expanded_indexer"
      ]
    ]
  ],
  "test_asarray_tuplesafe": [
    [
      "xarray/tests/test_indexing.py",
      [
        "TestIndexers",
        "test_asarray_tuplesafe"
      ]
    ]
  ],
  "test_stacked_multiindex_min_max": [
    [
      "xarray/tests/test_indexing.py",
      [
        "TestIndexers",
        "test_stacked_multiindex_min_max"
      ]
    ]
  ],
  "test_convert_label_indexer": [
    [
      "xarray/tests/test_indexing.py",
      [
        "TestIndexers",
        "test_convert_label_indexer"
      ]
    ]
  ],
  "test_convert_unsorted_datetime_index_raises": [
    [
      "xarray/tests/test_indexing.py",
      [
        "TestIndexers",
        "test_convert_unsorted_datetime_index_raises"
      ]
    ]
  ],
  "test_get_dim_indexers": [
    [
      "xarray/tests/test_indexing.py",
      [
        "TestIndexers",
        "test_get_dim_indexers"
      ]
    ]
  ],
  "test_indexer": [
    [
      "xarray/tests/test_indexing.py",
      [
        "TestIndexers",
        "test_remap_label_indexers",
        "test_indexer"
      ]
    ]
  ],
  "test_remap_label_indexers": [
    [
      "xarray/tests/test_indexing.py",
      [
        "TestIndexers",
        "test_remap_label_indexers"
      ]
    ]
  ],
  "test_read_only_view": [
    [
      "xarray/tests/test_indexing.py",
      [
        "TestIndexers",
        "test_read_only_view"
      ]
    ]
  ],
  "test_slice_slice": [
    [
      "xarray/tests/test_indexing.py",
      [
        "TestLazyArray",
        "test_slice_slice"
      ]
    ]
  ],
  "test_lazily_indexed_array": [
    [
      "xarray/tests/test_indexing.py",
      [
        "TestLazyArray",
        "test_lazily_indexed_array"
      ]
    ]
  ],
  "check_indexing": [
    [
      "xarray/tests/test_indexing.py",
      [
        "TestLazyArray",
        "test_vectorized_lazily_indexed_array",
        "check_indexing"
      ]
    ]
  ],
  "test_vectorized_lazily_indexed_array": [
    [
      "xarray/tests/test_indexing.py",
      [
        "TestLazyArray",
        "test_vectorized_lazily_indexed_array"
      ]
    ]
  ],
  "test_sub_array": [
    [
      "xarray/tests/test_indexing.py",
      [
        "TestCopyOnWriteArray",
        "test_sub_array"
      ]
    ],
    [
      "xarray/tests/test_indexing.py",
      [
        "TestMemoryCachedArray",
        "test_sub_array"
      ]
    ]
  ],
  "test_index_scalar": [
    [
      "xarray/tests/test_indexing.py",
      [
        "TestCopyOnWriteArray",
        "test_index_scalar"
      ]
    ],
    [
      "xarray/tests/test_indexing.py",
      [
        "TestMemoryCachedArray",
        "test_index_scalar"
      ]
    ]
  ],
  "test_wrapper": [
    [
      "xarray/tests/test_indexing.py",
      [
        "TestMemoryCachedArray",
        "test_wrapper"
      ]
    ]
  ],
  "test_base_explicit_indexer": [
    [
      "xarray/tests/test_indexing.py",
      [
        "test_base_explicit_indexer"
      ]
    ]
  ],
  "test_invalid_for_all": [
    [
      "xarray/tests/test_indexing.py",
      [
        "test_invalid_for_all"
      ]
    ]
  ],
  "check_integer": [
    [
      "xarray/tests/test_indexing.py",
      [
        "check_integer"
      ]
    ]
  ],
  "check_slice": [
    [
      "xarray/tests/test_indexing.py",
      [
        "check_slice"
      ]
    ]
  ],
  "check_array1d": [
    [
      "xarray/tests/test_indexing.py",
      [
        "check_array1d"
      ]
    ]
  ],
  "check_array2d": [
    [
      "xarray/tests/test_indexing.py",
      [
        "check_array2d"
      ]
    ]
  ],
  "test_basic_indexer": [
    [
      "xarray/tests/test_indexing.py",
      [
        "test_basic_indexer"
      ]
    ]
  ],
  "test_outer_indexer": [
    [
      "xarray/tests/test_indexing.py",
      [
        "test_outer_indexer"
      ]
    ]
  ],
  "test_vectorized_indexer": [
    [
      "xarray/tests/test_indexing.py",
      [
        "test_vectorized_indexer"
      ]
    ]
  ],
  "test_arrayize_vectorized_indexer": [
    [
      "xarray/tests/test_indexing.py",
      [
        "Test_vectorized_indexer",
        "test_arrayize_vectorized_indexer"
      ]
    ]
  ],
  "get_indexers": [
    [
      "xarray/tests/test_indexing.py",
      [
        "get_indexers"
      ]
    ]
  ],
  "test_decompose_slice": [
    [
      "xarray/tests/test_indexing.py",
      [
        "test_decompose_slice"
      ]
    ]
  ],
  "test_decompose_indexers": [
    [
      "xarray/tests/test_indexing.py",
      [
        "test_decompose_indexers"
      ]
    ]
  ],
  "test_implicit_indexing_adapter": [
    [
      "xarray/tests/test_indexing.py",
      [
        "test_implicit_indexing_adapter"
      ]
    ]
  ],
  "test_implicit_indexing_adapter_copy_on_write": [
    [
      "xarray/tests/test_indexing.py",
      [
        "test_implicit_indexing_adapter_copy_on_write"
      ]
    ]
  ],
  "nonzero": [
    [
      "xarray/tests/test_indexing.py",
      [
        "test_outer_indexer_consistency_with_broadcast_indexes_vectorized",
        "nonzero"
      ]
    ]
  ],
  "test_outer_indexer_consistency_with_broadcast_indexes_vectorized": [
    [
      "xarray/tests/test_indexing.py",
      [
        "test_outer_indexer_consistency_with_broadcast_indexes_vectorized"
      ]
    ]
  ],
  "test_create_mask_outer_indexer": [
    [
      "xarray/tests/test_indexing.py",
      [
        "test_create_mask_outer_indexer"
      ]
    ]
  ],
  "test_create_mask_vectorized_indexer": [
    [
      "xarray/tests/test_indexing.py",
      [
        "test_create_mask_vectorized_indexer"
      ]
    ]
  ],
  "test_create_mask_basic_indexer": [
    [
      "xarray/tests/test_indexing.py",
      [
        "test_create_mask_basic_indexer"
      ]
    ]
  ],
  "test_create_mask_dask": [
    [
      "xarray/tests/test_indexing.py",
      [
        "test_create_mask_dask"
      ]
    ]
  ],
  "test_create_mask_error": [
    [
      "xarray/tests/test_indexing.py",
      [
        "test_create_mask_error"
      ]
    ]
  ],
  "test_posify_mask_subindexer": [
    [
      "xarray/tests/test_indexing.py",
      [
        "test_posify_mask_subindexer"
      ]
    ]
  ],
  "get_example_data": [
    [
      "xarray/tests/test_interp.py",
      [
        "get_example_data"
      ]
    ]
  ],
  "test_keywargs": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_keywargs"
      ]
    ]
  ],
  "test_interpolate_1d": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_interpolate_1d"
      ]
    ]
  ],
  "test_interpolate_1d_methods": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_interpolate_1d_methods"
      ]
    ]
  ],
  "test_interpolate_vectorize": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_interpolate_vectorize"
      ]
    ]
  ],
  "test_interpolate_nd": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_interpolate_nd"
      ]
    ]
  ],
  "test_interpolate_nd_nd": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_interpolate_nd_nd"
      ]
    ]
  ],
  "test_interpolate_scalar": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_interpolate_scalar"
      ]
    ]
  ],
  "test_interpolate_nd_scalar": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_interpolate_nd_scalar"
      ]
    ]
  ],
  "test_nans": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_nans"
      ]
    ]
  ],
  "test_errors": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_errors"
      ]
    ]
  ],
  "test_dtype": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_dtype"
      ]
    ]
  ],
  "test_sorted": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_sorted"
      ]
    ]
  ],
  "test_dimension_wo_coords": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_dimension_wo_coords"
      ]
    ]
  ],
  "test_interpolate_dimorder": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_interpolate_dimorder"
      ]
    ]
  ],
  "test_interp_like": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_interp_like"
      ]
    ]
  ],
  "test_datetime": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_datetime"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestAsCompatibleData",
        "test_datetime"
      ]
    ]
  ],
  "test_datetime_single_string": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_datetime_single_string"
      ]
    ]
  ],
  "test_cftime": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_cftime"
      ]
    ]
  ],
  "test_cftime_type_error": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_cftime_type_error"
      ]
    ]
  ],
  "test_cftime_list_of_strings": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_cftime_list_of_strings"
      ]
    ]
  ],
  "test_cftime_single_string": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_cftime_single_string"
      ]
    ]
  ],
  "test_datetime_to_non_datetime_error": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_datetime_to_non_datetime_error"
      ]
    ]
  ],
  "test_cftime_to_non_cftime_error": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_cftime_to_non_cftime_error"
      ]
    ]
  ],
  "test_datetime_interp_noerror": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_datetime_interp_noerror"
      ]
    ]
  ],
  "test_3641": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_3641"
      ]
    ]
  ],
  "test_decompose": [
    [
      "xarray/tests/test_interp.py",
      [
        "test_decompose"
      ]
    ]
  ],
  "test_broadcast_dimension_size": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeInternals",
        "test_broadcast_dimension_size"
      ]
    ]
  ],
  "test_merge_arrays": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeFunction",
        "test_merge_arrays"
      ]
    ]
  ],
  "test_merge_datasets": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeFunction",
        "test_merge_datasets"
      ]
    ]
  ],
  "test_merge_dataarray_unnamed": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeFunction",
        "test_merge_dataarray_unnamed"
      ]
    ]
  ],
  "test_merge_arrays_attrs_default": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeFunction",
        "test_merge_arrays_attrs_default"
      ]
    ]
  ],
  "test_merge_arrays_attrs": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeFunction",
        "test_merge_arrays_attrs"
      ]
    ]
  ],
  "test_merge_dicts_simple": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeFunction",
        "test_merge_dicts_simple"
      ]
    ]
  ],
  "test_merge_dicts_dims": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeFunction",
        "test_merge_dicts_dims"
      ]
    ]
  ],
  "test_merge_error": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeFunction",
        "test_merge_error"
      ]
    ]
  ],
  "test_merge_alignment_error": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeFunction",
        "test_merge_alignment_error"
      ]
    ]
  ],
  "test_merge_wrong_input_error": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeFunction",
        "test_merge_wrong_input_error"
      ]
    ]
  ],
  "test_merge_no_conflicts_single_var": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeFunction",
        "test_merge_no_conflicts_single_var"
      ]
    ]
  ],
  "test_merge_no_conflicts_multi_var": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeFunction",
        "test_merge_no_conflicts_multi_var"
      ]
    ]
  ],
  "test_merge_no_conflicts_preserve_attrs": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeFunction",
        "test_merge_no_conflicts_preserve_attrs"
      ]
    ]
  ],
  "test_merge_no_conflicts_broadcast": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeFunction",
        "test_merge_no_conflicts_broadcast"
      ]
    ]
  ],
  "test_merge_broadcast_equals": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeMethod",
        "test_merge_broadcast_equals"
      ]
    ]
  ],
  "test_merge_compat": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeMethod",
        "test_merge_compat"
      ]
    ]
  ],
  "test_merge_auto_align": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeMethod",
        "test_merge_auto_align"
      ]
    ]
  ],
  "test_merge_fill_value": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeMethod",
        "test_merge_fill_value"
      ]
    ]
  ],
  "test_merge_no_conflicts": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeMethod",
        "test_merge_no_conflicts"
      ]
    ]
  ],
  "test_merge_dataarray": [
    [
      "xarray/tests/test_merge.py",
      [
        "TestMergeMethod",
        "test_merge_dataarray"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "test_merge_dataarray"
      ]
    ]
  ],
  "cf_da": [
    [
      "xarray/tests/test_missing.py",
      [
        "cf_da"
      ]
    ]
  ],
  "make_interpolate_example_data": [
    [
      "xarray/tests/test_missing.py",
      [
        "make_interpolate_example_data"
      ]
    ]
  ],
  "test_interpolate_pd_compat": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_pd_compat"
      ]
    ]
  ],
  "test_scipy_methods_function": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_scipy_methods_function"
      ]
    ]
  ],
  "test_interpolate_pd_compat_non_uniform_index": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_pd_compat_non_uniform_index"
      ]
    ]
  ],
  "test_interpolate_pd_compat_polynomial": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_pd_compat_polynomial"
      ]
    ]
  ],
  "test_interpolate_unsorted_index_raises": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_unsorted_index_raises"
      ]
    ]
  ],
  "test_interpolate_no_dim_raises": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_no_dim_raises"
      ]
    ]
  ],
  "test_interpolate_invalid_interpolator_raises": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_invalid_interpolator_raises"
      ]
    ]
  ],
  "test_interpolate_duplicate_values_raises": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_duplicate_values_raises"
      ]
    ]
  ],
  "test_interpolate_multiindex_raises": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_multiindex_raises"
      ]
    ]
  ],
  "test_interpolate_2d_coord_raises": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_2d_coord_raises"
      ]
    ]
  ],
  "test_interpolate_kwargs": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_kwargs"
      ]
    ]
  ],
  "test_interpolate_keep_attrs": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_keep_attrs"
      ]
    ]
  ],
  "test_interpolate": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate"
      ]
    ]
  ],
  "test_interpolate_nonans": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_nonans"
      ]
    ]
  ],
  "test_interpolate_allnans": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_allnans"
      ]
    ]
  ],
  "test_interpolate_limits": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_limits"
      ]
    ]
  ],
  "test_interpolate_methods": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_methods"
      ]
    ]
  ],
  "test_interpolators": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolators"
      ]
    ]
  ],
  "test_interpolate_use_coordinate": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_use_coordinate"
      ]
    ]
  ],
  "test_interpolate_dask": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_dask"
      ]
    ]
  ],
  "test_interpolate_dask_raises_for_invalid_chunk_dim": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_dask_raises_for_invalid_chunk_dim"
      ]
    ]
  ],
  "test_ffill": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_ffill"
      ]
    ]
  ],
  "test_ffill_dask": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_ffill_dask"
      ]
    ]
  ],
  "test_bfill_dask": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_bfill_dask"
      ]
    ]
  ],
  "test_ffill_bfill_nonans": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_ffill_bfill_nonans"
      ]
    ]
  ],
  "test_ffill_bfill_allnans": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_ffill_bfill_allnans"
      ]
    ]
  ],
  "test_ffill_functions": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_ffill_functions"
      ]
    ]
  ],
  "test_ffill_limit": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_ffill_limit"
      ]
    ]
  ],
  "test_interpolate_dataset": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_dataset"
      ]
    ]
  ],
  "test_ffill_dataset": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_ffill_dataset"
      ]
    ]
  ],
  "test_bfill_dataset": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_bfill_dataset"
      ]
    ]
  ],
  "test_interpolate_na_nan_block_lengths": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_na_nan_block_lengths"
      ]
    ]
  ],
  "test_get_clean_interp_index_cf_calendar": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_get_clean_interp_index_cf_calendar"
      ]
    ]
  ],
  "test_get_clean_interp_index_dt": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_get_clean_interp_index_dt"
      ]
    ]
  ],
  "test_get_clean_interp_index_potential_overflow": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_get_clean_interp_index_potential_overflow"
      ]
    ]
  ],
  "test_get_clean_interp_index_strict": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_get_clean_interp_index_strict"
      ]
    ]
  ],
  "da_time": [
    [
      "xarray/tests/test_missing.py",
      [
        "da_time"
      ]
    ]
  ],
  "test_interpolate_na_max_gap_errors": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_na_max_gap_errors"
      ]
    ]
  ],
  "test_interpolate_na_max_gap_time_specifier": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_na_max_gap_time_specifier"
      ]
    ]
  ],
  "test_interpolate_na_2d": [
    [
      "xarray/tests/test_missing.py",
      [
        "test_interpolate_na_2d"
      ]
    ]
  ],
  "test_is_contiguous": [
    [
      "xarray/tests/test_nputils.py",
      [
        "test_is_contiguous"
      ]
    ]
  ],
  "test_vindex": [
    [
      "xarray/tests/test_nputils.py",
      [
        "test_vindex"
      ]
    ]
  ],
  "test_invalid_option_raises": [
    [
      "xarray/tests/test_options.py",
      [
        "test_invalid_option_raises"
      ]
    ]
  ],
  "test_display_width": [
    [
      "xarray/tests/test_options.py",
      [
        "test_display_width"
      ]
    ]
  ],
  "test_arithmetic_join": [
    [
      "xarray/tests/test_options.py",
      [
        "test_arithmetic_join"
      ]
    ]
  ],
  "test_enable_cftimeindex": [
    [
      "xarray/tests/test_options.py",
      [
        "test_enable_cftimeindex"
      ]
    ]
  ],
  "test_file_cache_maxsize": [
    [
      "xarray/tests/test_options.py",
      [
        "test_file_cache_maxsize"
      ]
    ]
  ],
  "test_nested_options": [
    [
      "xarray/tests/test_options.py",
      [
        "test_nested_options"
      ]
    ]
  ],
  "test_display_style": [
    [
      "xarray/tests/test_options.py",
      [
        "test_display_style"
      ]
    ]
  ],
  "create_test_dataset_attrs": [
    [
      "xarray/tests/test_options.py",
      [
        "create_test_dataset_attrs"
      ]
    ]
  ],
  "create_test_dataarray_attrs": [
    [
      "xarray/tests/test_options.py",
      [
        "create_test_dataarray_attrs"
      ]
    ]
  ],
  "test_dataset_attr_retention": [
    [
      "xarray/tests/test_options.py",
      [
        "TestAttrRetention",
        "test_dataset_attr_retention"
      ]
    ]
  ],
  "test_dataarray_attr_retention": [
    [
      "xarray/tests/test_options.py",
      [
        "TestAttrRetention",
        "test_dataarray_attr_retention"
      ]
    ]
  ],
  "test_groupby_attr_retention": [
    [
      "xarray/tests/test_options.py",
      [
        "TestAttrRetention",
        "test_groupby_attr_retention"
      ]
    ]
  ],
  "test_concat_attr_retention": [
    [
      "xarray/tests/test_options.py",
      [
        "TestAttrRetention",
        "test_concat_attr_retention"
      ]
    ]
  ],
  "test_merge_attr_retention": [
    [
      "xarray/tests/test_options.py",
      [
        "TestAttrRetention",
        "test_merge_attr_retention"
      ]
    ]
  ],
  "test_display_style_text": [
    [
      "xarray/tests/test_options.py",
      [
        "TestAttrRetention",
        "test_display_style_text"
      ]
    ]
  ],
  "test_display_style_html": [
    [
      "xarray/tests/test_options.py",
      [
        "TestAttrRetention",
        "test_display_style_html"
      ]
    ]
  ],
  "test_display_dataarray_style_text": [
    [
      "xarray/tests/test_options.py",
      [
        "TestAttrRetention",
        "test_display_dataarray_style_text"
      ]
    ]
  ],
  "test_display_dataarray_style_html": [
    [
      "xarray/tests/test_options.py",
      [
        "TestAttrRetention",
        "test_display_dataarray_style_html"
      ]
    ]
  ],
  "text_in_fig": [
    [
      "xarray/tests/test_plot.py",
      [
        "text_in_fig"
      ]
    ]
  ],
  "find_possible_colorbars": [
    [
      "xarray/tests/test_plot.py",
      [
        "find_possible_colorbars"
      ]
    ]
  ],
  "substring_in_axes": [
    [
      "xarray/tests/test_plot.py",
      [
        "substring_in_axes"
      ]
    ]
  ],
  "substring_not_in_axes": [
    [
      "xarray/tests/test_plot.py",
      [
        "substring_not_in_axes"
      ]
    ]
  ],
  "easy_array": [
    [
      "xarray/tests/test_plot.py",
      [
        "easy_array"
      ]
    ]
  ],
  "pass_in_axis": [
    [
      "xarray/tests/test_plot.py",
      [
        "PlotTestCase",
        "pass_in_axis"
      ]
    ]
  ],
  "imshow_called": [
    [
      "xarray/tests/test_plot.py",
      [
        "PlotTestCase",
        "imshow_called"
      ]
    ]
  ],
  "contourf_called": [
    [
      "xarray/tests/test_plot.py",
      [
        "PlotTestCase",
        "contourf_called"
      ]
    ]
  ],
  "setup_array": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "setup_array"
      ]
    ]
  ],
  "test_accessor": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_accessor"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestDatasetScatterPlots",
        "test_accessor"
      ]
    ]
  ],
  "test_label_from_attrs": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_label_from_attrs"
      ]
    ]
  ],
  "test1d": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test1d"
      ]
    ]
  ],
  "test_1d_bool": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_1d_bool"
      ]
    ]
  ],
  "test_1d_x_y_kw": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_1d_x_y_kw"
      ]
    ]
  ],
  "test_multiindex_level_as_coord": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_multiindex_level_as_coord"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_multiindex_level_as_coord"
      ]
    ]
  ],
  "test_infer_line_data": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_infer_line_data"
      ]
    ]
  ],
  "test_line_plot_along_1d_coord": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_line_plot_along_1d_coord"
      ]
    ]
  ],
  "test_2d_line": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_2d_line"
      ]
    ]
  ],
  "test_2d_line_accepts_legend_kw": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_2d_line_accepts_legend_kw"
      ]
    ]
  ],
  "test_2d_line_accepts_x_kw": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_2d_line_accepts_x_kw"
      ]
    ]
  ],
  "test_2d_line_accepts_hue_kw": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_2d_line_accepts_hue_kw"
      ]
    ]
  ],
  "test_2d_coords_line_plot": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_2d_coords_line_plot"
      ]
    ]
  ],
  "test_2d_coord_line_plot_coords_transpose_invariant": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_2d_coord_line_plot_coords_transpose_invariant"
      ]
    ]
  ],
  "test_2d_before_squeeze": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_2d_before_squeeze"
      ]
    ]
  ],
  "test2d_uniform_calls_imshow": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test2d_uniform_calls_imshow"
      ]
    ]
  ],
  "test2d_nonuniform_calls_contourf": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test2d_nonuniform_calls_contourf"
      ]
    ]
  ],
  "test2d_1d_2d_coordinates_contourf": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test2d_1d_2d_coordinates_contourf"
      ]
    ]
  ],
  "test_contourf_cmap_set": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_contourf_cmap_set"
      ]
    ]
  ],
  "test_contourf_cmap_set_with_bad_under_over": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_contourf_cmap_set_with_bad_under_over"
      ]
    ]
  ],
  "test3d": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test3d"
      ]
    ]
  ],
  "test_can_pass_in_axis": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_can_pass_in_axis"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot1D",
        "test_can_pass_in_axis"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlotHistogram",
        "test_can_pass_in_axis"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_can_pass_in_axis"
      ]
    ]
  ],
  "test__infer_interval_breaks": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test__infer_interval_breaks"
      ]
    ]
  ],
  "test_geo_data": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_geo_data"
      ]
    ]
  ],
  "test_datetime_dimension": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_datetime_dimension"
      ]
    ]
  ],
  "test_convenient_facetgrid": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_convenient_facetgrid"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_convenient_facetgrid"
      ]
    ]
  ],
  "test_subplot_kws": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_subplot_kws"
      ]
    ]
  ],
  "test_plot_size": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_plot_size"
      ]
    ]
  ],
  "test_convenient_facetgrid_4d": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_convenient_facetgrid_4d"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_convenient_facetgrid_4d"
      ]
    ]
  ],
  "test_coord_with_interval": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_coord_with_interval"
      ]
    ]
  ],
  "test_coord_with_interval_x": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_coord_with_interval_x"
      ]
    ]
  ],
  "test_coord_with_interval_y": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_coord_with_interval_y"
      ]
    ]
  ],
  "test_coord_with_interval_xy": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot",
        "test_coord_with_interval_xy"
      ]
    ]
  ],
  "test_xlabel_is_index_name": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot1D",
        "test_xlabel_is_index_name"
      ]
    ]
  ],
  "test_no_label_name_on_x_axis": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot1D",
        "test_no_label_name_on_x_axis"
      ]
    ]
  ],
  "test_no_label_name_on_y_axis": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot1D",
        "test_no_label_name_on_y_axis"
      ]
    ]
  ],
  "test_ylabel_is_data_name": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot1D",
        "test_ylabel_is_data_name"
      ]
    ]
  ],
  "test_xlabel_is_data_name": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot1D",
        "test_xlabel_is_data_name"
      ]
    ]
  ],
  "test_format_string": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot1D",
        "test_format_string"
      ]
    ]
  ],
  "test_nonnumeric_index_raises_typeerror": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot1D",
        "test_nonnumeric_index_raises_typeerror"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_nonnumeric_index_raises_typeerror"
      ]
    ]
  ],
  "test_primitive_returned": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot1D",
        "test_primitive_returned"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlotHistogram",
        "test_primitive_returned"
      ]
    ]
  ],
  "test_plot_nans": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot1D",
        "test_plot_nans"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlotHistogram",
        "test_plot_nans"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_plot_nans"
      ]
    ]
  ],
  "test_x_ticks_are_rotated_for_time": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot1D",
        "test_x_ticks_are_rotated_for_time"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_x_ticks_are_rotated_for_time"
      ]
    ]
  ],
  "test_xyincrease_false_changes_axes": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot1D",
        "test_xyincrease_false_changes_axes"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_xyincrease_false_changes_axes"
      ]
    ]
  ],
  "test_slice_in_title": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlot1D",
        "test_slice_in_title"
      ]
    ]
  ],
  "test_step": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlotStep",
        "test_step"
      ]
    ]
  ],
  "test_step_with_drawstyle": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlotStep",
        "test_step_with_drawstyle"
      ]
    ]
  ],
  "test_coord_with_interval_step": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlotStep",
        "test_coord_with_interval_step"
      ]
    ]
  ],
  "test_coord_with_interval_step_x": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlotStep",
        "test_coord_with_interval_step_x"
      ]
    ]
  ],
  "test_coord_with_interval_step_y": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlotStep",
        "test_coord_with_interval_step_y"
      ]
    ]
  ],
  "test_3d_array": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlotHistogram",
        "test_3d_array"
      ]
    ]
  ],
  "test_xlabel_uses_name": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlotHistogram",
        "test_xlabel_uses_name"
      ]
    ]
  ],
  "test_title_is_histogram": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlotHistogram",
        "test_title_is_histogram"
      ]
    ]
  ],
  "test_can_pass_in_kwargs": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlotHistogram",
        "test_can_pass_in_kwargs"
      ]
    ]
  ],
  "test_hist_coord_with_interval": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPlotHistogram",
        "test_hist_coord_with_interval"
      ]
    ]
  ],
  "test_robust": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDetermineCmapParams",
        "test_robust"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_robust"
      ]
    ]
  ],
  "test_center": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDetermineCmapParams",
        "test_center"
      ]
    ]
  ],
  "test_cmap_sequential_option": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDetermineCmapParams",
        "test_cmap_sequential_option"
      ]
    ]
  ],
  "test_cmap_sequential_explicit_option": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDetermineCmapParams",
        "test_cmap_sequential_explicit_option"
      ]
    ]
  ],
  "test_cmap_divergent_option": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDetermineCmapParams",
        "test_cmap_divergent_option"
      ]
    ]
  ],
  "test_nan_inf_are_ignored": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDetermineCmapParams",
        "test_nan_inf_are_ignored"
      ]
    ]
  ],
  "test_integer_levels": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDetermineCmapParams",
        "test_integer_levels"
      ]
    ]
  ],
  "test_list_levels": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDetermineCmapParams",
        "test_list_levels"
      ]
    ]
  ],
  "test_divergentcontrol": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDetermineCmapParams",
        "test_divergentcontrol"
      ]
    ]
  ],
  "test_norm_sets_vmin_vmax": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDetermineCmapParams",
        "test_norm_sets_vmin_vmax"
      ]
    ]
  ],
  "test_recover_from_seaborn_jet_exception": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDiscreteColorMap",
        "test_recover_from_seaborn_jet_exception"
      ]
    ]
  ],
  "test_build_discrete_cmap": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDiscreteColorMap",
        "test_build_discrete_cmap"
      ]
    ]
  ],
  "test_discrete_colormap_list_of_levels": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDiscreteColorMap",
        "test_discrete_colormap_list_of_levels"
      ]
    ]
  ],
  "test_discrete_colormap_int_levels": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDiscreteColorMap",
        "test_discrete_colormap_int_levels"
      ]
    ]
  ],
  "test_discrete_colormap_list_levels_and_vmin_or_vmax": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDiscreteColorMap",
        "test_discrete_colormap_list_levels_and_vmin_or_vmax"
      ]
    ]
  ],
  "test_discrete_colormap_provided_boundary_norm": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDiscreteColorMap",
        "test_discrete_colormap_provided_boundary_norm"
      ]
    ]
  ],
  "test_label_names": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_label_names"
      ]
    ]
  ],
  "test_1d_raises_valueerror": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_1d_raises_valueerror"
      ]
    ]
  ],
  "test_bool": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_bool"
      ]
    ]
  ],
  "test_complex_raises_typeerror": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_complex_raises_typeerror"
      ]
    ]
  ],
  "test_3d_raises_valueerror": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_3d_raises_valueerror"
      ]
    ]
  ],
  "test_multiindex_raises_typeerror": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_multiindex_raises_typeerror"
      ]
    ]
  ],
  "test_xyincrease_defaults": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_xyincrease_defaults"
      ]
    ]
  ],
  "test_xyincrease_true_changes_axes": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_xyincrease_true_changes_axes"
      ]
    ]
  ],
  "test_can_plot_all_nans": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_can_plot_all_nans"
      ]
    ]
  ],
  "test_can_plot_axis_size_one": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_can_plot_axis_size_one"
      ]
    ]
  ],
  "test_disallows_rgb_arg": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_disallows_rgb_arg"
      ]
    ]
  ],
  "test_viridis_cmap": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_viridis_cmap"
      ]
    ]
  ],
  "test_default_cmap": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_default_cmap"
      ]
    ]
  ],
  "test_seaborn_palette_as_cmap": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_seaborn_palette_as_cmap"
      ]
    ]
  ],
  "test_can_change_default_cmap": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_can_change_default_cmap"
      ]
    ]
  ],
  "test_diverging_color_limits": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_diverging_color_limits"
      ]
    ]
  ],
  "test_xy_strings": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_xy_strings"
      ]
    ]
  ],
  "test_positional_coord_string": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_positional_coord_string"
      ]
    ]
  ],
  "test_bad_x_string_exception": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_bad_x_string_exception"
      ]
    ]
  ],
  "test_coord_strings": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_coord_strings"
      ]
    ]
  ],
  "test_non_linked_coords": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_non_linked_coords"
      ]
    ]
  ],
  "test_non_linked_coords_transpose": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_non_linked_coords_transpose"
      ]
    ]
  ],
  "test_default_title": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_default_title"
      ]
    ]
  ],
  "test_colorbar_default_label": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_colorbar_default_label"
      ]
    ]
  ],
  "test_no_labels": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_no_labels"
      ]
    ]
  ],
  "test_colorbar_kwargs": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_colorbar_kwargs"
      ]
    ]
  ],
  "test_verbose_facetgrid": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_verbose_facetgrid"
      ]
    ]
  ],
  "test_2d_function_and_method_signature_same": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_2d_function_and_method_signature_same"
      ]
    ]
  ],
  "test_facetgrid_map_only_appends_mappables": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_facetgrid_map_only_appends_mappables"
      ]
    ]
  ],
  "test_facetgrid_cmap": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_facetgrid_cmap"
      ]
    ]
  ],
  "test_facetgrid_cbar_kwargs": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_facetgrid_cbar_kwargs"
      ]
    ]
  ],
  "test_facetgrid_no_cbar_ax": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_facetgrid_no_cbar_ax"
      ]
    ]
  ],
  "test_cmap_and_color_both": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_cmap_and_color_both"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestContour",
        "test_cmap_and_color_both"
      ]
    ]
  ],
  "test_2d_coord_with_interval": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_2d_coord_with_interval"
      ]
    ]
  ],
  "test_colormap_error_norm_and_vmin_vmax": [
    [
      "xarray/tests/test_plot.py",
      [
        "Common2dMixin",
        "test_colormap_error_norm_and_vmin_vmax"
      ]
    ]
  ],
  "test_contourf_called": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestContourf",
        "test_contourf_called"
      ]
    ]
  ],
  "test_primitive_artist_returned": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestContourf",
        "test_primitive_artist_returned"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestPcolormesh",
        "test_primitive_artist_returned"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_primitive_artist_returned"
      ]
    ]
  ],
  "test_extend": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestContourf",
        "test_extend"
      ]
    ]
  ],
  "test_2d_coord_names": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestContourf",
        "test_2d_coord_names"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestContour",
        "test_2d_coord_names"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestPcolormesh",
        "test_2d_coord_names"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_2d_coord_names"
      ]
    ]
  ],
  "test_levels": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestContourf",
        "test_levels"
      ]
    ]
  ],
  "_color_as_tuple": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestContour",
        "_color_as_tuple"
      ]
    ]
  ],
  "test_colors": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestContour",
        "test_colors"
      ]
    ]
  ],
  "test_colors_np_levels": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestContour",
        "test_colors_np_levels"
      ]
    ]
  ],
  "list_of_colors_in_cmap_raises_error": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestContour",
        "list_of_colors_in_cmap_raises_error"
      ]
    ]
  ],
  "test_single_level": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestContour",
        "test_single_level"
      ]
    ]
  ],
  "test_everything_plotted": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPcolormesh",
        "test_everything_plotted"
      ]
    ]
  ],
  "test_dont_infer_interval_breaks_for_cartopy": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestPcolormesh",
        "test_dont_infer_interval_breaks_for_cartopy"
      ]
    ]
  ],
  "test_imshow_called": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_imshow_called"
      ]
    ]
  ],
  "test_xy_pixel_centered": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_xy_pixel_centered"
      ]
    ]
  ],
  "test_default_aspect_is_auto": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_default_aspect_is_auto"
      ]
    ]
  ],
  "test_cannot_change_mpl_aspect": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_cannot_change_mpl_aspect"
      ]
    ]
  ],
  "test_seaborn_palette_needs_levels": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_seaborn_palette_needs_levels"
      ]
    ]
  ],
  "test_plot_rgb_image": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_plot_rgb_image"
      ]
    ]
  ],
  "test_plot_rgb_image_explicit": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_plot_rgb_image_explicit"
      ]
    ]
  ],
  "test_plot_rgb_faceted": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_plot_rgb_faceted"
      ]
    ]
  ],
  "test_plot_rgba_image_transposed": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_plot_rgba_image_transposed"
      ]
    ]
  ],
  "test_warns_ambigious_dim": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_warns_ambigious_dim"
      ]
    ]
  ],
  "test_rgb_errors_too_many_dims": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_rgb_errors_too_many_dims"
      ]
    ]
  ],
  "test_rgb_errors_bad_dim_sizes": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_rgb_errors_bad_dim_sizes"
      ]
    ]
  ],
  "test_normalize_rgb_imshow": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_normalize_rgb_imshow"
      ]
    ]
  ],
  "test_normalize_rgb_one_arg_error": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_normalize_rgb_one_arg_error"
      ]
    ]
  ],
  "test_imshow_rgb_values_in_valid_range": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_imshow_rgb_values_in_valid_range"
      ]
    ]
  ],
  "test_regression_rgb_imshow_dim_size_one": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_regression_rgb_imshow_dim_size_one"
      ]
    ]
  ],
  "test_origin_overrides_xyincrease": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestImshow",
        "test_origin_overrides_xyincrease"
      ]
    ]
  ],
  "test_no_args": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_no_args"
      ]
    ]
  ],
  "test_names_appear_somewhere": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_names_appear_somewhere"
      ]
    ]
  ],
  "test_text_not_super_long": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_text_not_super_long"
      ]
    ]
  ],
  "test_colorbar": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_colorbar"
      ]
    ]
  ],
  "test_empty_cell": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_empty_cell"
      ]
    ]
  ],
  "test_norow_nocol_error": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_norow_nocol_error"
      ]
    ]
  ],
  "test_groups": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_groups"
      ]
    ]
  ],
  "test_float_index": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_float_index"
      ]
    ]
  ],
  "test_nonunique_index_error": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_nonunique_index_error"
      ]
    ]
  ],
  "test_can_set_vmin_vmax": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_can_set_vmin_vmax"
      ]
    ]
  ],
  "test_vmin_vmax_equal": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_vmin_vmax_equal"
      ]
    ]
  ],
  "test_can_set_norm": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_can_set_norm"
      ]
    ]
  ],
  "test_figure_size": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_figure_size"
      ]
    ]
  ],
  "test_num_ticks": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_num_ticks"
      ]
    ]
  ],
  "test_map_dataset": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_map_dataset"
      ]
    ]
  ],
  "test_set_axis_labels": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_set_axis_labels"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetedLinePlots",
        "test_set_axis_labels"
      ]
    ]
  ],
  "test_facetgrid_colorbar": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_facetgrid_colorbar"
      ]
    ]
  ],
  "test_facetgrid_polar": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid",
        "test_facetgrid_polar"
      ]
    ]
  ],
  "test_default_labels": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetGrid4d",
        "test_default_labels"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetedLinePlots",
        "test_default_labels"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestDatasetScatterPlots",
        "test_default_labels"
      ]
    ]
  ],
  "test_legend_labels": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetedLinePlotsLegend",
        "test_legend_labels"
      ]
    ]
  ],
  "test_facetgrid_shape": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetedLinePlots",
        "test_facetgrid_shape"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestDatasetScatterPlots",
        "test_facetgrid_shape"
      ]
    ]
  ],
  "test_unnamed_args": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetedLinePlots",
        "test_unnamed_args"
      ]
    ]
  ],
  "test_test_empty_cell": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetedLinePlots",
        "test_test_empty_cell"
      ]
    ]
  ],
  "test_axes_in_faceted_plot": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetedLinePlots",
        "test_axes_in_faceted_plot"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestDatasetScatterPlots",
        "test_axes_in_faceted_plot"
      ]
    ]
  ],
  "test_figsize_and_size": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetedLinePlots",
        "test_figsize_and_size"
      ]
    ],
    [
      "xarray/tests/test_plot.py",
      [
        "TestDatasetScatterPlots",
        "test_figsize_and_size"
      ]
    ]
  ],
  "test_wrong_num_of_dimensions": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestFacetedLinePlots",
        "test_wrong_num_of_dimensions"
      ]
    ]
  ],
  "test_add_guide": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDatasetScatterPlots",
        "test_add_guide"
      ]
    ]
  ],
  "test_bad_args": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDatasetScatterPlots",
        "test_bad_args"
      ]
    ]
  ],
  "test_datetime_hue": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDatasetScatterPlots",
        "test_datetime_hue"
      ]
    ]
  ],
  "test_facetgrid_hue_style": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDatasetScatterPlots",
        "test_facetgrid_hue_style"
      ]
    ]
  ],
  "test_scatter": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDatasetScatterPlots",
        "test_scatter"
      ]
    ]
  ],
  "test_non_numeric_legend": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDatasetScatterPlots",
        "test_non_numeric_legend"
      ]
    ]
  ],
  "test_add_legend_by_default": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDatasetScatterPlots",
        "test_add_legend_by_default"
      ]
    ]
  ],
  "test_datetime_line_plot": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestDatetimePlot",
        "test_datetime_line_plot"
      ]
    ]
  ],
  "test_cfdatetime_line_plot": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestCFDatetimePlot",
        "test_cfdatetime_line_plot"
      ]
    ]
  ],
  "test_cfdatetime_pcolormesh_plot": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestCFDatetimePlot",
        "test_cfdatetime_pcolormesh_plot"
      ]
    ]
  ],
  "test_cfdatetime_contour_plot": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestCFDatetimePlot",
        "test_cfdatetime_contour_plot"
      ]
    ]
  ],
  "test_ncaxis_notinstalled_line_plot": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestNcAxisNotInstalled",
        "test_ncaxis_notinstalled_line_plot"
      ]
    ]
  ],
  "test_xincrease_kwarg": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestAxesKwargs",
        "test_xincrease_kwarg"
      ]
    ]
  ],
  "test_yincrease_kwarg": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestAxesKwargs",
        "test_yincrease_kwarg"
      ]
    ]
  ],
  "test_xscale_kwarg": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestAxesKwargs",
        "test_xscale_kwarg"
      ]
    ]
  ],
  "test_yscale_kwarg": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestAxesKwargs",
        "test_yscale_kwarg"
      ]
    ]
  ],
  "test_xlim_kwarg": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestAxesKwargs",
        "test_xlim_kwarg"
      ]
    ]
  ],
  "test_ylim_kwarg": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestAxesKwargs",
        "test_ylim_kwarg"
      ]
    ]
  ],
  "test_xticks_kwarg": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestAxesKwargs",
        "test_xticks_kwarg"
      ]
    ]
  ],
  "test_yticks_kwarg": [
    [
      "xarray/tests/test_plot.py",
      [
        "TestAxesKwargs",
        "test_yticks_kwarg"
      ]
    ]
  ],
  "test_plot_transposed_nondim_coord": [
    [
      "xarray/tests/test_plot.py",
      [
        "test_plot_transposed_nondim_coord"
      ]
    ]
  ],
  "test_plot_transposes_properly": [
    [
      "xarray/tests/test_plot.py",
      [
        "test_plot_transposes_properly"
      ]
    ]
  ],
  "test_facetgrid_single_contour": [
    [
      "xarray/tests/test_plot.py",
      [
        "test_facetgrid_single_contour"
      ]
    ]
  ],
  "test_show_versions": [
    [
      "xarray/tests/test_print_versions.py",
      [
        "test_show_versions"
      ]
    ]
  ],
  "assert_sparse_equal": [
    [
      "xarray/tests/test_sparse.py",
      [
        "assert_sparse_equal"
      ]
    ]
  ],
  "make_ndarray": [
    [
      "xarray/tests/test_sparse.py",
      [
        "make_ndarray"
      ]
    ]
  ],
  "make_sparray": [
    [
      "xarray/tests/test_sparse.py",
      [
        "make_sparray"
      ]
    ]
  ],
  "make_xrvar": [
    [
      "xarray/tests/test_sparse.py",
      [
        "make_xrvar"
      ]
    ]
  ],
  "make_xrarray": [
    [
      "xarray/tests/test_sparse.py",
      [
        "make_xrarray"
      ]
    ]
  ],
  "test_variable_property": [
    [
      "xarray/tests/test_sparse.py",
      [
        "test_variable_property"
      ]
    ]
  ],
  "test_variable_method": [
    [
      "xarray/tests/test_sparse.py",
      [
        "test_variable_method"
      ]
    ]
  ],
  "test_1d_variable_method": [
    [
      "xarray/tests/test_sparse.py",
      [
        "test_1d_variable_method"
      ]
    ]
  ],
  "test_dataarray_property": [
    [
      "xarray/tests/test_sparse.py",
      [
        "test_dataarray_property"
      ]
    ]
  ],
  "test_dataarray_method": [
    [
      "xarray/tests/test_sparse.py",
      [
        "test_dataarray_method"
      ]
    ]
  ],
  "test_datarray_1d_method": [
    [
      "xarray/tests/test_sparse.py",
      [
        "test_datarray_1d_method"
      ]
    ]
  ],
  "test_align_2d": [
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_align_2d"
      ]
    ]
  ],
  "test_align_outer": [
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_align_outer"
      ]
    ]
  ],
  "test_sparse_dask_dataset_repr": [
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseDataArrayAndDataset",
        "test_sparse_dask_dataset_repr"
      ]
    ]
  ],
  "test_sparse_coords": [
    [
      "xarray/tests/test_sparse.py",
      [
        "TestSparseCoords",
        "test_sparse_coords"
      ]
    ]
  ],
  "test_dask_token": [
    [
      "xarray/tests/test_sparse.py",
      [
        "test_dask_token"
      ]
    ]
  ],
  "test_apply_ufunc_meta_to_blockwise": [
    [
      "xarray/tests/test_sparse.py",
      [
        "test_apply_ufunc_meta_to_blockwise"
      ]
    ]
  ],
  "test_allclose_regression": [
    [
      "xarray/tests/test_testing.py",
      [
        "test_allclose_regression"
      ]
    ]
  ],
  "test_assert_allclose": [
    [
      "xarray/tests/test_testing.py",
      [
        "test_assert_allclose"
      ]
    ]
  ],
  "test_download_from_github": [
    [
      "xarray/tests/test_tutorial.py",
      [
        "TestLoadDataset",
        "test_download_from_github"
      ]
    ]
  ],
  "test_download_from_github_load_without_cache": [
    [
      "xarray/tests/test_tutorial.py",
      [
        "TestLoadDataset",
        "test_download_from_github_load_without_cache"
      ]
    ]
  ],
  "test_unary": [
    [
      "xarray/tests/test_ufuncs.py",
      [
        "test_unary"
      ]
    ]
  ],
  "test_binary": [
    [
      "xarray/tests/test_ufuncs.py",
      [
        "test_binary"
      ]
    ]
  ],
  "test_binary_out": [
    [
      "xarray/tests/test_ufuncs.py",
      [
        "test_binary_out"
      ]
    ]
  ],
  "test_alignment": [
    [
      "xarray/tests/test_ufuncs.py",
      [
        "test_alignment"
      ]
    ]
  ],
  "test_xarray_defers_to_unrecognized_type": [
    [
      "xarray/tests/test_ufuncs.py",
      [
        "test_xarray_defers_to_unrecognized_type"
      ]
    ]
  ],
  "test_xarray_handles_dask": [
    [
      "xarray/tests/test_ufuncs.py",
      [
        "test_xarray_handles_dask"
      ]
    ]
  ],
  "test_dask_defers_to_xarray": [
    [
      "xarray/tests/test_ufuncs.py",
      [
        "test_dask_defers_to_xarray"
      ]
    ]
  ],
  "test_gufunc_methods": [
    [
      "xarray/tests/test_ufuncs.py",
      [
        "test_gufunc_methods"
      ]
    ]
  ],
  "test_out": [
    [
      "xarray/tests/test_ufuncs.py",
      [
        "test_out"
      ]
    ]
  ],
  "test_gufuncs": [
    [
      "xarray/tests/test_ufuncs.py",
      [
        "test_gufuncs"
      ]
    ]
  ],
  "test_xarray_ufuncs_deprecation": [
    [
      "xarray/tests/test_ufuncs.py",
      [
        "test_xarray_ufuncs_deprecation"
      ]
    ]
  ],
  "test_numpy_ufuncs": [
    [
      "xarray/tests/test_ufuncs.py",
      [
        "test_numpy_ufuncs"
      ]
    ]
  ],
  "test_xarray_ufuncs_pickle": [
    [
      "xarray/tests/test_ufuncs.py",
      [
        "test_xarray_ufuncs_pickle"
      ]
    ]
  ],
  "is_compatible": [
    [
      "xarray/tests/test_units.py",
      [
        "is_compatible"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_comparisons",
        "is_compatible"
      ]
    ]
  ],
  "compatible_mappings": [
    [
      "xarray/tests/test_units.py",
      [
        "compatible_mappings"
      ]
    ]
  ],
  "merge_mappings": [
    [
      "xarray/tests/test_units.py",
      [
        "merge_mappings"
      ]
    ]
  ],
  "zip_mappings": [
    [
      "xarray/tests/test_units.py",
      [
        "zip_mappings"
      ]
    ]
  ],
  "array_extract_units": [
    [
      "xarray/tests/test_units.py",
      [
        "array_extract_units"
      ]
    ]
  ],
  "array_strip_units": [
    [
      "xarray/tests/test_units.py",
      [
        "array_strip_units"
      ]
    ]
  ],
  "array_attach_units": [
    [
      "xarray/tests/test_units.py",
      [
        "array_attach_units"
      ]
    ]
  ],
  "extract_units": [
    [
      "xarray/tests/test_units.py",
      [
        "extract_units"
      ]
    ]
  ],
  "strip_units": [
    [
      "xarray/tests/test_units.py",
      [
        "strip_units"
      ]
    ]
  ],
  "attach_units": [
    [
      "xarray/tests/test_units.py",
      [
        "attach_units"
      ]
    ]
  ],
  "convert_units": [
    [
      "xarray/tests/test_units.py",
      [
        "convert_units"
      ]
    ]
  ],
  "assert_units_equal": [
    [
      "xarray/tests/test_units.py",
      [
        "assert_units_equal"
      ]
    ]
  ],
  "merge_args": [
    [
      "xarray/tests/test_units.py",
      [
        "merge_args"
      ]
    ]
  ],
  "test_apply_ufunc_dataarray": [
    [
      "xarray/tests/test_units.py",
      [
        "test_apply_ufunc_dataarray"
      ]
    ]
  ],
  "test_apply_ufunc_dataset": [
    [
      "xarray/tests/test_units.py",
      [
        "test_apply_ufunc_dataset"
      ]
    ]
  ],
  "test_align_dataarray": [
    [
      "xarray/tests/test_units.py",
      [
        "test_align_dataarray"
      ]
    ]
  ],
  "test_align_dataset": [
    [
      "xarray/tests/test_units.py",
      [
        "test_align_dataset"
      ]
    ]
  ],
  "test_broadcast_dataarray": [
    [
      "xarray/tests/test_units.py",
      [
        "test_broadcast_dataarray"
      ]
    ]
  ],
  "test_broadcast_dataset": [
    [
      "xarray/tests/test_units.py",
      [
        "test_broadcast_dataset"
      ]
    ]
  ],
  "test_combine_nested": [
    [
      "xarray/tests/test_units.py",
      [
        "test_combine_nested"
      ]
    ]
  ],
  "test_concat_dataarray": [
    [
      "xarray/tests/test_units.py",
      [
        "test_concat_dataarray"
      ]
    ]
  ],
  "test_concat_dataset": [
    [
      "xarray/tests/test_units.py",
      [
        "test_concat_dataset"
      ]
    ]
  ],
  "test_merge_dataset": [
    [
      "xarray/tests/test_units.py",
      [
        "test_merge_dataset"
      ]
    ]
  ],
  "test_replication_dataarray": [
    [
      "xarray/tests/test_units.py",
      [
        "test_replication_dataarray"
      ]
    ]
  ],
  "test_replication_dataset": [
    [
      "xarray/tests/test_units.py",
      [
        "test_replication_dataset"
      ]
    ]
  ],
  "test_replication_full_like_dataarray": [
    [
      "xarray/tests/test_units.py",
      [
        "test_replication_full_like_dataarray"
      ]
    ]
  ],
  "test_replication_full_like_dataset": [
    [
      "xarray/tests/test_units.py",
      [
        "test_replication_full_like_dataset"
      ]
    ]
  ],
  "test_where_dataarray": [
    [
      "xarray/tests/test_units.py",
      [
        "test_where_dataarray"
      ]
    ]
  ],
  "test_where_dataset": [
    [
      "xarray/tests/test_units.py",
      [
        "test_where_dataset"
      ]
    ]
  ],
  "test_dot_dataarray": [
    [
      "xarray/tests/test_units.py",
      [
        "test_dot_dataarray"
      ]
    ]
  ],
  "delete_attrs": [
    [
      "xarray/tests/test_units.py",
      [
        "delete_attrs"
      ]
    ]
  ],
  "cls": [
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "cls"
      ]
    ]
  ],
  "example_1d_objects": [
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "example_1d_objects"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "example_1d_objects"
      ]
    ]
  ],
  "test_aggregation": [
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_aggregation"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_aggregation"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_aggregation"
      ]
    ]
  ],
  "test_aggregate_complex": [
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_aggregate_complex"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_aggregate_complex"
      ]
    ]
  ],
  "test_numpy_methods": [
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_numpy_methods"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_numpy_methods"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_numpy_methods"
      ]
    ]
  ],
  "test_raw_numpy_methods": [
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_raw_numpy_methods"
      ]
    ]
  ],
  "test_missing_value_detection": [
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_missing_value_detection"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_missing_value_detection"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_missing_value_detection"
      ]
    ]
  ],
  "test_missing_value_fillna": [
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_missing_value_fillna"
      ]
    ]
  ],
  "test_comparisons": [
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_comparisons"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_comparisons"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_comparisons"
      ]
    ]
  ],
  "test_1d_math": [
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_1d_math"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_1d_math"
      ]
    ]
  ],
  "test_masking": [
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_masking"
      ]
    ]
  ],
  "test_computation": [
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_computation"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_computation"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_computation"
      ]
    ]
  ],
  "test_searchsorted": [
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_searchsorted"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_searchsorted"
      ]
    ]
  ],
  "test_set_dims": [
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_set_dims"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_set_dims"
      ]
    ]
  ],
  "test_no_conflicts": [
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_no_conflicts"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_no_conflicts"
      ]
    ]
  ],
  "test_pad_constant_values": [
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_pad_constant_values"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_pad_constant_values"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_pad_constant_values"
      ]
    ]
  ],
  "test_pad_unit_constant_value": [
    [
      "xarray/tests/test_units.py",
      [
        "TestVariable",
        "test_pad_unit_constant_value"
      ]
    ]
  ],
  "test_init": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_init"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_init"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_init"
      ]
    ]
  ],
  "test_unary_operations": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_unary_operations"
      ]
    ]
  ],
  "test_binary_operations": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_binary_operations"
      ]
    ]
  ],
  "test_comparison_operations": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_comparison_operations"
      ]
    ]
  ],
  "test_numpy_properties": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_numpy_properties"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_numpy_properties"
      ]
    ]
  ],
  "test_item": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_item"
      ]
    ]
  ],
  "test_numpy_methods_with_args": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_numpy_methods_with_args"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_numpy_methods_with_args"
      ]
    ]
  ],
  "test_missing_value_filling": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_missing_value_filling"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_missing_value_filling"
      ]
    ]
  ],
  "test_interpolate_na": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_interpolate_na"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_interpolate_na"
      ]
    ]
  ],
  "test_content_manipulation": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_content_manipulation"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_content_manipulation"
      ]
    ]
  ],
  "test_content_manipulation_with_units": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_content_manipulation_with_units"
      ]
    ]
  ],
  "test_drop_sel": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_drop_sel"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_drop_sel"
      ]
    ]
  ],
  "test_head_tail_thin": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_head_tail_thin"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_head_tail_thin"
      ]
    ]
  ],
  "test_interp_reindex": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_interp_reindex"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_interp_reindex"
      ]
    ]
  ],
  "test_interp_reindex_indexing": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_interp_reindex_indexing"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_interp_reindex_indexing"
      ]
    ]
  ],
  "test_interp_reindex_like": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_interp_reindex_like"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_interp_reindex_like"
      ]
    ]
  ],
  "test_interp_reindex_like_indexing": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_interp_reindex_like_indexing"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_interp_reindex_like_indexing"
      ]
    ]
  ],
  "test_stacking_stacked": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_stacking_stacked"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_stacking_stacked"
      ]
    ]
  ],
  "test_to_unstacked_dataset": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_to_unstacked_dataset"
      ]
    ]
  ],
  "test_stacking_reordering": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_stacking_reordering"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_stacking_reordering"
      ]
    ]
  ],
  "test_computation_objects": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_computation_objects"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_computation_objects"
      ]
    ]
  ],
  "test_grouped_operations": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataArray",
        "test_grouped_operations"
      ]
    ],
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_grouped_operations"
      ]
    ]
  ],
  "test_to_stacked_array": [
    [
      "xarray/tests/test_units.py",
      [
        "TestDataset",
        "test_to_stacked_array"
      ]
    ]
  ],
  "test_safe_cast_to_index": [
    [
      "xarray/tests/test_utils.py",
      [
        "test_safe_cast_to_index"
      ]
    ]
  ],
  "test_safe_cast_to_index_cftimeindex": [
    [
      "xarray/tests/test_utils.py",
      [
        "test_safe_cast_to_index_cftimeindex"
      ]
    ]
  ],
  "test_safe_cast_to_index_datetime_datetime": [
    [
      "xarray/tests/test_utils.py",
      [
        "test_safe_cast_to_index_datetime_datetime"
      ]
    ]
  ],
  "test_multiindex_from_product_levels": [
    [
      "xarray/tests/test_utils.py",
      [
        "test_multiindex_from_product_levels"
      ]
    ]
  ],
  "test_multiindex_from_product_levels_non_unique": [
    [
      "xarray/tests/test_utils.py",
      [
        "test_multiindex_from_product_levels_non_unique"
      ]
    ]
  ],
  "test_0d": [
    [
      "xarray/tests/test_utils.py",
      [
        "TestArrayEquiv",
        "test_0d"
      ]
    ]
  ],
  "test_equivalent": [
    [
      "xarray/tests/test_utils.py",
      [
        "TestDictionaries",
        "test_equivalent"
      ]
    ]
  ],
  "test_safe": [
    [
      "xarray/tests/test_utils.py",
      [
        "TestDictionaries",
        "test_safe"
      ]
    ]
  ],
  "test_unsafe": [
    [
      "xarray/tests/test_utils.py",
      [
        "TestDictionaries",
        "test_unsafe"
      ]
    ]
  ],
  "test_compat_dict_intersection": [
    [
      "xarray/tests/test_utils.py",
      [
        "TestDictionaries",
        "test_compat_dict_intersection"
      ]
    ]
  ],
  "test_compat_dict_union": [
    [
      "xarray/tests/test_utils.py",
      [
        "TestDictionaries",
        "test_compat_dict_union"
      ]
    ]
  ],
  "test_dict_equiv": [
    [
      "xarray/tests/test_utils.py",
      [
        "TestDictionaries",
        "test_dict_equiv"
      ]
    ]
  ],
  "test_frozen": [
    [
      "xarray/tests/test_utils.py",
      [
        "TestDictionaries",
        "test_frozen"
      ]
    ]
  ],
  "test_sorted_keys_dict": [
    [
      "xarray/tests/test_utils.py",
      [
        "TestDictionaries",
        "test_sorted_keys_dict"
      ]
    ]
  ],
  "test_repr_object": [
    [
      "xarray/tests/test_utils.py",
      [
        "test_repr_object"
      ]
    ]
  ],
  "test_repr_object_magic_methods": [
    [
      "xarray/tests/test_utils.py",
      [
        "test_repr_object_magic_methods"
      ]
    ]
  ],
  "test_is_remote_uri": [
    [
      "xarray/tests/test_utils.py",
      [
        "test_is_remote_uri"
      ]
    ]
  ],
  "test_is_grib_path": [
    [
      "xarray/tests/test_utils.py",
      [
        "test_is_grib_path"
      ]
    ]
  ],
  "test_sorted_uniform": [
    [
      "xarray/tests/test_utils.py",
      [
        "Test_is_uniform_and_sorted",
        "test_sorted_uniform"
      ]
    ]
  ],
  "test_sorted_not_uniform": [
    [
      "xarray/tests/test_utils.py",
      [
        "Test_is_uniform_and_sorted",
        "test_sorted_not_uniform"
      ]
    ]
  ],
  "test_not_sorted_uniform": [
    [
      "xarray/tests/test_utils.py",
      [
        "Test_is_uniform_and_sorted",
        "test_not_sorted_uniform"
      ]
    ]
  ],
  "test_not_sorted_not_uniform": [
    [
      "xarray/tests/test_utils.py",
      [
        "Test_is_uniform_and_sorted",
        "test_not_sorted_not_uniform"
      ]
    ]
  ],
  "test_two_numbers": [
    [
      "xarray/tests/test_utils.py",
      [
        "Test_is_uniform_and_sorted",
        "test_two_numbers"
      ]
    ]
  ],
  "test_relative_tolerance": [
    [
      "xarray/tests/test_utils.py",
      [
        "Test_is_uniform_and_sorted",
        "test_relative_tolerance"
      ]
    ]
  ],
  "test_hashable": [
    [
      "xarray/tests/test_utils.py",
      [
        "Test_hashable",
        "test_hashable"
      ]
    ]
  ],
  "test_dask_array_is_scalar": [
    [
      "xarray/tests/test_utils.py",
      [
        "test_dask_array_is_scalar"
      ]
    ]
  ],
  "test_hidden_key_dict": [
    [
      "xarray/tests/test_utils.py",
      [
        "test_hidden_key_dict"
      ]
    ]
  ],
  "test_either_dict_or_kwargs": [
    [
      "xarray/tests/test_utils.py",
      [
        "test_either_dict_or_kwargs"
      ]
    ]
  ],
  "test_infix_dims": [
    [
      "xarray/tests/test_utils.py",
      [
        "test_infix_dims"
      ]
    ]
  ],
  "test_infix_dims_errors": [
    [
      "xarray/tests/test_utils.py",
      [
        "test_infix_dims_errors"
      ]
    ]
  ],
  "test_getitem_1d": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_getitem_1d"
      ]
    ]
  ],
  "test_getitem_1d_fancy": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_getitem_1d_fancy"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariableWithDask",
        "test_getitem_1d_fancy"
      ]
    ]
  ],
  "test_getitem_with_mask": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_getitem_with_mask"
      ]
    ]
  ],
  "test_getitem_with_mask_size_zero": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_getitem_with_mask_size_zero"
      ]
    ]
  ],
  "test_getitem_with_mask_nd_indexer": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_getitem_with_mask_nd_indexer"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariableWithDask",
        "test_getitem_with_mask_nd_indexer"
      ]
    ]
  ],
  "_assertIndexedLikeNDArray": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "_assertIndexedLikeNDArray"
      ]
    ]
  ],
  "test_index_0d_int": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_index_0d_int"
      ]
    ]
  ],
  "test_index_0d_float": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_index_0d_float"
      ]
    ]
  ],
  "test_index_0d_string": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_index_0d_string"
      ]
    ]
  ],
  "test_index_0d_datetime": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_index_0d_datetime"
      ]
    ]
  ],
  "test_index_0d_timedelta64": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_index_0d_timedelta64"
      ]
    ]
  ],
  "test_index_0d_not_a_time": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_index_0d_not_a_time"
      ]
    ]
  ],
  "test_index_0d_object": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_index_0d_object"
      ]
    ]
  ],
  "test_0d_object_array_with_list": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_0d_object_array_with_list"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariableWithDask",
        "test_0d_object_array_with_list"
      ]
    ]
  ],
  "test_index_and_concat_datetime": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_index_and_concat_datetime"
      ]
    ]
  ],
  "test_0d_time_data": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_0d_time_data"
      ]
    ]
  ],
  "test_datetime64_conversion": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_datetime64_conversion"
      ]
    ]
  ],
  "test_timedelta64_conversion": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_timedelta64_conversion"
      ]
    ]
  ],
  "test_object_conversion": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_object_conversion"
      ]
    ]
  ],
  "test_pandas_data": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_pandas_data"
      ]
    ]
  ],
  "test_pandas_period_index": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_pandas_period_index"
      ]
    ]
  ],
  "test_1d_reduce": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_1d_reduce"
      ]
    ]
  ],
  "test___array__": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test___array__"
      ]
    ]
  ],
  "test_equals_all_dtypes": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_equals_all_dtypes"
      ]
    ]
  ],
  "test_eq_all_dtypes": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_eq_all_dtypes"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariableWithDask",
        "test_eq_all_dtypes"
      ]
    ]
  ],
  "test_encoding_preserved": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_encoding_preserved"
      ]
    ]
  ],
  "test_concat_attrs": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_concat_attrs"
      ]
    ]
  ],
  "test_concat_fixed_len_str": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_concat_fixed_len_str"
      ]
    ]
  ],
  "test_concat_number_strings": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_concat_number_strings"
      ]
    ]
  ],
  "test_concat_mixed_dtypes": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_concat_mixed_dtypes"
      ]
    ]
  ],
  "test_copy_index": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_copy_index"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariableWithDask",
        "test_copy_index"
      ]
    ]
  ],
  "test_copy_index_with_data": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_copy_index_with_data"
      ]
    ]
  ],
  "test_copy_index_with_data_errors": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_copy_index_with_data_errors"
      ]
    ]
  ],
  "test_pandas_cateogrical_dtype": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_pandas_cateogrical_dtype"
      ]
    ]
  ],
  "test_pandas_datetime64_with_tz": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_pandas_datetime64_with_tz"
      ]
    ]
  ],
  "test_getitem_advanced": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_getitem_advanced"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_getitem_advanced"
      ]
    ]
  ],
  "test_getitem_uint_1d": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_getitem_uint_1d"
      ]
    ]
  ],
  "test_getitem_uint": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_getitem_uint"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_getitem_uint"
      ]
    ]
  ],
  "test_getitem_0d_array": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_getitem_0d_array"
      ]
    ]
  ],
  "test_getitem_fancy": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_getitem_fancy"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariableWithDask",
        "test_getitem_fancy"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_getitem_fancy"
      ]
    ]
  ],
  "test_getitem_error": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_getitem_error"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_getitem_error"
      ]
    ]
  ],
  "test_rolling_window": [
    [
      "xarray/tests/test_variable.py",
      [
        "VariableSubclassobjects",
        "test_rolling_window"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_rolling_window"
      ]
    ]
  ],
  "test_data_and_values": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_data_and_values"
      ]
    ]
  ],
  "test_numpy_same_methods": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_numpy_same_methods"
      ]
    ]
  ],
  "test_datetime64_conversion_scalar": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_datetime64_conversion_scalar"
      ]
    ]
  ],
  "test_timedelta64_conversion_scalar": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_timedelta64_conversion_scalar"
      ]
    ]
  ],
  "test_0d_str": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_0d_str"
      ]
    ]
  ],
  "test_0d_datetime": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_0d_datetime"
      ]
    ]
  ],
  "test_0d_timedelta": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_0d_timedelta"
      ]
    ]
  ],
  "test_as_variable": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_as_variable"
      ]
    ]
  ],
  "test_repr_lazy_data": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_repr_lazy_data"
      ]
    ]
  ],
  "test_detect_indexer_type": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_detect_indexer_type"
      ]
    ]
  ],
  "assert_indexer_type": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_indexer_type",
        "assert_indexer_type"
      ]
    ]
  ],
  "test_indexer_type": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_indexer_type"
      ]
    ]
  ],
  "test_items": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_items"
      ]
    ]
  ],
  "test_getitem_basic": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_getitem_basic"
      ]
    ]
  ],
  "test_getitem_with_mask_2d_input": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_getitem_with_mask_2d_input"
      ]
    ]
  ],
  "test_index_0d_numpy_string": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_index_0d_numpy_string"
      ]
    ]
  ],
  "test_indexing_0d_unicode": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_indexing_0d_unicode"
      ]
    ]
  ],
  "test_shift2d": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_shift2d"
      ]
    ]
  ],
  "test_roll_consistency": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_roll_consistency"
      ]
    ]
  ],
  "test_transpose_0d": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_transpose_0d"
      ]
    ]
  ],
  "test_get_axis_num": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_get_axis_num"
      ]
    ]
  ],
  "test_set_dims_object_dtype": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_set_dims_object_dtype"
      ]
    ]
  ],
  "test_stack_errors": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_stack_errors"
      ]
    ]
  ],
  "test_unstack_2d": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_unstack_2d"
      ]
    ]
  ],
  "test_stack_unstack_consistency": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_stack_unstack_consistency"
      ]
    ]
  ],
  "test_broadcasting_math": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_broadcasting_math"
      ]
    ]
  ],
  "test_broadcasting_failures": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_broadcasting_failures"
      ]
    ]
  ],
  "test_inplace_math": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_inplace_math"
      ]
    ]
  ],
  "test_quantile_dask": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_quantile_dask"
      ]
    ]
  ],
  "test_quantile_chunked_dim_error": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_quantile_chunked_dim_error"
      ]
    ]
  ],
  "test_quantile_out_of_bounds": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_quantile_out_of_bounds"
      ]
    ]
  ],
  "test_rank_dask_raises": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_rank_dask_raises"
      ]
    ]
  ],
  "test_big_endian_reduce": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_big_endian_reduce"
      ]
    ]
  ],
  "test_reduce_funcs": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_reduce_funcs"
      ]
    ]
  ],
  "test_reduce_keepdims_dask": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_reduce_keepdims_dask"
      ]
    ]
  ],
  "test_binary_ops_keep_attrs": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_binary_ops_keep_attrs"
      ]
    ]
  ],
  "assert_assigned_2d": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_setitem_fancy",
        "assert_assigned_2d"
      ]
    ]
  ],
  "test_coarsen_2d": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariable",
        "test_coarsen_2d"
      ]
    ],
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_coarsen_2d"
      ]
    ]
  ],
  "test_as_sparse": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestVariableWithSparse",
        "test_as_sparse"
      ]
    ]
  ],
  "test_to_index": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_to_index"
      ]
    ]
  ],
  "test_multiindex_default_level_names": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_multiindex_default_level_names"
      ]
    ]
  ],
  "test_data": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_data"
      ]
    ]
  ],
  "test_level_names": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_level_names"
      ]
    ]
  ],
  "test_get_level_variable": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_get_level_variable"
      ]
    ]
  ],
  "test_concat_periods": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_concat_periods"
      ]
    ]
  ],
  "test_coordinate_alias": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_coordinate_alias"
      ]
    ]
  ],
  "test_datetime64": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestIndexVariable",
        "test_datetime64"
      ]
    ]
  ],
  "test_unchanged_types": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestAsCompatibleData",
        "test_unchanged_types"
      ]
    ]
  ],
  "test_converted_types": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestAsCompatibleData",
        "test_converted_types"
      ]
    ]
  ],
  "test_masked_array": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestAsCompatibleData",
        "test_masked_array"
      ]
    ]
  ],
  "test_full_like_dask": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestAsCompatibleData",
        "test_full_like_dask"
      ]
    ]
  ],
  "test_zeros_like": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestAsCompatibleData",
        "test_zeros_like"
      ]
    ]
  ],
  "test_ones_like": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestAsCompatibleData",
        "test_ones_like"
      ]
    ]
  ],
  "test_unsupported_type": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestAsCompatibleData",
        "test_unsupported_type"
      ]
    ]
  ],
  "check_orthogonal_indexing": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestBackendIndexing",
        "check_orthogonal_indexing"
      ]
    ]
  ],
  "check_vectorized_indexing": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestBackendIndexing",
        "check_vectorized_indexing"
      ]
    ]
  ],
  "test_NumpyIndexingAdapter": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestBackendIndexing",
        "test_NumpyIndexingAdapter"
      ]
    ]
  ],
  "test_LazilyOuterIndexedArray": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestBackendIndexing",
        "test_LazilyOuterIndexedArray"
      ]
    ]
  ],
  "test_CopyOnWriteArray": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestBackendIndexing",
        "test_CopyOnWriteArray"
      ]
    ]
  ],
  "test_MemoryCachedArray": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestBackendIndexing",
        "test_MemoryCachedArray"
      ]
    ]
  ],
  "test_DaskIndexingAdapter": [
    [
      "xarray/tests/test_variable.py",
      [
        "TestBackendIndexing",
        "test_DaskIndexingAdapter"
      ]
    ]
  ],
  "test_weighted_non_DataArray_weights": [
    [
      "xarray/tests/test_weighted.py",
      [
        "test_weighted_non_DataArray_weights"
      ]
    ]
  ],
  "test_weighted_weights_nan_raises": [
    [
      "xarray/tests/test_weighted.py",
      [
        "test_weighted_weights_nan_raises"
      ]
    ]
  ],
  "test_weighted_sum_of_weights_no_nan": [
    [
      "xarray/tests/test_weighted.py",
      [
        "test_weighted_sum_of_weights_no_nan"
      ]
    ]
  ],
  "test_weighted_sum_of_weights_nan": [
    [
      "xarray/tests/test_weighted.py",
      [
        "test_weighted_sum_of_weights_nan"
      ]
    ]
  ],
  "test_weighted_sum_of_weights_bool": [
    [
      "xarray/tests/test_weighted.py",
      [
        "test_weighted_sum_of_weights_bool"
      ]
    ]
  ],
  "test_weighted_sum_equal_weights": [
    [
      "xarray/tests/test_weighted.py",
      [
        "test_weighted_sum_equal_weights"
      ]
    ]
  ],
  "test_weighted_sum_no_nan": [
    [
      "xarray/tests/test_weighted.py",
      [
        "test_weighted_sum_no_nan"
      ]
    ]
  ],
  "test_weighted_sum_nan": [
    [
      "xarray/tests/test_weighted.py",
      [
        "test_weighted_sum_nan"
      ]
    ]
  ],
  "test_weighted_mean_equal_weights": [
    [
      "xarray/tests/test_weighted.py",
      [
        "test_weighted_mean_equal_weights"
      ]
    ]
  ],
  "test_weighted_mean_no_nan": [
    [
      "xarray/tests/test_weighted.py",
      [
        "test_weighted_mean_no_nan"
      ]
    ]
  ],
  "test_weighted_mean_nan": [
    [
      "xarray/tests/test_weighted.py",
      [
        "test_weighted_mean_nan"
      ]
    ]
  ],
  "test_weighted_mean_bool": [
    [
      "xarray/tests/test_weighted.py",
      [
        "test_weighted_mean_bool"
      ]
    ]
  ],
  "expected_weighted": [
    [
      "xarray/tests/test_weighted.py",
      [
        "expected_weighted"
      ]
    ]
  ],
  "test_weighted_operations_3D": [
    [
      "xarray/tests/test_weighted.py",
      [
        "test_weighted_operations_3D"
      ]
    ]
  ],
  "test_weighted_operations_nonequal_coords": [
    [
      "xarray/tests/test_weighted.py",
      [
        "test_weighted_operations_nonequal_coords"
      ]
    ]
  ],
  "test_weighted_operations_different_shapes": [
    [
      "xarray/tests/test_weighted.py",
      [
        "test_weighted_operations_different_shapes"
      ]
    ]
  ],
  "test_weighted_operations_keep_attr": [
    [
      "xarray/tests/test_weighted.py",
      [
        "test_weighted_operations_keep_attr"
      ]
    ]
  ],
  "test_weighted_operations_keep_attr_da_in_ds": [
    [
      "xarray/tests/test_weighted.py",
      [
        "test_weighted_operations_keep_attr_da_in_ds"
      ]
    ]
  ],
  "file_md5_checksum": [
    [
      "xarray/tutorial.py",
      [
        "file_md5_checksum"
      ]
    ]
  ],
  "scatter_example_dataset": [
    [
      "xarray/tutorial.py",
      [
        "scatter_example_dataset"
      ]
    ]
  ],
  "_dispatch_priority": [
    [
      "xarray/ufuncs.py",
      [
        "_dispatch_priority"
      ]
    ]
  ],
  "_skip_signature": [
    [
      "xarray/ufuncs.py",
      [
        "_skip_signature"
      ]
    ]
  ],
  "_remove_unused_reference_labels": [
    [
      "xarray/ufuncs.py",
      [
        "_remove_unused_reference_labels"
      ]
    ]
  ],
  "_dedent": [
    [
      "xarray/ufuncs.py",
      [
        "_dedent"
      ]
    ]
  ],
  "_create_op": [
    [
      "xarray/ufuncs.py",
      [
        "_create_op"
      ]
    ]
  ],
  "get_sys_info": [
    [
      "xarray/util/print_versions.py",
      [
        "get_sys_info"
      ]
    ]
  ],
  "netcdf_and_hdf5_versions": [
    [
      "xarray/util/print_versions.py",
      [
        "netcdf_and_hdf5_versions"
      ]
    ]
  ],
  "show_versions": [
    [
      "xarray/util/print_versions.py",
      [
        "show_versions"
      ]
    ]
  ]
}