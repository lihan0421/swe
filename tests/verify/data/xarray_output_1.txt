>>>>> Run tests
============================= test session starts ==============================
platform linux -- Python 3.9.19, pytest-6.2.3, py-1.11.0, pluggy-0.13.1
rootdir: /testbed, configfile: setup.cfg
plugins: xdist-2.2.1, hypothesis-6.108.2, forked-1.6.0, env-0.6.2, cov-5.0.0
collected 113 items

xarray/tests/test_combine.py .........................FFFFF..FFFFF..xFFF [ 38%]
FFFF.FFFFFFFFFF.FFF..FFFFFFFFFFFFF                                       [ 68%]
xarray/tests/test_concat.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF         [100%]

=================================== FAILURES ===================================
_____________________ TestCombineND.test_concat_once[dim1] _____________________

self = <xarray.tests.test_combine.TestCombineND object at 0x7f73d6094fd0>
create_combined_ids = <function _create_combined_ids at 0x7f73d61d11f0>
concat_dim = 'dim1'

    @pytest.mark.parametrize("concat_dim", ["dim1", "new_dim"])
    def test_concat_once(self, create_combined_ids, concat_dim):
        shape = (2,)
        combined_ids = create_combined_ids(shape)
        ds = create_test_data
>       result = _combine_all_along_first_dim(
            combined_ids,
            dim=concat_dim,
            data_vars="all",
            coords="different",
            compat="no_conflicts",
        )

xarray/tests/test_combine.py:279:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d61f47c0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
___________________ TestCombineND.test_concat_once[new_dim] ____________________

self = <xarray.tests.test_combine.TestCombineND object at 0x7f73d61449d0>
create_combined_ids = <function _create_combined_ids at 0x7f73d61d11f0>
concat_dim = 'new_dim'

    @pytest.mark.parametrize("concat_dim", ["dim1", "new_dim"])
    def test_concat_once(self, create_combined_ids, concat_dim):
        shape = (2,)
        combined_ids = create_combined_ids(shape)
        ds = create_test_data
>       result = _combine_all_along_first_dim(
            combined_ids,
            dim=concat_dim,
            data_vars="all",
            coords="different",
            compat="no_conflicts",
        )

xarray/tests/test_combine.py:279:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d6144580>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
___________________ TestCombineND.test_concat_only_first_dim ___________________

self = <xarray.tests.test_combine.TestCombineND object at 0x7f73d61672b0>
create_combined_ids = <function _create_combined_ids at 0x7f73d61d11f0>

    def test_concat_only_first_dim(self, create_combined_ids):
        shape = (2, 3)
        combined_ids = create_combined_ids(shape)
>       result = _combine_all_along_first_dim(
            combined_ids,
            dim="dim1",
            data_vars="all",
            coords="different",
            compat="no_conflicts",
        )

xarray/tests/test_combine.py:293:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d6167910>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
____________________ TestCombineND.test_concat_twice[dim1] _____________________

self = <xarray.tests.test_combine.TestCombineND object at 0x7f73d59967c0>
create_combined_ids = <function _create_combined_ids at 0x7f73d61d11f0>
concat_dim = 'dim1'

    @pytest.mark.parametrize("concat_dim", ["dim1", "new_dim"])
    def test_concat_twice(self, create_combined_ids, concat_dim):
        shape = (2, 3)
        combined_ids = create_combined_ids(shape)
>       result = _combine_nd(combined_ids, concat_dims=["dim1", concat_dim])

xarray/tests/test_combine.py:314:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5996460>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
___________________ TestCombineND.test_concat_twice[new_dim] ___________________

self = <xarray.tests.test_combine.TestCombineND object at 0x7f73d59d6b50>
create_combined_ids = <function _create_combined_ids at 0x7f73d61d11f0>
concat_dim = 'new_dim'

    @pytest.mark.parametrize("concat_dim", ["dim1", "new_dim"])
    def test_concat_twice(self, create_combined_ids, concat_dim):
        shape = (2, 3)
        combined_ids = create_combined_ids(shape)
>       result = _combine_nd(combined_ids, concat_dims=["dim1", concat_dim])

xarray/tests/test_combine.py:314:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d59ce850>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_____________________ TestNestedCombine.test_nested_concat _____________________

self = <xarray.tests.test_combine.TestNestedCombine object at 0x7f73d6169610>

    def test_nested_concat(self):
        objs = [Dataset({"x": [0]}), Dataset({"x": [1]})]
        expected = Dataset({"x": [0, 1]})
>       actual = combine_nested(objs, concat_dim="x")

xarray/tests/test_combine.py:343:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d59cfa00>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_________ TestNestedCombine.test_combine_nested_join[outer-expected0] __________

self = <xarray.tests.test_combine.TestNestedCombine object at 0x7f73d59e5d60>
join = 'outer'
expected = <xarray.Dataset>
Dimensions:  (x: 2, y: 2)
Coordinates:
  * x        (x) int64 0 1
  * y        (y) int64 0 1
Data variables:
    *empty*

    @pytest.mark.parametrize(
        "join, expected",
        [
            ("outer", Dataset({"x": [0, 1], "y": [0, 1]})),
            ("inner", Dataset({"x": [0, 1], "y": []})),
            ("left", Dataset({"x": [0, 1], "y": [0]})),
            ("right", Dataset({"x": [0, 1], "y": [1]})),
        ],
    )
    def test_combine_nested_join(self, join, expected):
        objs = [Dataset({"x": [0], "y": [0]}), Dataset({"x": [1], "y": [1]})]
>       actual = combine_nested(objs, concat_dim="x", join=join)

xarray/tests/test_combine.py:383:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d59e51f0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_________ TestNestedCombine.test_combine_nested_join[inner-expected1] __________

self = <xarray.tests.test_combine.TestNestedCombine object at 0x7f73d5d394f0>
join = 'inner'
expected = <xarray.Dataset>
Dimensions:  (x: 2, y: 0)
Coordinates:
  * x        (x) int64 0 1
  * y        (y) float64
Data variables:
    *empty*

    @pytest.mark.parametrize(
        "join, expected",
        [
            ("outer", Dataset({"x": [0, 1], "y": [0, 1]})),
            ("inner", Dataset({"x": [0, 1], "y": []})),
            ("left", Dataset({"x": [0, 1], "y": [0]})),
            ("right", Dataset({"x": [0, 1], "y": [1]})),
        ],
    )
    def test_combine_nested_join(self, join, expected):
        objs = [Dataset({"x": [0], "y": [0]}), Dataset({"x": [1], "y": [1]})]
>       actual = combine_nested(objs, concat_dim="x", join=join)

xarray/tests/test_combine.py:383:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d39a90>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
__________ TestNestedCombine.test_combine_nested_join[left-expected2] __________

self = <xarray.tests.test_combine.TestNestedCombine object at 0x7f73d5d64df0>
join = 'left'
expected = <xarray.Dataset>
Dimensions:  (x: 2, y: 1)
Coordinates:
  * x        (x) int64 0 1
  * y        (y) int64 0
Data variables:
    *empty*

    @pytest.mark.parametrize(
        "join, expected",
        [
            ("outer", Dataset({"x": [0, 1], "y": [0, 1]})),
            ("inner", Dataset({"x": [0, 1], "y": []})),
            ("left", Dataset({"x": [0, 1], "y": [0]})),
            ("right", Dataset({"x": [0, 1], "y": [1]})),
        ],
    )
    def test_combine_nested_join(self, join, expected):
        objs = [Dataset({"x": [0], "y": [0]}), Dataset({"x": [1], "y": [1]})]
>       actual = combine_nested(objs, concat_dim="x", join=join)

xarray/tests/test_combine.py:383:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d642e0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_________ TestNestedCombine.test_combine_nested_join[right-expected3] __________

self = <xarray.tests.test_combine.TestNestedCombine object at 0x7f73d5d62df0>
join = 'right'
expected = <xarray.Dataset>
Dimensions:  (x: 2, y: 1)
Coordinates:
  * x        (x) int64 0 1
  * y        (y) int64 1
Data variables:
    *empty*

    @pytest.mark.parametrize(
        "join, expected",
        [
            ("outer", Dataset({"x": [0, 1], "y": [0, 1]})),
            ("inner", Dataset({"x": [0, 1], "y": []})),
            ("left", Dataset({"x": [0, 1], "y": [0]})),
            ("right", Dataset({"x": [0, 1], "y": [1]})),
        ],
    )
    def test_combine_nested_join(self, join, expected):
        objs = [Dataset({"x": [0], "y": [0]}), Dataset({"x": [1], "y": [1]})]
>       actual = combine_nested(objs, concat_dim="x", join=join)

xarray/tests/test_combine.py:383:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d62040>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
______________ TestNestedCombine.test_nested_concat_along_new_dim ______________

self = <xarray.tests.test_combine.TestNestedCombine object at 0x7f73d6146460>

    def test_nested_concat_along_new_dim(self):
        objs = [
            Dataset({"a": ("x", [10]), "x": [0]}),
            Dataset({"a": ("x", [20]), "x": [0]}),
        ]
        expected = Dataset({"a": (("t", "x"), [[10], [20]]), "x": [0]})
>       actual = combine_nested(objs, concat_dim="t")

xarray/tests/test_combine.py:407:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d6146e80>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_____________________ TestNestedCombine.test_nested_merge ______________________

self = <xarray.tests.test_combine.TestNestedCombine object at 0x7f73d592cd90>

    def test_nested_merge(self):
        data = Dataset({"x": 0})
        actual = combine_nested([data, data, data], concat_dim=None)
        assert_identical(data, actual)

        ds1 = Dataset({"a": ("x", [1, 2]), "x": [0, 1]})
        ds2 = Dataset({"a": ("x", [2, 3]), "x": [1, 2]})
        expected = Dataset({"a": ("x", [1, 2, 3]), "x": [0, 1, 2]})
        actual = combine_nested([ds1, ds2], concat_dim=None)
        assert_identical(expected, actual)
        actual = combine_nested([ds1, ds2], concat_dim=[None])
        assert_identical(expected, actual)

        tmp1 = Dataset({"x": 0})
        tmp2 = Dataset({"x": np.nan})
        actual = combine_nested([tmp1, tmp2], concat_dim=None)
        assert_identical(tmp1, actual)
        actual = combine_nested([tmp1, tmp2], concat_dim=[None])
        assert_identical(tmp1, actual)

        # Single object, with a concat_dim explicitly provided
        # Test the issue reported in GH #1988
        objs = [Dataset({"x": 0, "y": 1})]
        dim = DataArray([100], name="baz", dims="baz")
>       actual = combine_nested(objs, concat_dim=[dim])

xarray/tests/test_combine.py:442:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d592c520>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_________________ TestNestedCombine.test_concat_multiple_dims __________________

self = <xarray.tests.test_combine.TestNestedCombine object at 0x7f73d58c0d00>

    def test_concat_multiple_dims(self):
        objs = [
            [Dataset({"a": (("x", "y"), [[0]])}), Dataset({"a": (("x", "y"), [[1]])})],
            [Dataset({"a": (("x", "y"), [[2]])}), Dataset({"a": (("x", "y"), [[3]])})],
        ]
>       actual = combine_nested(objs, concat_dim=["x", "y"])

xarray/tests/test_combine.py:462:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d58c09a0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_________________ TestNestedCombine.test_concat_name_symmetry __________________

self = <xarray.tests.test_combine.TestNestedCombine object at 0x7f73d5d3eb20>

    def test_concat_name_symmetry(self):
        """Inspired by the discussion on GH issue #2777"""

        da1 = DataArray(name="a", data=[[0]], dims=["x", "y"])
        da2 = DataArray(name="b", data=[[1]], dims=["x", "y"])
        da3 = DataArray(name="a", data=[[2]], dims=["x", "y"])
        da4 = DataArray(name="b", data=[[3]], dims=["x", "y"])

>       x_first = combine_nested([[da1, da2], [da3, da4]], concat_dim=["x", "y"])

xarray/tests/test_combine.py:474:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:418: in _dataarray_concat
    ds = _dataset_concat(
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d3e610>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_____________ TestNestedCombine.test_concat_one_dim_merge_another ______________

self = <xarray.tests.test_combine.TestNestedCombine object at 0x7f73d5c9c370>

    def test_concat_one_dim_merge_another(self):
        data = create_test_data()
        data1 = data.copy(deep=True)
        data2 = data.copy(deep=True)

        objs = [
            [data1.var1.isel(dim2=slice(4)), data2.var1.isel(dim2=slice(4, 9))],
            [data1.var2.isel(dim2=slice(4)), data2.var2.isel(dim2=slice(4, 9))],
        ]

        expected = data[["var1", "var2"]]
>       actual = combine_nested(objs, concat_dim=[None, "dim2"])

xarray/tests/test_combine.py:490:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d58c04f0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
____________________ TestNestedCombine.test_auto_combine_2d ____________________

self = <xarray.tests.test_combine.TestNestedCombine object at 0x7f73d5cb2340>

    def test_auto_combine_2d(self):
        ds = create_test_data

>       partway1 = concat([ds(0), ds(3)], dim="dim1")

xarray/tests/test_combine.py:496:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5cb2730>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
__________ TestNestedCombine.test_combine_nested_missing_data_new_dim __________

self = <xarray.tests.test_combine.TestNestedCombine object at 0x7f73d592c280>

    def test_combine_nested_missing_data_new_dim(self):
        # Your data includes "time" and "station" dimensions, and each year's
        # data has a different set of stations.
        datasets = [
            Dataset({"a": ("x", [2, 3]), "x": [1, 2]}),
            Dataset({"a": ("x", [1, 2]), "x": [0, 1]}),
        ]
        expected = Dataset(
            {"a": (("t", "x"), [[np.nan, 2, 3], [1, 2, np.nan]])}, {"x": [0, 1, 2]}
        )
>       actual = combine_nested(datasets, concat_dim="t")

xarray/tests/test_combine.py:515:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d592c7f0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_____________ TestNestedCombine.test_merge_one_dim_concat_another ______________

self = <xarray.tests.test_combine.TestNestedCombine object at 0x7f73d614b550>

    def test_merge_one_dim_concat_another(self):
        objs = [
            [Dataset({"foo": ("x", [0, 1])}), Dataset({"bar": ("x", [10, 20])})],
            [Dataset({"foo": ("x", [2, 3])}), Dataset({"bar": ("x", [30, 40])})],
        ]
        expected = Dataset({"foo": ("x", [0, 1, 2, 3]), "bar": ("x", [10, 20, 30, 40])})

>       actual = combine_nested(objs, concat_dim=["x", None], compat="equals")

xarray/tests/test_combine.py:540:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d609a610>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_________ TestNestedCombine.test_combine_concat_over_redundant_nesting _________

self = <xarray.tests.test_combine.TestNestedCombine object at 0x7f73d5cc1ca0>

    def test_combine_concat_over_redundant_nesting(self):
        objs = [[Dataset({"x": [0]}), Dataset({"x": [1]})]]
>       actual = combine_nested(objs, concat_dim=[None, "x"])

xarray/tests/test_combine.py:553:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5cc13d0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
________ TestNestedCombine.test_combine_nested_fill_value[fill_value0] _________

self = <xarray.tests.test_combine.TestNestedCombine object at 0x7f73d5ca9310>
fill_value = nan

    @pytest.mark.parametrize("fill_value", [dtypes.NA, 2, 2.0])
    def test_combine_nested_fill_value(self, fill_value):
        datasets = [
            Dataset({"a": ("x", [2, 3]), "x": [1, 2]}),
            Dataset({"a": ("x", [1, 2]), "x": [0, 1]}),
        ]
        if fill_value == dtypes.NA:
            # if we supply the default, we expect the missing value for a
            # float array
            fill_value = np.nan
        expected = Dataset(
            {"a": (("t", "x"), [[fill_value, 2, 3], [1, 2, fill_value]])},
            {"x": [0, 1, 2]},
        )
>       actual = combine_nested(datasets, concat_dim="t", fill_value=fill_value)

xarray/tests/test_combine.py:581:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5ca95b0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_____________ TestNestedCombine.test_combine_nested_fill_value[2] ______________

self = <xarray.tests.test_combine.TestNestedCombine object at 0x7f73d5d4dc10>
fill_value = 2

    @pytest.mark.parametrize("fill_value", [dtypes.NA, 2, 2.0])
    def test_combine_nested_fill_value(self, fill_value):
        datasets = [
            Dataset({"a": ("x", [2, 3]), "x": [1, 2]}),
            Dataset({"a": ("x", [1, 2]), "x": [0, 1]}),
        ]
        if fill_value == dtypes.NA:
            # if we supply the default, we expect the missing value for a
            # float array
            fill_value = np.nan
        expected = Dataset(
            {"a": (("t", "x"), [[fill_value, 2, 3], [1, 2, fill_value]])},
            {"x": [0, 1, 2]},
        )
>       actual = combine_nested(datasets, concat_dim="t", fill_value=fill_value)

xarray/tests/test_combine.py:581:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d4d490>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
____________ TestNestedCombine.test_combine_nested_fill_value[2.0] _____________

self = <xarray.tests.test_combine.TestNestedCombine object at 0x7f73d5d2dbb0>
fill_value = 2.0

    @pytest.mark.parametrize("fill_value", [dtypes.NA, 2, 2.0])
    def test_combine_nested_fill_value(self, fill_value):
        datasets = [
            Dataset({"a": ("x", [2, 3]), "x": [1, 2]}),
            Dataset({"a": ("x", [1, 2]), "x": [0, 1]}),
        ]
        if fill_value == dtypes.NA:
            # if we supply the default, we expect the missing value for a
            # float array
            fill_value = np.nan
        expected = Dataset(
            {"a": (("t", "x"), [[fill_value, 2, 3], [1, 2, fill_value]])},
            {"x": [0, 1, 2]},
        )
>       actual = combine_nested(datasets, concat_dim="t", fill_value=fill_value)

xarray/tests/test_combine.py:581:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d2d490>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
____________________ TestCombineAuto.test_combine_by_coords ____________________

self = <xarray.tests.test_combine.TestCombineAuto object at 0x7f73d594db20>

    def test_combine_by_coords(self):
        objs = [Dataset({"x": [0]}), Dataset({"x": [1]})]
>       actual = combine_by_coords(objs)

xarray/tests/test_combine.py:588:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:672: in combine_by_coords
    concatenated = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d594da00>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
__________ TestCombineAuto.test_combine_coords_join[outer-expected0] ___________

self = <xarray.tests.test_combine.TestCombineAuto object at 0x7f73d5da9a90>
join = 'outer'
expected = <xarray.Dataset>
Dimensions:  (x: 2, y: 2)
Coordinates:
  * x        (x) int64 0 1
  * y        (y) int64 0 1
Data variables:
    *empty*

    @pytest.mark.parametrize(
        "join, expected",
        [
            ("outer", Dataset({"x": [0, 1], "y": [0, 1]})),
            ("inner", Dataset({"x": [0, 1], "y": []})),
            ("left", Dataset({"x": [0, 1], "y": [0]})),
            ("right", Dataset({"x": [0, 1], "y": [1]})),
        ],
    )
    def test_combine_coords_join(self, join, expected):
        objs = [Dataset({"x": [0], "y": [0]}), Dataset({"x": [1], "y": [1]})]
>       actual = combine_nested(objs, concat_dim="x", join=join)

xarray/tests/test_combine.py:636:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5da9250>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
__________ TestCombineAuto.test_combine_coords_join[inner-expected1] ___________

self = <xarray.tests.test_combine.TestCombineAuto object at 0x7f73d5d36f40>
join = 'inner'
expected = <xarray.Dataset>
Dimensions:  (x: 2, y: 0)
Coordinates:
  * x        (x) int64 0 1
  * y        (y) float64
Data variables:
    *empty*

    @pytest.mark.parametrize(
        "join, expected",
        [
            ("outer", Dataset({"x": [0, 1], "y": [0, 1]})),
            ("inner", Dataset({"x": [0, 1], "y": []})),
            ("left", Dataset({"x": [0, 1], "y": [0]})),
            ("right", Dataset({"x": [0, 1], "y": [1]})),
        ],
    )
    def test_combine_coords_join(self, join, expected):
        objs = [Dataset({"x": [0], "y": [0]}), Dataset({"x": [1], "y": [1]})]
>       actual = combine_nested(objs, concat_dim="x", join=join)

xarray/tests/test_combine.py:636:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d362b0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
___________ TestCombineAuto.test_combine_coords_join[left-expected2] ___________

self = <xarray.tests.test_combine.TestCombineAuto object at 0x7f73d5d3bee0>
join = 'left'
expected = <xarray.Dataset>
Dimensions:  (x: 2, y: 1)
Coordinates:
  * x        (x) int64 0 1
  * y        (y) int64 0
Data variables:
    *empty*

    @pytest.mark.parametrize(
        "join, expected",
        [
            ("outer", Dataset({"x": [0, 1], "y": [0, 1]})),
            ("inner", Dataset({"x": [0, 1], "y": []})),
            ("left", Dataset({"x": [0, 1], "y": [0]})),
            ("right", Dataset({"x": [0, 1], "y": [1]})),
        ],
    )
    def test_combine_coords_join(self, join, expected):
        objs = [Dataset({"x": [0], "y": [0]}), Dataset({"x": [1], "y": [1]})]
>       actual = combine_nested(objs, concat_dim="x", join=join)

xarray/tests/test_combine.py:636:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d3b0d0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
__________ TestCombineAuto.test_combine_coords_join[right-expected3] ___________

self = <xarray.tests.test_combine.TestCombineAuto object at 0x7f73d5d42970>
join = 'right'
expected = <xarray.Dataset>
Dimensions:  (x: 2, y: 1)
Coordinates:
  * x        (x) int64 0 1
  * y        (y) int64 1
Data variables:
    *empty*

    @pytest.mark.parametrize(
        "join, expected",
        [
            ("outer", Dataset({"x": [0, 1], "y": [0, 1]})),
            ("inner", Dataset({"x": [0, 1], "y": []})),
            ("left", Dataset({"x": [0, 1], "y": [0]})),
            ("right", Dataset({"x": [0, 1], "y": [1]})),
        ],
    )
    def test_combine_coords_join(self, join, expected):
        objs = [Dataset({"x": [0], "y": [0]}), Dataset({"x": [1], "y": [1]})]
>       actual = combine_nested(objs, concat_dim="x", join=join)

xarray/tests/test_combine.py:636:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:456: in combine_nested
    return _nested_combine(
xarray/core/combine.py:300: in _nested_combine
    combined = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d42490>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_________________ TestCombineAuto.test_infer_order_from_coords _________________

self = <xarray.tests.test_combine.TestCombineAuto object at 0x7f73d608a4f0>

    def test_infer_order_from_coords(self):
        data = create_test_data()
        objs = [data.isel(dim2=slice(4, 9)), data.isel(dim2=slice(4))]
>       actual = combine_by_coords(objs)

xarray/tests/test_combine.py:647:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:672: in combine_by_coords
    concatenated = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d608a490>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
__________ TestCombineAuto.test_combine_leaving_bystander_dimensions ___________

self = <xarray.tests.test_combine.TestCombineAuto object at 0x7f73d5933a00>

    def test_combine_leaving_bystander_dimensions(self):
        # Check non-monotonic bystander dimension coord doesn't raise
        # ValueError on combine (https://github.com/pydata/xarray/issues/3150)
        ycoord = ["a", "c", "b"]

        data = np.random.rand(7, 3)

        ds1 = Dataset(
            data_vars=dict(data=(["x", "y"], data[:3, :])),
            coords=dict(x=[1, 2, 3], y=ycoord),
        )

        ds2 = Dataset(
            data_vars=dict(data=(["x", "y"], data[3:, :])),
            coords=dict(x=[4, 5, 6, 7], y=ycoord),
        )

        expected = Dataset(
            data_vars=dict(data=(["x", "y"], data)),
            coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord),
        )

>       actual = combine_by_coords((ds1, ds2))

xarray/tests/test_combine.py:673:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:672: in combine_by_coords
    concatenated = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5933760>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
___________ TestCombineAuto.test_combine_by_coords_previously_failed ___________

self = <xarray.tests.test_combine.TestCombineAuto object at 0x7f73d59ce820>

    def test_combine_by_coords_previously_failed(self):
        # In the above scenario, one file is missing, containing the data for
        # one year's data for one variable.
        datasets = [
            Dataset({"a": ("x", [0]), "x": [0]}),
            Dataset({"b": ("x", [0]), "x": [0]}),
            Dataset({"a": ("x", [1]), "x": [1]}),
        ]
        expected = Dataset({"a": ("x", [0, 1]), "b": ("x", [0, np.nan])}, {"x": [0, 1]})
>       actual = combine_by_coords(datasets)

xarray/tests/test_combine.py:685:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:672: in combine_by_coords
    concatenated = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d59cea00>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
______________ TestCombineAuto.test_check_for_impossible_ordering ______________

self = <xarray.tests.test_combine.TestCombineAuto object at 0x7f73d5da9bb0>

    def test_check_for_impossible_ordering(self):
        ds0 = Dataset({"x": [0, 1, 5]})
        ds1 = Dataset({"x": [2, 3]})
        with raises_regex(
            ValueError, "does not have monotonic global indexes" " along dimension x"
        ):
>           combine_by_coords([ds1, ds0])

xarray/tests/test_combine.py:712:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:672: in combine_by_coords
    concatenated = _combine_nd(
xarray/core/combine.py:191: in _combine_nd
    combined_ids = _combine_all_along_first_dim(
xarray/core/combine.py:219: in _combine_all_along_first_dim
    new_combined_ids[new_id] = _combine_1d(
xarray/core/combine.py:241: in _combine_1d
    combined = concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5da9490>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
___________________ TestAutoCombineOldAPI.test_auto_combine ____________________

self = <xarray.tests.test_combine.TestAutoCombineOldAPI object at 0x7f73d6070370>

    def test_auto_combine(self):
        objs = [Dataset({"x": [0]}), Dataset({"x": [1]})]
>       actual = auto_combine(objs)

xarray/tests/test_combine.py:728:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:846: in auto_combine
    return _old_auto_combine(
xarray/core/combine.py:907: in _old_auto_combine
    concatenated = [
xarray/core/combine.py:908: in <listcomp>
    _auto_concat(
xarray/core/combine.py:958: in _auto_concat
    return concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d80b80>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
__________ TestAutoCombineOldAPI.test_auto_combine_previously_failed ___________

self = <xarray.tests.test_combine.TestAutoCombineOldAPI object at 0x7f73d5cb2820>

    def test_auto_combine_previously_failed(self):
        # In the above scenario, one file is missing, containing the data for
        # one year's data for one variable.
        datasets = [
            Dataset({"a": ("x", [0]), "x": [0]}),
            Dataset({"b": ("x", [0]), "x": [0]}),
            Dataset({"a": ("x", [1]), "x": [1]}),
        ]
        expected = Dataset({"a": ("x", [0, 1]), "b": ("x", [0, np.nan])}, {"x": [0, 1]})
>       actual = auto_combine(datasets)

xarray/tests/test_combine.py:770:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:846: in auto_combine
    return _old_auto_combine(
xarray/core/combine.py:907: in _old_auto_combine
    concatenated = [
xarray/core/combine.py:908: in <listcomp>
    _auto_concat(
xarray/core/combine.py:958: in _auto_concat
    return concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d60bea60>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_____________ TestAutoCombineOldAPI.test_auto_combine_still_fails ______________

self = <xarray.tests.test_combine.TestAutoCombineOldAPI object at 0x7f73d5d8d7c0>

    def test_auto_combine_still_fails(self):
        # concat can't handle new variables (yet):
        # https://github.com/pydata/xarray/issues/508
        datasets = [Dataset({"x": 0}, {"y": 0}), Dataset({"x": 1}, {"y": 1, "z": 1})]
        with pytest.raises(ValueError):
>           auto_combine(datasets, "y")

xarray/tests/test_combine.py:790:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:846: in auto_combine
    return _old_auto_combine(
xarray/core/combine.py:907: in _old_auto_combine
    concatenated = [
xarray/core/combine.py:908: in <listcomp>
    _auto_concat(
xarray/core/combine.py:958: in _auto_concat
    return concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

datasets = [<xarray.Dataset>
Dimensions:  (y: 1)
Coordinates:
  * y        (y) int64 0
Data variables:
    x        (y) int64 0, ...imensions:  (y: 1)
Coordinates:
  * y        (y) int64 1
    z        int64 1
Data variables:
    x        (y) int64 1]
dim = 'y', data_vars = 'all', coords = 'different', compat = 'no_conflicts'
positions = None, fill_value = <NA>, join = 'outer'

    def _dataset_concat(
        datasets,
        dim,
        data_vars,
        coords,
        compat,
        positions,
        fill_value=dtypes.NA,
        join="outer",
    ):
        """
        Concatenate a sequence of datasets along a new or existing dimension
        """
        from .dataset import Dataset

        dim, coord = _calc_concat_dim_coord(dim)
        # Make sure we're working on a copy (we'll be loading variables)
        datasets = [ds.copy() for ds in datasets]
        datasets = align(
            *datasets, join=join, copy=False, exclude=[dim], fill_value=fill_value
        )

        dim_coords, dims_sizes, coord_names, data_names = _parse_datasets(datasets)
        dim_names = set(dim_coords)
        unlabeled_dims = dim_names - coord_names

        both_data_and_coords = coord_names & data_names
        if both_data_and_coords:
            raise ValueError(
                "%r is a coordinate in some datasets but not others." % both_data_and_coords
            )
        # we don't want the concat dimension in the result dataset yet
        dim_coords.pop(dim, None)
        dims_sizes.pop(dim, None)

        # case where concat dimension is a coordinate or data_var but not a dimension
        if (dim in coord_names or dim in data_names) and dim not in dim_names:
            datasets = [ds.expand_dims(dim) for ds in datasets]

        # determine which variables to concatenate
        concat_over, equals, concat_dim_lengths = _calc_concat_over(
            datasets, dim, dim_names, data_vars, coords, compat
        )

        # determine which variables to merge, and then merge them according to compat
        all_variables = set().union(*(ds.variables for ds in datasets))
        variables_to_merge = all_variables - concat_over - dim_names

        result_vars = {}
        if variables_to_merge:
            to_merge = {var: [] for var in variables_to_merge}

            for ds in datasets:
                for var in variables_to_merge:
                    if var in ds.variables:
                        to_merge[var].append(ds.variables[var])
                    elif join == 'outer':
                        # Create a dummy variable filled with NaN
>                       dummy_var = Variable(ds.dims, np.full(ds.dims, fill_value))
E                       NameError: name 'np' is not defined

xarray/core/concat.py:321: NameError
______________ TestAutoCombineOldAPI.test_auto_combine_no_concat _______________

self = <xarray.tests.test_combine.TestAutoCombineOldAPI object at 0x7f73d59cfee0>

    def test_auto_combine_no_concat(self):
        objs = [Dataset({"x": 0}), Dataset({"y": 1})]
        actual = auto_combine(objs)
        expected = Dataset({"x": 0, "y": 1})
        assert_identical(expected, actual)

        objs = [Dataset({"x": 0, "y": 1}), Dataset({"y": np.nan, "z": 2})]
        actual = auto_combine(objs)
        expected = Dataset({"x": 0, "y": 1, "z": 2})
        assert_identical(expected, actual)

        data = Dataset({"x": 0})
        actual = auto_combine([data, data, data], concat_dim=None)
        assert_identical(data, actual)

        # Single object, with a concat_dim explicitly provided
        # Test the issue reported in GH #1988
        objs = [Dataset({"x": 0, "y": 1})]
        dim = DataArray([100], name="baz", dims="baz")
>       actual = auto_combine(objs, concat_dim=dim)

xarray/tests/test_combine.py:811:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:846: in auto_combine
    return _old_auto_combine(
xarray/core/combine.py:907: in _old_auto_combine
    concatenated = [
xarray/core/combine.py:908: in <listcomp>
    _auto_concat(
xarray/core/combine.py:958: in _auto_concat
    return concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d59338e0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
____ TestAutoCombineOldAPI.test_auto_combine_order_by_appearance_not_coords ____

self = <xarray.tests.test_combine.TestAutoCombineOldAPI object at 0x7f73d61466d0>

    def test_auto_combine_order_by_appearance_not_coords(self):
        objs = [
            Dataset({"foo": ("x", [0])}, coords={"x": ("x", [1])}),
            Dataset({"foo": ("x", [1])}, coords={"x": ("x", [0])}),
        ]
>       actual = auto_combine(objs)

xarray/tests/test_combine.py:831:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:846: in auto_combine
    return _old_auto_combine(
xarray/core/combine.py:907: in _old_auto_combine
    concatenated = [
xarray/core/combine.py:908: in <listcomp>
    _auto_concat(
xarray/core/combine.py:958: in _auto_concat
    return concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d6169070>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_______ TestAutoCombineOldAPI.test_auto_combine_fill_value[fill_value0] ________

self = <xarray.tests.test_combine.TestAutoCombineOldAPI object at 0x7f73d5c67d00>
fill_value = nan

    @pytest.mark.parametrize("fill_value", [dtypes.NA, 2, 2.0])
    def test_auto_combine_fill_value(self, fill_value):
        datasets = [
            Dataset({"a": ("x", [2, 3]), "x": [1, 2]}),
            Dataset({"a": ("x", [1, 2]), "x": [0, 1]}),
        ]
        if fill_value == dtypes.NA:
            # if we supply the default, we expect the missing value for a
            # float array
            fill_value = np.nan
        expected = Dataset(
            {"a": (("t", "x"), [[fill_value, 2, 3], [1, 2, fill_value]])},
            {"x": [0, 1, 2]},
        )
>       actual = auto_combine(datasets, concat_dim="t", fill_value=fill_value)

xarray/tests/test_combine.py:849:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:846: in auto_combine
    return _old_auto_combine(
xarray/core/combine.py:907: in _old_auto_combine
    concatenated = [
xarray/core/combine.py:908: in <listcomp>
    _auto_concat(
xarray/core/combine.py:958: in _auto_concat
    return concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5c67400>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
____________ TestAutoCombineOldAPI.test_auto_combine_fill_value[2] _____________

self = <xarray.tests.test_combine.TestAutoCombineOldAPI object at 0x7f73d5d3eb50>
fill_value = 2

    @pytest.mark.parametrize("fill_value", [dtypes.NA, 2, 2.0])
    def test_auto_combine_fill_value(self, fill_value):
        datasets = [
            Dataset({"a": ("x", [2, 3]), "x": [1, 2]}),
            Dataset({"a": ("x", [1, 2]), "x": [0, 1]}),
        ]
        if fill_value == dtypes.NA:
            # if we supply the default, we expect the missing value for a
            # float array
            fill_value = np.nan
        expected = Dataset(
            {"a": (("t", "x"), [[fill_value, 2, 3], [1, 2, fill_value]])},
            {"x": [0, 1, 2]},
        )
>       actual = auto_combine(datasets, concat_dim="t", fill_value=fill_value)

xarray/tests/test_combine.py:849:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:846: in auto_combine
    return _old_auto_combine(
xarray/core/combine.py:907: in _old_auto_combine
    concatenated = [
xarray/core/combine.py:908: in <listcomp>
    _auto_concat(
xarray/core/combine.py:958: in _auto_concat
    return concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d3e160>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
___________ TestAutoCombineOldAPI.test_auto_combine_fill_value[2.0] ____________

self = <xarray.tests.test_combine.TestAutoCombineOldAPI object at 0x7f73d590ed30>
fill_value = 2.0

    @pytest.mark.parametrize("fill_value", [dtypes.NA, 2, 2.0])
    def test_auto_combine_fill_value(self, fill_value):
        datasets = [
            Dataset({"a": ("x", [2, 3]), "x": [1, 2]}),
            Dataset({"a": ("x", [1, 2]), "x": [0, 1]}),
        ]
        if fill_value == dtypes.NA:
            # if we supply the default, we expect the missing value for a
            # float array
            fill_value = np.nan
        expected = Dataset(
            {"a": (("t", "x"), [[fill_value, 2, 3], [1, 2, fill_value]])},
            {"x": [0, 1, 2]},
        )
>       actual = auto_combine(datasets, concat_dim="t", fill_value=fill_value)

xarray/tests/test_combine.py:849:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:846: in auto_combine
    return _old_auto_combine(
xarray/core/combine.py:907: in _old_auto_combine
    concatenated = [
xarray/core/combine.py:908: in <listcomp>
    _auto_concat(
xarray/core/combine.py:958: in _auto_concat
    return concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d590ea90>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_________ TestAutoCombineDeprecation.test_auto_combine_with_concat_dim _________

self = <xarray.tests.test_combine.TestAutoCombineDeprecation object at 0x7f73d5992820>

    def test_auto_combine_with_concat_dim(self):
        objs = [Dataset({"x": [0]}), Dataset({"x": [1]})]
        with pytest.warns(FutureWarning, match="`concat_dim`"):
>           auto_combine(objs, concat_dim="x")

xarray/tests/test_combine.py:862:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:846: in auto_combine
    return _old_auto_combine(
xarray/core/combine.py:907: in _old_auto_combine
    concatenated = [
xarray/core/combine.py:908: in <listcomp>
    _auto_concat(
xarray/core/combine.py:958: in _auto_concat
    return concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5992d60>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
______ TestAutoCombineDeprecation.test_auto_combine_with_merge_and_concat ______

self = <xarray.tests.test_combine.TestAutoCombineDeprecation object at 0x7f73d6070820>

    def test_auto_combine_with_merge_and_concat(self):
        objs = [Dataset({"x": [0]}), Dataset({"x": [1]}), Dataset({"z": ((), 99)})]
        with pytest.warns(FutureWarning, match="require both concatenation"):
>           auto_combine(objs)

xarray/tests/test_combine.py:867:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:846: in auto_combine
    return _old_auto_combine(
xarray/core/combine.py:907: in _old_auto_combine
    concatenated = [
xarray/core/combine.py:908: in <listcomp>
    _auto_concat(
xarray/core/combine.py:958: in _auto_concat
    return concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d61535e0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
___________ TestAutoCombineDeprecation.test_auto_combine_with_coords ___________

self = <xarray.tests.test_combine.TestAutoCombineDeprecation object at 0x7f73d5cd2b50>

    def test_auto_combine_with_coords(self):
        objs = [
            Dataset({"foo": ("x", [0])}, coords={"x": ("x", [0])}),
            Dataset({"foo": ("x", [1])}, coords={"x": ("x", [1])}),
        ]
        with pytest.warns(FutureWarning, match="supplied have global"):
>           auto_combine(objs)

xarray/tests/test_combine.py:875:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:846: in auto_combine
    return _old_auto_combine(
xarray/core/combine.py:907: in _old_auto_combine
    concatenated = [
xarray/core/combine.py:908: in <listcomp>
    _auto_concat(
xarray/core/combine.py:958: in _auto_concat
    return concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d59e34f0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_________ TestAutoCombineDeprecation.test_auto_combine_without_coords __________

self = <xarray.tests.test_combine.TestAutoCombineDeprecation object at 0x7f73d5d4dac0>

    def test_auto_combine_without_coords(self):
        objs = [Dataset({"foo": ("x", [0])}), Dataset({"foo": ("x", [1])})]
        with pytest.warns(FutureWarning, match="supplied do not have global"):
>           auto_combine(objs)

xarray/tests/test_combine.py:880:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/combine.py:846: in auto_combine
    return _old_auto_combine(
xarray/core/combine.py:907: in _old_auto_combine
    concatenated = [
xarray/core/combine.py:908: in <listcomp>
    _auto_concat(
xarray/core/combine.py:958: in _auto_concat
    return concat(
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d4db80>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
______________________________ test_concat_compat ______________________________

    def test_concat_compat():
        ds1 = Dataset(
            {
                "has_x_y": (("y", "x"), [[1, 2]]),
                "has_x": ("x", [1, 2]),
                "no_x_y": ("z", [1, 2]),
            },
            coords={"x": [0, 1], "y": [0], "z": [-1, -2]},
        )
        ds2 = Dataset(
            {
                "has_x_y": (("y", "x"), [[3, 4]]),
                "has_x": ("x", [1, 2]),
                "no_x_y": (("q", "z"), [[1, 2]]),
            },
            coords={"x": [0, 1], "y": [1], "z": [-1, -2], "q": [0]},
        )

>       result = concat([ds1, ds2], dim="y", data_vars="minimal", compat="broadcast_equals")

xarray/tests/test_concat.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d58c04c0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_____________ TestConcatDataset.test_concat_simple[dim1-different] _____________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d5d60730>
data = <xarray.Dataset>
Dimensions:  (dim1: 8, dim2: 9, time: 20)
Coordinates:
  * time     (time) datetime64[ns] 2000-01-01 ... -0.06351 -1.505 0.08742 ... -1.232 -1.592
    var2     (dim1, dim2) float64 -0.2814 1.185 1.35 ... 1.337 -2.075 0.3386
dim = 'dim1', coords = 'different'

    @pytest.mark.parametrize("coords", ["different", "minimal"])
    @pytest.mark.parametrize("dim", ["dim1", "dim2"])
    def test_concat_simple(self, data, dim, coords):
        datasets = [g for _, g in data.groupby(dim, squeeze=False)]
>       assert_identical(data, concat(datasets, dim, coords=coords))

xarray/tests/test_concat.py:69:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d60670>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
______________ TestConcatDataset.test_concat_simple[dim1-minimal] ______________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d59a4550>
data = <xarray.Dataset>
Dimensions:  (dim1: 8, dim2: 9, time: 20)
Coordinates:
  * time     (time) datetime64[ns] 2000-01-01 ...3 1.046 -0.3123 ... 0.3675 1.351 -1.323
    var2     (dim1, dim2) float64 0.3466 -1.185 1.549 ... -1.658 0.5482 -0.4976
dim = 'dim1', coords = 'minimal'

    @pytest.mark.parametrize("coords", ["different", "minimal"])
    @pytest.mark.parametrize("dim", ["dim1", "dim2"])
    def test_concat_simple(self, data, dim, coords):
        datasets = [g for _, g in data.groupby(dim, squeeze=False)]
>       assert_identical(data, concat(datasets, dim, coords=coords))

xarray/tests/test_concat.py:69:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d59a4880>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_____________ TestConcatDataset.test_concat_simple[dim2-different] _____________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d608a940>
data = <xarray.Dataset>
Dimensions:  (dim1: 8, dim2: 9, time: 20)
Coordinates:
  * time     (time) datetime64[ns] 2000-01-01 ...4 -1.237 -0.2805 -0.7685 ... -0.4208 -0.6138
    var2     (dim1, dim2) float64 -1.164 0.7421 -0.8002 ... -1.022 -0.3853
dim = 'dim2', coords = 'different'

    @pytest.mark.parametrize("coords", ["different", "minimal"])
    @pytest.mark.parametrize("dim", ["dim1", "dim2"])
    def test_concat_simple(self, data, dim, coords):
        datasets = [g for _, g in data.groupby(dim, squeeze=False)]
>       assert_identical(data, concat(datasets, dim, coords=coords))

xarray/tests/test_concat.py:69:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d608a280>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
______________ TestConcatDataset.test_concat_simple[dim2-minimal] ______________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d5c67a60>
data = <xarray.Dataset>
Dimensions:  (dim1: 8, dim2: 9, time: 20)
Coordinates:
  * time     (time) datetime64[ns] 2000-01-01 ...0.06996 -0.5368 -2.106 ... 1.169 -0.19 0.7563
    var2     (dim1, dim2) float64 -0.8413 -0.5202 0.3985 ... -0.175 2.121
dim = 'dim2', coords = 'minimal'

    @pytest.mark.parametrize("coords", ["different", "minimal"])
    @pytest.mark.parametrize("dim", ["dim1", "dim2"])
    def test_concat_simple(self, data, dim, coords):
        datasets = [g for _, g in data.groupby(dim, squeeze=False)]
>       assert_identical(data, concat(datasets, dim, coords=coords))

xarray/tests/test_concat.py:69:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5cdc130>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_______________________ TestConcatDataset.test_concat_2 ________________________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d58bb970>
data = <xarray.Dataset>
Dimensions:  (dim1: 8, dim2: 9, time: 20)
Coordinates:
  * time     (time) datetime64[ns] 2000-01-01 ....091 -0.8425 -0.3579 ... -1.291 -0.5456
    var2     (dim1, dim2) float64 0.1998 0.03332 0.07888 ... 1.415 0.157 -1.222

    def test_concat_2(self, data):
        dim = "dim2"
        datasets = [g for _, g in data.groupby(dim, squeeze=True)]
        concat_over = [k for k, v in data.coords.items() if dim in v.dims and k != dim]
>       actual = concat(datasets, data[dim], coords=concat_over)

xarray/tests/test_concat.py:75:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <list_iterator object at 0x7f73d58bbb20>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
__________ TestConcatDataset.test_concat_coords_kwarg[dim1-different] __________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d5ca94f0>
data = <xarray.Dataset>
Dimensions:  (dim1: 8, dim2: 9, dim4: 3, time: 20)
Coordinates:
  * time     (time) datetime64[ns] 20...685 1.961 0.4084 ... 0.251 0.2917 0.6458
    var2     (dim1, dim2) float64 -0.4304 0.4928 -0.1158 ... -0.4948 1.1 -1.26
dim = 'dim1', coords = 'different'

    @pytest.mark.parametrize("coords", ["different", "minimal", "all"])
    @pytest.mark.parametrize("dim", ["dim1", "dim2"])
    def test_concat_coords_kwarg(self, data, dim, coords):
        data = data.copy(deep=True)
        # make sure the coords argument behaves as expected
        data.coords["extra"] = ("dim4", np.arange(3))
        datasets = [g for _, g in data.groupby(dim, squeeze=True)]

>       actual = concat(datasets, data[dim], coords=coords)

xarray/tests/test_concat.py:86:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5ca98b0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
___________ TestConcatDataset.test_concat_coords_kwarg[dim1-minimal] ___________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d6153730>
data = <xarray.Dataset>
Dimensions:  (dim1: 8, dim2: 9, dim4: 3, time: 20)
Coordinates:
  * time     (time) datetime64[ns] 20...0.05236 0.3458 ... 0.3726 -1.196 0.5135
    var2     (dim1, dim2) float64 0.855 -0.7277 -0.7044 ... 0.3248 1.959 0.6209
dim = 'dim1', coords = 'minimal'

    @pytest.mark.parametrize("coords", ["different", "minimal", "all"])
    @pytest.mark.parametrize("dim", ["dim1", "dim2"])
    def test_concat_coords_kwarg(self, data, dim, coords):
        data = data.copy(deep=True)
        # make sure the coords argument behaves as expected
        data.coords["extra"] = ("dim4", np.arange(3))
        datasets = [g for _, g in data.groupby(dim, squeeze=True)]

>       actual = concat(datasets, data[dim], coords=coords)

xarray/tests/test_concat.py:86:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d6153a00>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_____________ TestConcatDataset.test_concat_coords_kwarg[dim1-all] _____________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d5c9c7f0>
data = <xarray.Dataset>
Dimensions:  (dim1: 8, dim2: 9, dim4: 3, time: 20)
Coordinates:
  * time     (time) datetime64[ns] 20... 0.1774 -0.2553 ... -1.018 0.3259 2.252
    var2     (dim1, dim2) float64 -0.2537 0.9244 -0.5501 ... 0.27 0.6446 -1.185
dim = 'dim1', coords = 'all'

    @pytest.mark.parametrize("coords", ["different", "minimal", "all"])
    @pytest.mark.parametrize("dim", ["dim1", "dim2"])
    def test_concat_coords_kwarg(self, data, dim, coords):
        data = data.copy(deep=True)
        # make sure the coords argument behaves as expected
        data.coords["extra"] = ("dim4", np.arange(3))
        datasets = [g for _, g in data.groupby(dim, squeeze=True)]

>       actual = concat(datasets, data[dim], coords=coords)

xarray/tests/test_concat.py:86:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d4d610>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
__________ TestConcatDataset.test_concat_coords_kwarg[dim2-different] __________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d59423d0>
data = <xarray.Dataset>
Dimensions:  (dim1: 8, dim2: 9, dim4: 3, time: 20)
Coordinates:
  * time     (time) datetime64[ns] 20...1.612 0.4953 ... 0.3323 -0.9082 -1.653
    var2     (dim1, dim2) float64 0.08247 1.248 -1.799 ... -0.2172 -0.2771 0.225
dim = 'dim2', coords = 'different'

    @pytest.mark.parametrize("coords", ["different", "minimal", "all"])
    @pytest.mark.parametrize("dim", ["dim1", "dim2"])
    def test_concat_coords_kwarg(self, data, dim, coords):
        data = data.copy(deep=True)
        # make sure the coords argument behaves as expected
        data.coords["extra"] = ("dim4", np.arange(3))
        datasets = [g for _, g in data.groupby(dim, squeeze=True)]

>       actual = concat(datasets, data[dim], coords=coords)

xarray/tests/test_concat.py:86:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <list_iterator object at 0x7f73d6094bb0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
___________ TestConcatDataset.test_concat_coords_kwarg[dim2-minimal] ___________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d59a4970>
data = <xarray.Dataset>
Dimensions:  (dim1: 8, dim2: 9, dim4: 3, time: 20)
Coordinates:
  * time     (time) datetime64[ns] 20...1.564 0.51 0.103 ... 0.5783 1.228 0.6464
    var2     (dim1, dim2) float64 -0.5541 -0.5821 -1.67 ... 1.301 -1.931 1.198
dim = 'dim2', coords = 'minimal'

    @pytest.mark.parametrize("coords", ["different", "minimal", "all"])
    @pytest.mark.parametrize("dim", ["dim1", "dim2"])
    def test_concat_coords_kwarg(self, data, dim, coords):
        data = data.copy(deep=True)
        # make sure the coords argument behaves as expected
        data.coords["extra"] = ("dim4", np.arange(3))
        datasets = [g for _, g in data.groupby(dim, squeeze=True)]

>       actual = concat(datasets, data[dim], coords=coords)

xarray/tests/test_concat.py:86:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <list_iterator object at 0x7f73d6167dc0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_____________ TestConcatDataset.test_concat_coords_kwarg[dim2-all] _____________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d5c7b3d0>
data = <xarray.Dataset>
Dimensions:  (dim1: 8, dim2: 9, dim4: 3, time: 20)
Coordinates:
  * time     (time) datetime64[ns] 20....4687 0.419 -1.785 ... 1.971 -0.2285 -0.07784
    var2     (dim1, dim2) float64 -1.944 0.08382 0.4549 ... -0.1755 1.513
dim = 'dim2', coords = 'all'

    @pytest.mark.parametrize("coords", ["different", "minimal", "all"])
    @pytest.mark.parametrize("dim", ["dim1", "dim2"])
    def test_concat_coords_kwarg(self, data, dim, coords):
        data = data.copy(deep=True)
        # make sure the coords argument behaves as expected
        data.coords["extra"] = ("dim4", np.arange(3))
        datasets = [g for _, g in data.groupby(dim, squeeze=True)]

>       actual = concat(datasets, data[dim], coords=coords)

xarray/tests/test_concat.py:86:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <list_iterator object at 0x7f73d59805e0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
________________________ TestConcatDataset.test_concat _________________________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d59d30a0>
data = <xarray.Dataset>
Dimensions:  (dim1: 8, dim2: 9, time: 20)
Coordinates:
  * time     (time) datetime64[ns] 2000-01-01 ...1 -1.016 -1.425 ... -1.07 -1.439 0.8562
    var2     (dim1, dim2) float64 1.413 0.8768 0.9359 ... 1.948 0.04869 -0.8099

    def test_concat(self, data):
        split_data = [
            data.isel(dim1=slice(3)),
            data.isel(dim1=3),
            data.isel(dim1=slice(4, None)),
        ]
>       assert_identical(data, concat(split_data, "dim1"))

xarray/tests/test_concat.py:100:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d594ed60>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_________________ TestConcatDataset.test_concat_dim_precedence _________________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d590b850>
data = <xarray.Dataset>
Dimensions:  (dim1: 8, dim2: 9, time: 20)
Coordinates:
  * time     (time) datetime64[ns] 2000-01-01 ....059 -0.8479 ... -0.005107 1.346 -1.377
    var2     (dim1, dim2) float64 1.255 -0.1105 -0.5926 ... -0.9426 1.276 1.258

    def test_concat_dim_precedence(self, data):
        # verify that the dim argument takes precedence over
        # concatenating dataset variables of the same name
        dim = (2 * data["dim1"]).rename("dim1")
        datasets = [g for _, g in data.groupby("dim1", squeeze=False)]
        expected = data.copy()
        expected["dim1"] = dim
>       assert_identical(expected, concat(datasets, dim))

xarray/tests/test_concat.py:109:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d39f70>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
___________________ TestConcatDataset.test_concat_data_vars ____________________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d5ce22b0>

    def test_concat_data_vars(self):
        data = Dataset({"foo": ("x", np.random.randn(10))})
        objs = [data.isel(x=slice(5)), data.isel(x=slice(5, None))]
        for data_vars in ["minimal", "different", "all", [], ["foo"]]:
>           actual = concat(objs, dim="x", data_vars=data_vars)

xarray/tests/test_concat.py:115:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5ce2610>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_____________________ TestConcatDataset.test_concat_coords _____________________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d5cb2310>

    def test_concat_coords(self):
        data = Dataset({"foo": ("x", np.random.randn(10))})
        expected = data.assign_coords(c=("x", [0] * 5 + [1] * 5))
        objs = [
            data.isel(x=slice(5)).assign_coords(c=0),
            data.isel(x=slice(5, None)).assign_coords(c=1),
        ]
        for coords in ["different", "all", ["c"]]:
>           actual = concat(objs, dim="x", coords=coords)

xarray/tests/test_concat.py:126:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5cb2700>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_________________ TestConcatDataset.test_concat_constant_index _________________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d5d80400>

    def test_concat_constant_index(self):
        # GH425
        ds1 = Dataset({"foo": 1.5}, {"y": 1})
        ds2 = Dataset({"foo": 2.5}, {"y": 1})
        expected = Dataset({"foo": ("y", [1.5, 2.5]), "y": [1, 1]})
        for mode in ["different", "all", ["foo"]]:
>           actual = concat([ds1, ds2], "y", data_vars=mode)

xarray/tests/test_concat.py:138:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <list_iterator object at 0x7f73d5d808e0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_____________________ TestConcatDataset.test_concat_size0 ______________________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d5d62790>

    def test_concat_size0(self):
        data = create_test_data()
        split_data = [data.isel(dim1=slice(0, 0)), data]
>       actual = concat(split_data, "dim1")

xarray/tests/test_concat.py:148:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d2d8e0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
___________________ TestConcatDataset.test_concat_autoalign ____________________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d6169520>

    def test_concat_autoalign(self):
        ds1 = Dataset({"foo": DataArray([1, 2], coords=[("x", [1, 2])])})
        ds2 = Dataset({"foo": DataArray([1, 2], coords=[("x", [1, 3])])})
>       actual = concat([ds1, ds2], "y")

xarray/tests/test_concat.py:157:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d6169d60>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_____________________ TestConcatDataset.test_concat_errors _____________________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d5cdca00>

    def test_concat_errors(self):
        data = create_test_data()
        split_data = [data.isel(dim1=slice(3)), data.isel(dim1=slice(3, None))]

        with raises_regex(ValueError, "must supply at least one"):
            concat([], "dim1")

        with raises_regex(ValueError, "Cannot specify both .*='different'"):
            concat(
                [data, data], dim="concat_dim", data_vars="different", compat="override"
            )

        with raises_regex(ValueError, "must supply at least one"):
            concat([], "dim1")

        with raises_regex(ValueError, "are not coordinates"):
            concat([data, data], "new_dim", coords=["not_found"])

        with raises_regex(ValueError, "global attributes not"):
            data0, data1 = deepcopy(split_data)
            data1.attrs["foo"] = "bar"
            concat([data0, data1], "dim1", compat="identical")
>       assert_identical(data, concat([data0, data1], "dim1", compat="equals"))

xarray/tests/test_concat.py:191:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d59be280>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
___________________ TestConcatDataset.test_concat_join_kwarg ___________________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d5999190>

    def test_concat_join_kwarg(self):
        ds1 = Dataset({"a": (("x", "y"), [[0]])}, coords={"x": [0], "y": [0]})
        ds2 = Dataset({"a": (("x", "y"), [[0]])}, coords={"x": [1], "y": [0.0001]})

        expected = {}
        expected["outer"] = Dataset(
            {"a": (("x", "y"), [[0, np.nan], [np.nan, 0]])},
            {"x": [0, 1], "y": [0, 0.0001]},
        )
        expected["inner"] = Dataset(
            {"a": (("x", "y"), [[], []])}, {"x": [0, 1], "y": []}
        )
        expected["left"] = Dataset(
            {"a": (("x", "y"), np.array([0, np.nan], ndmin=2).T)},
            coords={"x": [0, 1], "y": [0]},
        )
        expected["right"] = Dataset(
            {"a": (("x", "y"), np.array([np.nan, 0], ndmin=2).T)},
            coords={"x": [0, 1], "y": [0.0001]},
        )
        expected["override"] = Dataset(
            {"a": (("x", "y"), np.array([0, 0], ndmin=2).T)},
            coords={"x": [0, 1], "y": [0]},
        )

        with raises_regex(ValueError, "indexes along dimension 'y'"):
            actual = concat([ds1, ds2], join="exact", dim="x")

        for join in expected:
>           actual = concat([ds1, ds2], join=join, dim="x")

xarray/tests/test_concat.py:239:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d36730>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_________________ TestConcatDataset.test_concat_promote_shape __________________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d5c8d760>

    def test_concat_promote_shape(self):
        # mixed dims within variables
        objs = [Dataset({}, {"x": 0}), Dataset({"x": [1]})]
>       actual = concat(objs, "x")

xarray/tests/test_concat.py:245:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5c8d190>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_________________ TestConcatDataset.test_concat_do_not_promote _________________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d58c0340>

    def test_concat_do_not_promote(self):
        # GH438
        objs = [
            Dataset({"y": ("t", [1])}, {"x": 1, "t": [0]}),
            Dataset({"y": ("t", [2])}, {"x": 1, "t": [0]}),
        ]
        expected = Dataset({"y": ("t", [1, 2])}, {"x": 1, "t": [0, 0]})
>       actual = concat(objs, "t")

xarray/tests/test_concat.py:287:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5942a90>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
________________ TestConcatDataset.test_concat_dim_is_variable _________________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d584c5b0>

    def test_concat_dim_is_variable(self):
        objs = [Dataset({"x": 0}), Dataset({"x": 1})]
        coord = Variable("y", [3, 4])
        expected = Dataset({"x": ("y", [0, 1]), "y": [3, 4]})
>       actual = concat(objs, coord)

xarray/tests/test_concat.py:301:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d584c430>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
___________________ TestConcatDataset.test_concat_multiindex ___________________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d58aa730>

    def test_concat_multiindex(self):
        x = pd.MultiIndex.from_product([[1, 2, 3], ["a", "b"]])
        expected = Dataset({"x": x})
>       actual = concat(
            [expected.isel(x=slice(2)), expected.isel(x=slice(2, None))], "x"
        )

xarray/tests/test_concat.py:307:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d58aaf40>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
____________ TestConcatDataset.test_concat_fill_value[fill_value0] _____________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d5d8ae20>
fill_value = nan

    @pytest.mark.parametrize("fill_value", [dtypes.NA, 2, 2.0])
    def test_concat_fill_value(self, fill_value):
        datasets = [
            Dataset({"a": ("x", [2, 3]), "x": [1, 2]}),
            Dataset({"a": ("x", [1, 2]), "x": [0, 1]}),
        ]
        if fill_value == dtypes.NA:
            # if we supply the default, we expect the missing value for a
            # float array
            fill_value = np.nan
        expected = Dataset(
            {"a": (("t", "x"), [[fill_value, 2, 3], [1, 2, fill_value]])},
            {"x": [0, 1, 2]},
        )
>       actual = concat(datasets, dim="t", fill_value=fill_value)

xarray/tests/test_concat.py:327:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d8a8b0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_________________ TestConcatDataset.test_concat_fill_value[2] __________________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d5dbc3a0>
fill_value = 2

    @pytest.mark.parametrize("fill_value", [dtypes.NA, 2, 2.0])
    def test_concat_fill_value(self, fill_value):
        datasets = [
            Dataset({"a": ("x", [2, 3]), "x": [1, 2]}),
            Dataset({"a": ("x", [1, 2]), "x": [0, 1]}),
        ]
        if fill_value == dtypes.NA:
            # if we supply the default, we expect the missing value for a
            # float array
            fill_value = np.nan
        expected = Dataset(
            {"a": (("t", "x"), [[fill_value, 2, 3], [1, 2, fill_value]])},
            {"x": [0, 1, 2]},
        )
>       actual = concat(datasets, dim="t", fill_value=fill_value)

xarray/tests/test_concat.py:327:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5dbca00>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
________________ TestConcatDataset.test_concat_fill_value[2.0] _________________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d59a4490>
fill_value = 2.0

    @pytest.mark.parametrize("fill_value", [dtypes.NA, 2, 2.0])
    def test_concat_fill_value(self, fill_value):
        datasets = [
            Dataset({"a": ("x", [2, 3]), "x": [1, 2]}),
            Dataset({"a": ("x", [1, 2]), "x": [0, 1]}),
        ]
        if fill_value == dtypes.NA:
            # if we supply the default, we expect the missing value for a
            # float array
            fill_value = np.nan
        expected = Dataset(
            {"a": (("t", "x"), [[fill_value, 2, 3], [1, 2, fill_value]])},
            {"x": [0, 1, 2]},
        )
>       actual = concat(datasets, dim="t", fill_value=fill_value)

xarray/tests/test_concat.py:327:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d59a4f10>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
______________ TestConcatDataset.test_concat_different_variables _______________

self = <xarray.tests.test_concat.TestConcatDataset object at 0x7f73d5c67d90>

    def test_concat_different_variables(self):
        ds1 = Dataset({"a": ("x", [1, 2]), "x": [0, 1]})
        ds2 = Dataset({"b": ("x", [3, 4]), "x": [1, 2]})
        expected = Dataset(
            {
                "a": ("x", [1, 2, np.nan]),
                "b": ("x", [np.nan, 3, 4]),
            },
            {"x": [0, 1, 2]},
        )
>       actual = concat([ds1, ds2], dim="x", join="outer")

xarray/tests/test_concat.py:340:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5c67100>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_______________________ TestConcatDataArray.test_concat ________________________

self = <xarray.tests.test_concat.TestConcatDataArray object at 0x7f73d584cfa0>

    def test_concat(self):
        ds = Dataset(
            {
                "foo": (["x", "y"], np.random.random((2, 3))),
                "bar": (["x", "y"], np.random.random((2, 3))),
            },
            {"x": [0, 1]},
        )
        foo = ds["foo"]
        bar = ds["bar"]

        # from dataset array:
        expected = DataArray(
            np.array([foo.values, bar.values]),
            dims=["w", "x", "y"],
            coords={"x": [0, 1]},
        )
>       actual = concat([foo, bar], "w")

xarray/tests/test_concat.py:362:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:418: in _dataarray_concat
    ds = _dataset_concat(
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5d54bb0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
___________________ TestConcatDataArray.test_concat_encoding ___________________

self = <xarray.tests.test_concat.TestConcatDataArray object at 0x7f73d5cc1b80>

    def test_concat_encoding(self):
        # Regression test for GH1297
        ds = Dataset(
            {
                "foo": (["x", "y"], np.random.random((2, 3))),
                "bar": (["x", "y"], np.random.random((2, 3))),
            },
            {"x": [0, 1]},
        )
        foo = ds["foo"]
        foo.encoding = {"complevel": 5}
        ds.encoding = {"unlimited_dims": "x"}
>       assert concat([foo, foo], dim="x").encoding == foo.encoding

xarray/tests/test_concat.py:398:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:418: in _dataarray_concat
    ds = _dataset_concat(
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5cc19d0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_____________________ TestConcatDataArray.test_concat_lazy _____________________

self = <xarray.tests.test_concat.TestConcatDataArray object at 0x7f73d590efa0>

    @requires_dask
    def test_concat_lazy(self):
        import dask.array as da

        arrays = [
            DataArray(
                da.from_array(InaccessibleArray(np.zeros((3, 3))), 3), dims=["x", "y"]
            )
            for _ in range(2)
        ]
        # should not raise
>       combined = concat(arrays, dim="z")

xarray/tests/test_concat.py:412:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:418: in _dataarray_concat
    ds = _dataset_concat(
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d587f550>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
___________ TestConcatDataArray.test_concat_fill_value[fill_value0] ____________

self = <xarray.tests.test_concat.TestConcatDataArray object at 0x7f73d590b640>
fill_value = nan

    @pytest.mark.parametrize("fill_value", [dtypes.NA, 2, 2.0])
    def test_concat_fill_value(self, fill_value):
        foo = DataArray([1, 2], coords=[("x", [1, 2])])
        bar = DataArray([1, 2], coords=[("x", [1, 3])])
        if fill_value == dtypes.NA:
            # if we supply the default, we expect the missing value for a
            # float array
            fill_value = np.nan
        expected = DataArray(
            [[1, 2, fill_value], [1, fill_value, 2]],
            dims=["y", "x"],
            coords={"x": [1, 2, 3]},
        )
>       actual = concat((foo, bar), dim="y", fill_value=fill_value)

xarray/tests/test_concat.py:429:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:418: in _dataarray_concat
    ds = _dataset_concat(
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5dceaf0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
________________ TestConcatDataArray.test_concat_fill_value[2] _________________

self = <xarray.tests.test_concat.TestConcatDataArray object at 0x7f73d58b6a00>
fill_value = 2

    @pytest.mark.parametrize("fill_value", [dtypes.NA, 2, 2.0])
    def test_concat_fill_value(self, fill_value):
        foo = DataArray([1, 2], coords=[("x", [1, 2])])
        bar = DataArray([1, 2], coords=[("x", [1, 3])])
        if fill_value == dtypes.NA:
            # if we supply the default, we expect the missing value for a
            # float array
            fill_value = np.nan
        expected = DataArray(
            [[1, 2, fill_value], [1, fill_value, 2]],
            dims=["y", "x"],
            coords={"x": [1, 2, 3]},
        )
>       actual = concat((foo, bar), dim="y", fill_value=fill_value)

xarray/tests/test_concat.py:429:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:418: in _dataarray_concat
    ds = _dataset_concat(
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d58b6970>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
_______________ TestConcatDataArray.test_concat_fill_value[2.0] ________________

self = <xarray.tests.test_concat.TestConcatDataArray object at 0x7f73d5ce2280>
fill_value = 2.0

    @pytest.mark.parametrize("fill_value", [dtypes.NA, 2, 2.0])
    def test_concat_fill_value(self, fill_value):
        foo = DataArray([1, 2], coords=[("x", [1, 2])])
        bar = DataArray([1, 2], coords=[("x", [1, 3])])
        if fill_value == dtypes.NA:
            # if we supply the default, we expect the missing value for a
            # float array
            fill_value = np.nan
        expected = DataArray(
            [[1, 2, fill_value], [1, fill_value, 2]],
            dims=["y", "x"],
            coords={"x": [1, 2, 3]},
        )
>       actual = concat((foo, bar), dim="y", fill_value=fill_value)

xarray/tests/test_concat.py:429:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:418: in _dataarray_concat
    ds = _dataset_concat(
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d5cc1400>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
__________________ TestConcatDataArray.test_concat_join_kwarg __________________

self = <xarray.tests.test_concat.TestConcatDataArray object at 0x7f73d585dd60>

    def test_concat_join_kwarg(self):
        ds1 = Dataset(
            {"a": (("x", "y"), [[0]])}, coords={"x": [0], "y": [0]}
        ).to_array()
        ds2 = Dataset(
            {"a": (("x", "y"), [[0]])}, coords={"x": [1], "y": [0.0001]}
        ).to_array()

        expected = {}
        expected["outer"] = Dataset(
            {"a": (("x", "y"), [[0, np.nan], [np.nan, 0]])},
            {"x": [0, 1], "y": [0, 0.0001]},
        )
        expected["inner"] = Dataset(
            {"a": (("x", "y"), [[], []])}, {"x": [0, 1], "y": []}
        )
        expected["left"] = Dataset(
            {"a": (("x", "y"), np.array([0, np.nan], ndmin=2).T)},
            coords={"x": [0, 1], "y": [0]},
        )
        expected["right"] = Dataset(
            {"a": (("x", "y"), np.array([np.nan, 0], ndmin=2).T)},
            coords={"x": [0, 1], "y": [0.0001]},
        )
        expected["override"] = Dataset(
            {"a": (("x", "y"), np.array([0, 0], ndmin=2).T)},
            coords={"x": [0, 1], "y": [0]},
        )

        with raises_regex(ValueError, "indexes along dimension 'y'"):
            actual = concat([ds1, ds2], join="exact", dim="x")

        for join in expected:
>           actual = concat([ds1, ds2], join=join, dim="x")

xarray/tests/test_concat.py:465:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
xarray/core/concat.py:131: in concat
    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
xarray/core/concat.py:418: in _dataarray_concat
    ds = _dataset_concat(
xarray/core/concat.py:365: in _dataset_concat
    vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

.0 = <tuple_iterator object at 0x7f73d585f2e0>

>   vars = [ds.variables.get(k, Variable(ds.dims, np.full(ds.dims, fill_value))) for ds in datasets]
E   NameError: name 'np' is not defined

xarray/core/concat.py:365: NameError
=============================== warnings summary ===============================
xarray/tests/test_combine.py: 12 warnings
xarray/tests/test_concat.py: 9 warnings
  /testbed/xarray/core/alignment.py:300: FutureWarning: Index.__or__ operating as a set operation is deprecated, in the future this will be a logical operation matching Series.__or__.  Use index.union(other) instead
    index = joiner(matching_indexes)

xarray/tests/test_combine.py: 29 warnings
xarray/tests/test_concat.py: 733 warnings
  /testbed/xarray/core/formatting.py:142: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    elif isinstance(x, (float, np.float)):

xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_join[inner-expected1]
xarray/tests/test_combine.py::TestCombineAuto::test_combine_coords_join[inner-expected1]
  /testbed/xarray/core/alignment.py:300: FutureWarning: Index.__and__ operating as a set operation is deprecated, in the future this will be a logical operation matching Series.__and__.  Use index.intersection(other) instead
    index = joiner(matching_indexes)

-- Docs: https://docs.pytest.org/en/stable/warnings.html
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_1d
PASSED xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_2d
PASSED xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_3d
PASSED xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_single_dataset
PASSED xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_redundant_nesting
PASSED xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_ignore_empty_list
PASSED xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_uneven_depth_input
PASSED xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_uneven_length_input
PASSED xarray/tests/test_combine.py::TestTileIDsFromNestedList::test_infer_from_datasets
PASSED xarray/tests/test_combine.py::TestTileIDsFromCoords::test_1d
PASSED xarray/tests/test_combine.py::TestTileIDsFromCoords::test_2d
PASSED xarray/tests/test_combine.py::TestTileIDsFromCoords::test_no_dimension_coords
PASSED xarray/tests/test_combine.py::TestTileIDsFromCoords::test_coord_not_monotonic
PASSED xarray/tests/test_combine.py::TestTileIDsFromCoords::test_coord_monotonically_decreasing
PASSED xarray/tests/test_combine.py::TestTileIDsFromCoords::test_no_concatenation_needed
PASSED xarray/tests/test_combine.py::TestTileIDsFromCoords::test_2d_plus_bystander_dim
PASSED xarray/tests/test_combine.py::TestTileIDsFromCoords::test_string_coords
PASSED xarray/tests/test_combine.py::TestTileIDsFromCoords::test_lexicographic_sort_string_coords
PASSED xarray/tests/test_combine.py::TestTileIDsFromCoords::test_datetime_coords
PASSED xarray/tests/test_combine.py::TestNewTileIDs::test_new_tile_id[old_id0-new_id0]
PASSED xarray/tests/test_combine.py::TestNewTileIDs::test_new_tile_id[old_id1-new_id1]
PASSED xarray/tests/test_combine.py::TestNewTileIDs::test_new_tile_id[old_id2-new_id2]
PASSED xarray/tests/test_combine.py::TestNewTileIDs::test_new_tile_id[old_id3-new_id3]
PASSED xarray/tests/test_combine.py::TestNewTileIDs::test_new_tile_id[old_id4-new_id4]
PASSED xarray/tests/test_combine.py::TestNewTileIDs::test_get_new_tile_ids
PASSED xarray/tests/test_combine.py::TestCheckShapeTileIDs::test_check_depths
PASSED xarray/tests/test_combine.py::TestCheckShapeTileIDs::test_check_lengths
PASSED xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_join_exact
PASSED xarray/tests/test_combine.py::TestNestedCombine::test_empty_input
PASSED xarray/tests/test_combine.py::TestNestedCombine::test_invalid_hypercube_input
PASSED xarray/tests/test_combine.py::TestCombineAuto::test_combine_coords_join_exact
PASSED xarray/tests/test_combine.py::TestCombineAuto::test_combine_by_coords_still_fails
PASSED xarray/tests/test_combine.py::TestCombineAuto::test_combine_by_coords_no_concat
XFAIL xarray/tests/test_combine.py::TestNestedCombine::test_nested_concat_too_many_dims_at_once
FAILED xarray/tests/test_combine.py::TestCombineND::test_concat_once[dim1] - ...
FAILED xarray/tests/test_combine.py::TestCombineND::test_concat_once[new_dim]
FAILED xarray/tests/test_combine.py::TestCombineND::test_concat_only_first_dim
FAILED xarray/tests/test_combine.py::TestCombineND::test_concat_twice[dim1]
FAILED xarray/tests/test_combine.py::TestCombineND::test_concat_twice[new_dim]
FAILED xarray/tests/test_combine.py::TestNestedCombine::test_nested_concat - ...
FAILED xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_join[outer-expected0]
FAILED xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_join[inner-expected1]
FAILED xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_join[left-expected2]
FAILED xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_join[right-expected3]
FAILED xarray/tests/test_combine.py::TestNestedCombine::test_nested_concat_along_new_dim
FAILED xarray/tests/test_combine.py::TestNestedCombine::test_nested_merge - N...
FAILED xarray/tests/test_combine.py::TestNestedCombine::test_concat_multiple_dims
FAILED xarray/tests/test_combine.py::TestNestedCombine::test_concat_name_symmetry
FAILED xarray/tests/test_combine.py::TestNestedCombine::test_concat_one_dim_merge_another
FAILED xarray/tests/test_combine.py::TestNestedCombine::test_auto_combine_2d
FAILED xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_missing_data_new_dim
FAILED xarray/tests/test_combine.py::TestNestedCombine::test_merge_one_dim_concat_another
FAILED xarray/tests/test_combine.py::TestNestedCombine::test_combine_concat_over_redundant_nesting
FAILED xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_fill_value[fill_value0]
FAILED xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_fill_value[2]
FAILED xarray/tests/test_combine.py::TestNestedCombine::test_combine_nested_fill_value[2.0]
FAILED xarray/tests/test_combine.py::TestCombineAuto::test_combine_by_coords
FAILED xarray/tests/test_combine.py::TestCombineAuto::test_combine_coords_join[outer-expected0]
FAILED xarray/tests/test_combine.py::TestCombineAuto::test_combine_coords_join[inner-expected1]
FAILED xarray/tests/test_combine.py::TestCombineAuto::test_combine_coords_join[left-expected2]
FAILED xarray/tests/test_combine.py::TestCombineAuto::test_combine_coords_join[right-expected3]
FAILED xarray/tests/test_combine.py::TestCombineAuto::test_infer_order_from_coords
FAILED xarray/tests/test_combine.py::TestCombineAuto::test_combine_leaving_bystander_dimensions
FAILED xarray/tests/test_combine.py::TestCombineAuto::test_combine_by_coords_previously_failed
FAILED xarray/tests/test_combine.py::TestCombineAuto::test_check_for_impossible_ordering
FAILED xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine
FAILED xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_previously_failed
FAILED xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_still_fails
FAILED xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_no_concat
FAILED xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_order_by_appearance_not_coords
FAILED xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_fill_value[fill_value0]
FAILED xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_fill_value[2]
FAILED xarray/tests/test_combine.py::TestAutoCombineOldAPI::test_auto_combine_fill_value[2.0]
FAILED xarray/tests/test_combine.py::TestAutoCombineDeprecation::test_auto_combine_with_concat_dim
FAILED xarray/tests/test_combine.py::TestAutoCombineDeprecation::test_auto_combine_with_merge_and_concat
FAILED xarray/tests/test_combine.py::TestAutoCombineDeprecation::test_auto_combine_with_coords
FAILED xarray/tests/test_combine.py::TestAutoCombineDeprecation::test_auto_combine_without_coords
FAILED xarray/tests/test_concat.py::test_concat_compat - NameError: name 'np'...
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim1-different]
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim1-minimal]
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim2-different]
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_simple[dim2-minimal]
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_2 - NameEr...
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim1-different]
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim1-minimal]
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim1-all]
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim2-different]
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim2-minimal]
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords_kwarg[dim2-all]
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat - NameErro...
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_dim_precedence
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_data_vars
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_coords - N...
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_constant_index
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_size0 - Na...
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_autoalign
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_errors - N...
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_join_kwarg
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_promote_shape
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_do_not_promote
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_dim_is_variable
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_multiindex
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_fill_value[fill_value0]
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_fill_value[2]
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_fill_value[2.0]
FAILED xarray/tests/test_concat.py::TestConcatDataset::test_concat_different_variables
FAILED xarray/tests/test_concat.py::TestConcatDataArray::test_concat - NameEr...
FAILED xarray/tests/test_concat.py::TestConcatDataArray::test_concat_encoding
FAILED xarray/tests/test_concat.py::TestConcatDataArray::test_concat_lazy - N...
FAILED xarray/tests/test_concat.py::TestConcatDataArray::test_concat_fill_value[fill_value0]
FAILED xarray/tests/test_concat.py::TestConcatDataArray::test_concat_fill_value[2]
FAILED xarray/tests/test_concat.py::TestConcatDataArray::test_concat_fill_value[2.0]
FAILED xarray/tests/test_concat.py::TestConcatDataArray::test_concat_join_kwarg
============ 79 failed, 33 passed, 1 xfailed, 785 warnings in 6.89s ============

